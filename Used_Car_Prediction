{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/emfrank117/Used_Car_Price_Prediction_Model/blob/main/Used_Car_Prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9qwNfrVxzqUK"
      },
      "source": [
        "# **Used Cars Price Prediction**"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "-------------------\n",
        "## **Context:**\n",
        "-------------------\n",
        "\n",
        "There is a huge demand for used cars in the Indian Market today. As sales of new cars have slowed down in the recent past, the pre-owned car market has continued to grow over the past few years and is now larger than the new car market. Cars4U is a budding tech start-up that aims to find footholes in this market.\n",
        "\n",
        "In 2018-19, while new car sales were recorded at 3.6 million units, around 4 million second-hand cars were bought and sold. There is a slowdown in new car sales and that could mean that the demand is shifting towards the pre-owned market. In fact, some car owners replace their old vehicles with pre-owned cars instead of buying a new automobile.\n",
        "\n",
        "Unlike new cars, where price and supply are fairly deterministic and managed by OEMs (Original Equipment Manufacturer / except for dealership level discounts which come into play only in the last stage of the customer journey), the used car market is a very different beast, with large uncertainties in both pricing and supply. Several factors, including mileage, brand, model, year, etc. can influence the actual worth of a car. From the perspective of a seller, it is not an easy task to set the correct price of a used car. Keeping this in mind, the pricing scheme of these used cars becomes important in order to grow in the market.\n",
        "\n",
        "--------------------\n",
        "## **Objective:**\n",
        "--------------------\n",
        "\n",
        "Come up with a pricing model that can effectively predict the price of used cars and can help the business in devising profitable strategies using differential pricing.\n",
        "\n",
        "---------------------\n",
        "## **Data Dictionary**\n",
        "---------------------\n",
        "\n",
        "* **S.No.** : Serial Number\n",
        "* **Name** : Name of the car which includes Brand name and Model name\n",
        "* **Location** : The location in which the car is being sold or is available for purchase (Cities)\n",
        "* **Year** : Manufacturing year of the car\n",
        "* **Kilometers_Driven** : The total kilometers driven in the car by the previous owner(s) in KM\n",
        "* **Fuel_Type** : The type of fuel used by the car (Petrol, Diesel, Electric, CNG, LPG)\n",
        "* **Transmission** : The type of transmission used by the car (Automatic / Manual)\n",
        "* **Owner_Type** : Type of ownership\n",
        "* **Mileage** : The standard mileage offered by the car company in kmpl or km/kg\n",
        "* **Engine** : The displacement volume of the engine in CC\n",
        "* **Power** : The maximum power of the engine in bhp\n",
        "* **Seats** : The number of seats in the car\n",
        "* **New_price** : The price of a new car of the same model in INR 100,000\n",
        "* **Price** : The price of the used car in INR 100,000 (**Target Variable**)"
      ],
      "metadata": {
        "id": "Pdkh9UwksetC"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7AYx75_WoxUj"
      },
      "source": [
        "## **Problem Definition**\n",
        "\n",
        "### **The Context:**\n",
        "\n",
        " - Why is this problem important to solve?\n",
        "    * Being able to assess the value of a vehicle is paramount in the purchasing of inventory and also the selling of inventory. Undervalued cars and over priced cars will both lose a company money.\n",
        "\n",
        "### **The objective:**\n",
        "\n",
        " - What is the intended goal?\n",
        "  * Answer: Most obvious, for profitability, increased revenue leads to more purchasing power, larger inventory of vehicles equals more sales. But philosophically the context speaks to creating a movement towards increased used cars sales, and that is ultimately dependent on accurate pricing rather than overpricing.  \n",
        "\n",
        "### **The key questions:**\n",
        "\n",
        "- What are the key questions that need to be answered?\n",
        "  * Answer: Can you utilize a model to predict used vehicle price?\n",
        "  * What are the most important features of a vehicle for identifying price.\n",
        "  * How can you monetize from the information found during this process.\n",
        "\n",
        "### **The problem formulation**:\n",
        "\n",
        "- What is it that we are trying to solve using data science?\n",
        "  * Answer: Optimized pricing strategies benefits the seller and the buyer. Knowledge of the nuiances of the used car retail markets allow for prices to be alligned with value improving the overall functioning of the system.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rlLoEhsbtOSg"
      },
      "source": [
        "### **Loading libraries**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Libraries to help with reading and manipulating data\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Library to split the data\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Libaries to help with data visualization\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from seaborn.matrix import gridspec\n",
        "\n",
        "# Removes the limit for the number of displayed columns\n",
        "pd.set_option(\"display.max_columns\", None)\n",
        "\n",
        "# Sets the limit for the number of displayed rows\n",
        "pd.set_option(\"display.max_rows\", 200)\n",
        "\n",
        "# Import libraries for preprocessing, building, and tuning regression models\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler, RobustScaler\n",
        "from statsmodels.formula.api import ols\n",
        "import statsmodels.api as sm\n",
        "from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n",
        "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor, BaggingRegressor, AdaBoostRegressor, GradientBoostingRegressor\n",
        "from xgboost import XGBRegressor\n",
        "from mlxtend.feature_selection import SequentialFeatureSelector as SFS\n",
        "from mlxtend.plotting import plot_sequential_feature_selection as plot_sfs\n",
        "\n",
        "# Import libraries for model evaluation\n",
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "from seaborn.matrix import gridspec\n",
        "from sklearn.metrics import make_scorer, r2_score, mean_squared_error, mean_absolute_error, mean_absolute_percentage_error\n",
        "import statsmodels.stats.api as sms\n",
        "from scipy import stats\n",
        "import pylab\n",
        "from sklearn.model_selection import cross_val_score, KFold\n",
        "from statsmodels.stats.diagnostic import het_white\n",
        "from statsmodels.compat import lzip\n",
        "from sklearn import tree\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "metadata": {
        "id": "FQdIM8evpuHW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "flK0muyhtOSi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f0f76008-6dbf-4bde-fe97-903f7dc94b62"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "baG7rS5FtOSh"
      },
      "source": [
        "### **Loading the data**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/drive/MyDrive/MIT--Data Science Course/Capstone Project/used_cars.csv')\n",
        "df = data.copy()"
      ],
      "metadata": {
        "id": "fL_aU0Waw13b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C-vYvvwEj6wz"
      },
      "source": [
        "### **Data Overview**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the shape of the data\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J-saotmgxCoS",
        "outputId": "1ef40895-f091-408f-b946-278f48bc9ba0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(7253, 14)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The dataset has 14 columns with 7253 rows."
      ],
      "metadata": {
        "id": "kwnACyEhUYyu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the first and last rows of data\n",
        "df.head()"
      ],
      "metadata": {
        "id": "9hU4O3v-xCiC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 201
        },
        "outputId": "3a419d8c-3979-4de1-c25a-d84faf995d27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   S.No.                              Name    Location  Year  \\\n",
              "0      0            Maruti Wagon R LXI CNG      Mumbai  2010   \n",
              "1      1  Hyundai Creta 1.6 CRDi SX Option        Pune  2015   \n",
              "2      2                      Honda Jazz V     Chennai  2011   \n",
              "3      3                 Maruti Ertiga VDI     Chennai  2012   \n",
              "4      4   Audi A4 New 2.0 TDI Multitronic  Coimbatore  2013   \n",
              "\n",
              "   Kilometers_Driven Fuel_Type Transmission Owner_Type  Mileage  Engine  \\\n",
              "0              72000       CNG       Manual      First    26.60   998.0   \n",
              "1              41000    Diesel       Manual      First    19.67  1582.0   \n",
              "2              46000    Petrol       Manual      First    18.20  1199.0   \n",
              "3              87000    Diesel       Manual      First    20.77  1248.0   \n",
              "4              40670    Diesel    Automatic     Second    15.20  1968.0   \n",
              "\n",
              "    Power  Seats  New_price  Price  \n",
              "0   58.16    5.0        NaN   1.75  \n",
              "1  126.20    5.0        NaN  12.50  \n",
              "2   88.70    5.0       8.61   4.50  \n",
              "3   88.76    7.0        NaN   6.00  \n",
              "4  140.80    5.0        NaN  17.74  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-38f348bc-75ba-4637-9f60-cb540ee2d91a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>S.No.</th>\n",
              "      <th>Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Maruti Wagon R LXI CNG</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>2010</td>\n",
              "      <td>72000</td>\n",
              "      <td>CNG</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>26.60</td>\n",
              "      <td>998.0</td>\n",
              "      <td>58.16</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Hyundai Creta 1.6 CRDi SX Option</td>\n",
              "      <td>Pune</td>\n",
              "      <td>2015</td>\n",
              "      <td>41000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.67</td>\n",
              "      <td>1582.0</td>\n",
              "      <td>126.20</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Honda Jazz V</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>2011</td>\n",
              "      <td>46000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.20</td>\n",
              "      <td>1199.0</td>\n",
              "      <td>88.70</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.61</td>\n",
              "      <td>4.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Maruti Ertiga VDI</td>\n",
              "      <td>Chennai</td>\n",
              "      <td>2012</td>\n",
              "      <td>87000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.77</td>\n",
              "      <td>1248.0</td>\n",
              "      <td>88.76</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Audi A4 New 2.0 TDI Multitronic</td>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>2013</td>\n",
              "      <td>40670</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>15.20</td>\n",
              "      <td>1968.0</td>\n",
              "      <td>140.80</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.74</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38f348bc-75ba-4637-9f60-cb540ee2d91a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-38f348bc-75ba-4637-9f60-cb540ee2d91a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-38f348bc-75ba-4637-9f60-cb540ee2d91a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-47ebbaec-01bd-42ed-9693-b5d045ff5b48\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47ebbaec-01bd-42ed-9693-b5d045ff5b48')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-47ebbaec-01bd-42ed-9693-b5d045ff5b48 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 7253,\n  \"fields\": [\n    {\n      \"column\": \"S.No.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2093,\n        \"min\": 0,\n        \"max\": 7252,\n        \"num_unique_values\": 7253,\n        \"samples\": [\n          2954,\n          6520,\n          6036\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2041,\n        \"samples\": [\n          \"Toyota Platinum Etios 1.4 GXD\",\n          \"Fiat Linea T-Jet Active\",\n          \"Hyundai Verna SX CRDi AT\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Jaipur\",\n          \"Mumbai\",\n          \"Bangalore\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1996,\n        \"max\": 2019,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          2004,\n          2007,\n          2010\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84427,\n        \"min\": 171,\n        \"max\": 6500000,\n        \"num_unique_values\": 3660,\n        \"samples\": [\n          85001,\n          8350,\n          21000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Diesel\",\n          \"Electric\",\n          \"Petrol\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Automatic\",\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Second\",\n          \"Third\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.562196601725892,\n        \"min\": 0.0,\n        \"max\": 33.54,\n        \"num_unique_values\": 438,\n        \"samples\": [\n          21.8,\n          23.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 595.2851369164412,\n        \"min\": 72.0,\n        \"max\": 5998.0,\n        \"num_unique_values\": 150,\n        \"samples\": [\n          2523.0,\n          2494.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53.49355313410414,\n        \"min\": 34.2,\n        \"max\": 616.0,\n        \"num_unique_values\": 383,\n        \"samples\": [\n          102.57,\n          158.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8092772564041439,\n        \"min\": 2.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.75934363434096,\n        \"min\": 3.91,\n        \"max\": 375.0,\n        \"num_unique_values\": 625,\n        \"samples\": [\n          5.8,\n          8.69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.1879171124555,\n        \"min\": 0.44,\n        \"max\": 160.0,\n        \"num_unique_values\": 1373,\n        \"samples\": [\n          10.99,\n          45.86\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "id": "3eDZSaZbxCdF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 201
        },
        "outputId": "0f0da2ab-bb6c-4f1a-86e8-b9c09868582a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      S.No.                                               Name   Location  \\\n",
              "7248   7248                  Volkswagen Vento Diesel Trendline  Hyderabad   \n",
              "7249   7249                             Volkswagen Polo GT TSI     Mumbai   \n",
              "7250   7250                             Nissan Micra Diesel XV    Kolkata   \n",
              "7251   7251                             Volkswagen Polo GT TSI       Pune   \n",
              "7252   7252  Mercedes-Benz E-Class 2009-2013 E 220 CDI Avan...      Kochi   \n",
              "\n",
              "      Year  Kilometers_Driven Fuel_Type Transmission Owner_Type  Mileage  \\\n",
              "7248  2011              89411    Diesel       Manual      First    20.54   \n",
              "7249  2015              59000    Petrol    Automatic      First    17.21   \n",
              "7250  2012              28000    Diesel       Manual      First    23.08   \n",
              "7251  2013              52262    Petrol    Automatic      Third    17.20   \n",
              "7252  2014              72443    Diesel    Automatic      First    10.00   \n",
              "\n",
              "      Engine  Power  Seats  New_price  Price  \n",
              "7248  1598.0  103.6    5.0        NaN    NaN  \n",
              "7249  1197.0  103.6    5.0        NaN    NaN  \n",
              "7250  1461.0   63.1    5.0        NaN    NaN  \n",
              "7251  1197.0  103.6    5.0        NaN    NaN  \n",
              "7252  2148.0  170.0    5.0        NaN    NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95795c34-6821-4e3e-a1f5-efb832fae0a1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>S.No.</th>\n",
              "      <th>Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7248</th>\n",
              "      <td>7248</td>\n",
              "      <td>Volkswagen Vento Diesel Trendline</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>2011</td>\n",
              "      <td>89411</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.54</td>\n",
              "      <td>1598.0</td>\n",
              "      <td>103.6</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7249</th>\n",
              "      <td>7249</td>\n",
              "      <td>Volkswagen Polo GT TSI</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>2015</td>\n",
              "      <td>59000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>17.21</td>\n",
              "      <td>1197.0</td>\n",
              "      <td>103.6</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7250</th>\n",
              "      <td>7250</td>\n",
              "      <td>Nissan Micra Diesel XV</td>\n",
              "      <td>Kolkata</td>\n",
              "      <td>2012</td>\n",
              "      <td>28000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>23.08</td>\n",
              "      <td>1461.0</td>\n",
              "      <td>63.1</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7251</th>\n",
              "      <td>7251</td>\n",
              "      <td>Volkswagen Polo GT TSI</td>\n",
              "      <td>Pune</td>\n",
              "      <td>2013</td>\n",
              "      <td>52262</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Third</td>\n",
              "      <td>17.20</td>\n",
              "      <td>1197.0</td>\n",
              "      <td>103.6</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7252</th>\n",
              "      <td>7252</td>\n",
              "      <td>Mercedes-Benz E-Class 2009-2013 E 220 CDI Avan...</td>\n",
              "      <td>Kochi</td>\n",
              "      <td>2014</td>\n",
              "      <td>72443</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>10.00</td>\n",
              "      <td>2148.0</td>\n",
              "      <td>170.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95795c34-6821-4e3e-a1f5-efb832fae0a1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95795c34-6821-4e3e-a1f5-efb832fae0a1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95795c34-6821-4e3e-a1f5-efb832fae0a1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dda8aab1-8e3a-42fe-96f1-1ca49f7288db\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dda8aab1-8e3a-42fe-96f1-1ca49f7288db')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dda8aab1-8e3a-42fe-96f1-1ca49f7288db button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"S.No.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 7248,\n        \"max\": 7252,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7249,\n          7252,\n          7250\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Volkswagen Polo GT TSI\",\n          \"Mercedes-Benz E-Class 2009-2013 E 220 CDI Avantgarde\",\n          \"Volkswagen Vento Diesel Trendline\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Mumbai\",\n          \"Kochi\",\n          \"Kolkata\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2011,\n        \"max\": 2015,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2015,\n          2014,\n          2012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22937,\n        \"min\": 28000,\n        \"max\": 89411,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          59000,\n          72443,\n          28000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Automatic\",\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Third\",\n          \"First\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.91797519310539,\n        \"min\": 10.0,\n        \"max\": 23.08,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          17.21,\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 391.34601058398437,\n        \"min\": 1197.0,\n        \"max\": 2148.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1197.0,\n          2148.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.454674618308765,\n        \"min\": 63.1,\n        \"max\": 170.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          103.6,\n          63.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 5.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* As shown, we have a dataset showing an array of information pertaining to the current state of a used vehicle.\n",
        "  * The Name column holds information that needs to be seperated.\n",
        "  * The Year would likely be more useful as an age.\n",
        "  * We can already see missing values in the New_Price and Price column."
      ],
      "metadata": {
        "id": "XTRGtu6wWZoS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the data types of all columns\n",
        "df.info()"
      ],
      "metadata": {
        "id": "D_R5c35LxCav",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ddd42844-2c9a-442e-9a44-d19d69d2ab29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7253 entries, 0 to 7252\n",
            "Data columns (total 14 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   S.No.              7253 non-null   int64  \n",
            " 1   Name               7253 non-null   object \n",
            " 2   Location           7253 non-null   object \n",
            " 3   Year               7253 non-null   int64  \n",
            " 4   Kilometers_Driven  7253 non-null   int64  \n",
            " 5   Fuel_Type          7253 non-null   object \n",
            " 6   Transmission       7253 non-null   object \n",
            " 7   Owner_Type         7253 non-null   object \n",
            " 8   Mileage            7251 non-null   float64\n",
            " 9   Engine             7207 non-null   float64\n",
            " 10  Power              7078 non-null   float64\n",
            " 11  Seats              7200 non-null   float64\n",
            " 12  New_price          1006 non-null   float64\n",
            " 13  Price              6019 non-null   float64\n",
            "dtypes: float64(6), int64(3), object(5)\n",
            "memory usage: 793.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observations:**\n",
        "\n",
        "* There is a combination of categorical and numerical columns.\n",
        "* There are multple columns that will need to be addressed for missing values and or datatype."
      ],
      "metadata": {
        "id": "DiIay7hvZTP3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the unique values for each column\n",
        "df.nunique()"
      ],
      "metadata": {
        "id": "PriMBSkYxYDJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ea90eff8-0c61-4f63-ea15-8a3092bd6030"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "S.No.                7253\n",
              "Name                 2041\n",
              "Location               11\n",
              "Year                   23\n",
              "Kilometers_Driven    3660\n",
              "Fuel_Type               5\n",
              "Transmission            2\n",
              "Owner_Type              4\n",
              "Mileage               438\n",
              "Engine                150\n",
              "Power                 383\n",
              "Seats                   8\n",
              "New_price             625\n",
              "Price                1373\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* S.No. has 7253 unique values, this will need to be dropped.\n",
        "* Location, Fuel_Type, Transmission, Owner_Type, and Seats are categorical.\n",
        "* Fuel type needs looked at to determine if all classfications are accurate."
      ],
      "metadata": {
        "id": "LSCu7tzEZwui"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking categorical variables\n",
        "cat_col = ['Location', 'Fuel_Type', 'Transmission', 'Owner_Type', 'Seats']\n",
        "\n",
        "for column in cat_col:\n",
        "    print(data[column].value_counts(0))\n",
        "    print(\"-\" * 50)"
      ],
      "metadata": {
        "id": "50g6mk5rRV7Y",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "552f8215-af13-4357-ed4c-2e4d4e417998"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Location\n",
            "Mumbai        949\n",
            "Hyderabad     876\n",
            "Coimbatore    772\n",
            "Kochi         772\n",
            "Pune          765\n",
            "Delhi         660\n",
            "Kolkata       654\n",
            "Chennai       591\n",
            "Jaipur        499\n",
            "Bangalore     440\n",
            "Ahmedabad     275\n",
            "Name: count, dtype: int64\n",
            "--------------------------------------------------\n",
            "Fuel_Type\n",
            "Diesel      3852\n",
            "Petrol      3325\n",
            "CNG           62\n",
            "LPG           12\n",
            "Electric       2\n",
            "Name: count, dtype: int64\n",
            "--------------------------------------------------\n",
            "Transmission\n",
            "Manual       5204\n",
            "Automatic    2049\n",
            "Name: count, dtype: int64\n",
            "--------------------------------------------------\n",
            "Owner_Type\n",
            "First             5952\n",
            "Second            1152\n",
            "Third              137\n",
            "Fourth & Above      12\n",
            "Name: count, dtype: int64\n",
            "--------------------------------------------------\n",
            "Seats\n",
            "5.0     6048\n",
            "7.0      796\n",
            "8.0      170\n",
            "4.0      119\n",
            "6.0       38\n",
            "2.0       18\n",
            "10.0       8\n",
            "9.0        3\n",
            "Name: count, dtype: int64\n",
            "--------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "id": "vaJfaYeXJoOW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a44900fe-2b1d-4047-fb50-37ce37b91174"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 7253 entries, 0 to 7252\n",
            "Data columns (total 14 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   S.No.              7253 non-null   int64  \n",
            " 1   Name               7253 non-null   object \n",
            " 2   Location           7253 non-null   object \n",
            " 3   Year               7253 non-null   int64  \n",
            " 4   Kilometers_Driven  7253 non-null   int64  \n",
            " 5   Fuel_Type          7253 non-null   object \n",
            " 6   Transmission       7253 non-null   object \n",
            " 7   Owner_Type         7253 non-null   object \n",
            " 8   Mileage            7251 non-null   float64\n",
            " 9   Engine             7207 non-null   float64\n",
            " 10  Power              7078 non-null   float64\n",
            " 11  Seats              7200 non-null   float64\n",
            " 12  New_price          1006 non-null   float64\n",
            " 13  Price              6019 non-null   float64\n",
            "dtypes: float64(6), int64(3), object(5)\n",
            "memory usage: 793.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observations:** **(QUESTION 2a)**\n",
        "\n",
        "* The unique values of the categorical colums show clear trends of the types of cars available in this market.\n",
        "  * While some cities have higher sales, there are significant sales in all of the 11 locations.\n",
        "  * Petrol and Diesel are similar in numbers and make up the majority of the records.\n",
        "    * All categories of fuel type are different, possibly combining the CNG, LPG, and Electric as an \"green\" option might be helpful.  \n",
        "  * More manual than automatic transmissions.\n",
        "  * Majority of records are from First and Second owners.\n",
        "  * Majority of vehicles have 5 Seats, but they range from 2 to 10.\n",
        "    * Seats is classified as a float, it will need to be change it to object.\n",
        "  "
      ],
      "metadata": {
        "id": "WYeNB3mKUksK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for null and duplicate data\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "id": "PyNFvtdkxCVj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4b56ee2b-e121-43a2-9e24-ac3f6118fa96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "S.No.                   0\n",
              "Name                    0\n",
              "Location                0\n",
              "Year                    0\n",
              "Kilometers_Driven       0\n",
              "Fuel_Type               0\n",
              "Transmission            0\n",
              "Owner_Type              0\n",
              "Mileage                 2\n",
              "Engine                 46\n",
              "Power                 175\n",
              "Seats                  53\n",
              "New_price            6247\n",
              "Price                1234\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2qLw_c1Jj6wz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1ec2d672-8242-43b1-be82-7323e37fbe7e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "df.duplicated().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* There are a variety of missing values that will need to be addressed, including New_price that is missing 86.1% of the data.  \n",
        "* There are no duplicate entries."
      ],
      "metadata": {
        "id": "qCeMnc3BWITc"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "crnR9cphIrct"
      },
      "source": [
        "## **Exploratory Data Analysis**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "foDG3YDDtOSm"
      },
      "source": [
        "**Questions:**\n",
        "\n",
        "* 1a. What is the summary statistics of the data? Explore summary statistics for numerical variables and the categorical variables **(below)**\n",
        "* 2a. Find out number of unique observations in each category of categorical columns? Write your findings/observations/insights **(above)**\n",
        "* 3a. Check the extreme values in different columns of the given data and write down the observtions? Remove the data where the values are un-realistic **(below)**"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Data Preprocessing**"
      ],
      "metadata": {
        "id": "K2H3U9gqTNwm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping S.No. as it provides no information\n",
        "df.drop(columns = ['S.No.'], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "XTC8zvT5TRwY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation**\n",
        "\n",
        "* The serial number provided no useful information with 7253 unique values, therefore it was removed."
      ],
      "metadata": {
        "id": "Mn4Ue1rzUJgW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Changing the manufactured Year to the Age of the vehicle\n",
        "df[\"Age\"] = 2020 - df.Year\n",
        "\n",
        "df.drop(columns = ['Year'], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "34_V6JS8jc2L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The age of a used vehicle is intrigual in the pricing.  The year of the model is also valuable, but the information from the age can still also be utilized in this form and is more valuable for modeling.\n",
        "* 2020 was chosen as the year as the data's max year is 2019 and a 2019 vehcile can be released as new until December 31, 2019."
      ],
      "metadata": {
        "id": "ORFozATsrhkj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Making the Name all lowercase and seperating the Brand, Model, and Series into three columns\n",
        "df['Name'] = df['Name'].str.lower()\n",
        "\n",
        "df_make = df['Name'].str.split(' ', n=1, expand=True)\n",
        "df['Brand'] = df_make[0]\n",
        "\n",
        "df_model = df_make[1].str.split(' ', n=1, expand=True)\n",
        "df['Model'] = df_model[0]\n",
        "df['Series'] = df_model[1]\n",
        "\n",
        "df.drop(['Name'], axis=1, inplace=True)\n",
        "\n",
        "df['Brand'] = df['Brand'].astype('object')\n",
        "df['Model'] = df['Model'].astype('object')\n",
        "df['Series'] = df['Series'].astype('object')\n"
      ],
      "metadata": {
        "id": "x9YXDxz-62Xz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking Brand percentages\n",
        "(df['Brand'].value_counts(normalize=True) * 100).round(2)"
      ],
      "metadata": {
        "id": "d8lrJaVV-SOM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e40e1d67-d9f3-41d7-a6ab-b10d4a66cb06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Brand\n",
              "maruti           19.91\n",
              "hyundai          18.48\n",
              "honda            10.24\n",
              "toyota            6.99\n",
              "mercedes-benz     5.24\n",
              "volkswagen        5.16\n",
              "ford              4.84\n",
              "mahindra          4.56\n",
              "bmw               4.30\n",
              "audi              3.93\n",
              "tata              3.14\n",
              "skoda             2.79\n",
              "renault           2.34\n",
              "chevrolet         2.08\n",
              "nissan            1.61\n",
              "land              0.92\n",
              "jaguar            0.66\n",
              "fiat              0.52\n",
              "mitsubishi        0.50\n",
              "mini              0.43\n",
              "volvo             0.39\n",
              "porsche           0.26\n",
              "jeep              0.26\n",
              "datsun            0.23\n",
              "isuzu             0.07\n",
              "force             0.04\n",
              "bentley           0.03\n",
              "smart             0.01\n",
              "ambassador        0.01\n",
              "lamborghini       0.01\n",
              "hindustan         0.01\n",
              "opelcorsa         0.01\n",
              "Name: proportion, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking Model counts\n",
        "df['Model'].value_counts()"
      ],
      "metadata": {
        "id": "5ih3lgFQ_usn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42f6339d-d9cb-4e65-8daa-2ebef0f146b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Model\n",
              "swift      418\n",
              "city       318\n",
              "i20        303\n",
              "innova     203\n",
              "verna      200\n",
              "          ... \n",
              "fortwo       1\n",
              "redi         1\n",
              "e            1\n",
              "mustang      1\n",
              "1.4gsi       1\n",
              "Name: count, Length: 218, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking Series counts\n",
        "df['Series'].value_counts()"
      ],
      "metadata": {
        "id": "_RzpIfUNDLHU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "adb87a87-d47f-4472-de61-1bcda07672b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Series\n",
              "vdi                     125\n",
              "vxi                      71\n",
              "dzire vdi                62\n",
              "lxi                      57\n",
              "w8 2wd                   55\n",
              "                       ... \n",
              "amt ddis vdi              1\n",
              "r vxi bs iv with abs      1\n",
              "active s diesel           1\n",
              "2.4l 4wd mt               1\n",
              "i20 magna plus            1\n",
              "Name: count, Length: 1859, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Maruti at nearly 20%, Hyundai at 18%, and Honda at 10% are the top 3 brands of vehicles\n",
        "* After initally just spliting the Brand and Model, it appeared that there was more information to gain by spliting the Model and Series, which is shown in the Model counts, the top 5 have between 418 and 200 entries."
      ],
      "metadata": {
        "id": "ldifkT7DAeIR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Fixing the error from the split on the Brand Land Rover.\n",
        "df.loc[df['Brand'].str.contains('land', case=False, na=False), 'Brand'] = 'land rover'\n",
        "land_rover= df['Brand'] == 'land rover'\n",
        "\n",
        "freelander= df[land_rover & df['Series'].str.contains('freelander', na=False)].index\n",
        "df.loc[freelander, 'Model'] = 'freelander'\n",
        "df.loc[freelander, 'Series'] = df.loc[freelander, 'Series'].str.replace('^freelander\\s*', '', regex=True)\n",
        "\n",
        "discovery= df[land_rover & df['Series'].str.contains('discovery', na=False)].index\n",
        "df.loc[discovery, 'Model'] = 'discovery'\n",
        "df.loc[discovery, 'Series'] = df.loc[discovery, 'Series'].str.replace('^discovery\\s*', '', regex=True)\n",
        "\n",
        "range_rover= df[land_rover & df['Series'].str.contains('range rover', case=False, na=False)].index\n",
        "df.loc[range_rover, 'Model'] = 'range rover'\n",
        "df.loc[range_rover, 'Series'] = df.loc[range_rover, 'Series'].str.replace('^range rover\\s*', '', regex=True)"
      ],
      "metadata": {
        "id": "F_DNmx5_RaKI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fixing the error from the split on the Brand Mini Cooper.\n",
        "df.loc[df['Brand'].str.contains('mini', case=False, na=False), 'Brand'] = 'mini cooper'\n",
        "mini_cooper= df['Brand'] == 'mini cooper'\n",
        "\n",
        "convertible= df[mini_cooper & df['Series'].str.contains('convertible', na=False)].index\n",
        "df.loc[convertible, 'Model'] = 'convertible'\n",
        "df.loc[convertible, 'Series'] = df.loc[convertible, 'Series'].str.replace('^convertible\\s*', '', regex=True)\n",
        "\n",
        "door5 = df[mini_cooper & df['Series'].str.contains('5 door', na=False)].index\n",
        "df.loc[door5, 'Model'] = '5 door'\n",
        "df.loc[door5, 'Series'] = df.loc[door5, 'Series'].str.replace('^5 door\\s*', '', regex=True)\n",
        "\n",
        "door3 = df[mini_cooper & df['Series'].str.contains('3 door', na=False)].index\n",
        "df.loc[door3, 'Model'] = '3 door'\n",
        "df.loc[door3, 'Series'] = df.loc[door3, 'Series'].str.replace('^3 door\\s*', '', regex=True)\n",
        "\n",
        "countryman= df[mini_cooper & df['Series'].str.contains('countryman', na=False)].index\n",
        "df.loc[countryman, 'Model'] = 'countryman'\n",
        "df.loc[countryman, 'Series'] = df.loc[countryman, 'Series'].str.replace('^countryman\\s*', '', regex=True)\n",
        "\n",
        "carbon= df[mini_cooper & df['Series'].str.contains('carbon edition', na=False)].index\n",
        "df.loc[carbon, 'Model'] = 'carbon edition'\n",
        "df.loc[carbon, 'Series'] = df.loc[carbon, 'Series'].str.replace('^carbon edition\\s*', '', regex=True)\n",
        "\n",
        "df.loc[mini_cooper, 'Series'] = df.loc[mini_cooper, 'Series'].str.replace('^cooper\\s*', '', regex=True)"
      ],
      "metadata": {
        "id": "M82Rkj0LO1fn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Locating the incorrect split on the Brand Opel.\n",
        "df.loc[df['Brand'].str.contains('opelcorsa', na=False)]\n"
      ],
      "metadata": {
        "id": "I665lsAKMf_K",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        },
        "outputId": "e3ccfef2-1af9-430c-cdd1-5389c90256b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Location  Kilometers_Driven Fuel_Type Transmission Owner_Type  Mileage  \\\n",
              "7067  Hyderabad              50000    Petrol       Manual     Second     14.2   \n",
              "\n",
              "      Engine  Power  Seats  New_price  Price  Age      Brand   Model Series  \n",
              "7067  1389.0   88.0    5.0        NaN    NaN   15  opelcorsa  1.4gsi   None  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-401fb6c1-fb1f-4961-97b1-f02dbb402788\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7067</th>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>50000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Second</td>\n",
              "      <td>14.2</td>\n",
              "      <td>1389.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>15</td>\n",
              "      <td>opelcorsa</td>\n",
              "      <td>1.4gsi</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-401fb6c1-fb1f-4961-97b1-f02dbb402788')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-401fb6c1-fb1f-4961-97b1-f02dbb402788 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-401fb6c1-fb1f-4961-97b1-f02dbb402788');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Fixing the error\n",
        "Series_null = 7067\n",
        "df.at[Series_null, 'Brand'] = 'opel'\n",
        "df.at[Series_null, 'Model'] = 'corsa'\n",
        "df.at[Series_null, 'Series'] = '1.4 gsi'"
      ],
      "metadata": {
        "id": "bnPA05ncS8IH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* It was noticed in the list of Brands above that Land Rover, Mini Cooper, and Opel didn't split correctly because it's two words, and so on if the Model had two words as well. They have been corrected."
      ],
      "metadata": {
        "id": "MxjgUfOH6JcB"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B54IaafQj6w0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "outputId": "4db0ad4c-17fc-4ed2-f4da-aac6e62fb727"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    count unique     top  freq       mean        std    min  \\\n",
              "Location             7253     11  Mumbai   949        NaN        NaN    NaN   \n",
              "Kilometers_Driven  7253.0    NaN     NaN   NaN  58699.063  84427.721  171.0   \n",
              "Fuel_Type            7253      5  Diesel  3852        NaN        NaN    NaN   \n",
              "Transmission         7253      2  Manual  5204        NaN        NaN    NaN   \n",
              "Owner_Type           7253      4   First  5952        NaN        NaN    NaN   \n",
              "Mileage            7251.0    NaN     NaN   NaN     18.142      4.562    0.0   \n",
              "Engine             7207.0    NaN     NaN   NaN   1616.573    595.285   72.0   \n",
              "Power              7078.0    NaN     NaN   NaN    112.765     53.494   34.2   \n",
              "Seats              7200.0    NaN     NaN   NaN       5.28      0.809    2.0   \n",
              "New_price          1006.0    NaN     NaN   NaN      22.78     27.759   3.91   \n",
              "Price              6019.0    NaN     NaN   NaN      9.479     11.188   0.44   \n",
              "Age                7253.0    NaN     NaN   NaN      6.635      3.254    1.0   \n",
              "Brand                7253     32  maruti  1444        NaN        NaN    NaN   \n",
              "Model                7253    224   swift   418        NaN        NaN    NaN   \n",
              "Series               7253   1854     vdi   125        NaN        NaN    NaN   \n",
              "\n",
              "                       25%      50%      75%        max  \n",
              "Location               NaN      NaN      NaN        NaN  \n",
              "Kilometers_Driven  34000.0  53416.0  73000.0  6500000.0  \n",
              "Fuel_Type              NaN      NaN      NaN        NaN  \n",
              "Transmission           NaN      NaN      NaN        NaN  \n",
              "Owner_Type             NaN      NaN      NaN        NaN  \n",
              "Mileage              15.17    18.16     21.1      33.54  \n",
              "Engine              1198.0   1493.0   1968.0     5998.0  \n",
              "Power                 75.0     94.0    138.1      616.0  \n",
              "Seats                  5.0      5.0      5.0       10.0  \n",
              "New_price            7.885    11.57   26.042      375.0  \n",
              "Price                  3.5     5.64     9.95      160.0  \n",
              "Age                    4.0      6.0      9.0       24.0  \n",
              "Brand                  NaN      NaN      NaN        NaN  \n",
              "Model                  NaN      NaN      NaN        NaN  \n",
              "Series                 NaN      NaN      NaN        NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0453c0f3-bf2b-4bb8-b369-1d0d372cec9d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>unique</th>\n",
              "      <th>top</th>\n",
              "      <th>freq</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Location</th>\n",
              "      <td>7253</td>\n",
              "      <td>11</td>\n",
              "      <td>Mumbai</td>\n",
              "      <td>949</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <td>7253.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>58699.063</td>\n",
              "      <td>84427.721</td>\n",
              "      <td>171.0</td>\n",
              "      <td>34000.0</td>\n",
              "      <td>53416.0</td>\n",
              "      <td>73000.0</td>\n",
              "      <td>6500000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fuel_Type</th>\n",
              "      <td>7253</td>\n",
              "      <td>5</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>3852</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Transmission</th>\n",
              "      <td>7253</td>\n",
              "      <td>2</td>\n",
              "      <td>Manual</td>\n",
              "      <td>5204</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Owner_Type</th>\n",
              "      <td>7253</td>\n",
              "      <td>4</td>\n",
              "      <td>First</td>\n",
              "      <td>5952</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mileage</th>\n",
              "      <td>7251.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>18.142</td>\n",
              "      <td>4.562</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15.17</td>\n",
              "      <td>18.16</td>\n",
              "      <td>21.1</td>\n",
              "      <td>33.54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Engine</th>\n",
              "      <td>7207.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1616.573</td>\n",
              "      <td>595.285</td>\n",
              "      <td>72.0</td>\n",
              "      <td>1198.0</td>\n",
              "      <td>1493.0</td>\n",
              "      <td>1968.0</td>\n",
              "      <td>5998.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Power</th>\n",
              "      <td>7078.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>112.765</td>\n",
              "      <td>53.494</td>\n",
              "      <td>34.2</td>\n",
              "      <td>75.0</td>\n",
              "      <td>94.0</td>\n",
              "      <td>138.1</td>\n",
              "      <td>616.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Seats</th>\n",
              "      <td>7200.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.28</td>\n",
              "      <td>0.809</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>New_price</th>\n",
              "      <td>1006.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>22.78</td>\n",
              "      <td>27.759</td>\n",
              "      <td>3.91</td>\n",
              "      <td>7.885</td>\n",
              "      <td>11.57</td>\n",
              "      <td>26.042</td>\n",
              "      <td>375.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>6019.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>9.479</td>\n",
              "      <td>11.188</td>\n",
              "      <td>0.44</td>\n",
              "      <td>3.5</td>\n",
              "      <td>5.64</td>\n",
              "      <td>9.95</td>\n",
              "      <td>160.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>7253.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.635</td>\n",
              "      <td>3.254</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>24.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand</th>\n",
              "      <td>7253</td>\n",
              "      <td>32</td>\n",
              "      <td>maruti</td>\n",
              "      <td>1444</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Model</th>\n",
              "      <td>7253</td>\n",
              "      <td>224</td>\n",
              "      <td>swift</td>\n",
              "      <td>418</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Series</th>\n",
              "      <td>7253</td>\n",
              "      <td>1854</td>\n",
              "      <td>vdi</td>\n",
              "      <td>125</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0453c0f3-bf2b-4bb8-b369-1d0d372cec9d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0453c0f3-bf2b-4bb8-b369-1d0d372cec9d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0453c0f3-bf2b-4bb8-b369-1d0d372cec9d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-91be9993-3a26-4120-a388-a66f02aadce3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-91be9993-3a26-4120-a388-a66f02aadce3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-91be9993-3a26-4120-a388-a66f02aadce3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1006.0,\n        \"max\": \"7253\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"7253\",\n          7251.0,\n          1006.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unique\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 2,\n        \"max\": 1854,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          11,\n          5,\n          224\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"top\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Mumbai\",\n          \"Diesel\",\n          \"swift\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"freq\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"125\",\n        \"max\": \"5952\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"949\",\n          \"3852\",\n          \"418\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 5.28,\n        \"max\": 58699.063,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          18.142,\n          22.78,\n          58699.063\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.809,\n        \"max\": 84427.721,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.562,\n          27.759,\n          84427.721\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.0,\n        \"max\": 171.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          3.91,\n          171.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 3.5,\n        \"max\": 34000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.17,\n          7.885,\n          34000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 5.0,\n        \"max\": 53416.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          18.16,\n          11.57,\n          53416.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 5.0,\n        \"max\": 73000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          21.1,\n          26.042,\n          73000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 10.0,\n        \"max\": 6500000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          33.54,\n          375.0,\n          6500000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "# Checking statistical summary of the data\n",
        "df.describe(include = 'all').round(3).T\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:** **(QUESTION 1a)**\n",
        "\n",
        "* Summary of the data indicates we might have some outliers or values that were input incorrectly.  Kilometers_Driven, New_Price, and Price will need to be looked at for high values, as well as Mileage for a low value of 0.0.\n",
        "* The top frequncy values for the data are First owned, Manual, Disel, 5 seat vehicles. And Mumbai has the majority of the sales.\n",
        "* The Age has a range of 1 to 24 which seems reasonable.  \n",
        "* Price, the dependent variable, has a range of 0.44 to 160 per 100,000 Rupee, with 50% of the values falling in a much smaller range of 3.5 to 9.95.\n",
        "* Engine and Power indicate a wide range of vehicle styles, efficent to luxury."
      ],
      "metadata": {
        "id": "AikTnqP123Lw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Addressing Kilometers_Driven possible incorrect input.\n",
        "df[df['Kilometers_Driven'] > 1000000]"
      ],
      "metadata": {
        "id": "z9P_BmS45xLC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        },
        "outputId": "786dab3c-c218-4930-f703-708c09aa57e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Location  Kilometers_Driven Fuel_Type Transmission Owner_Type  Mileage  \\\n",
              "2328  Chennai            6500000    Diesel    Automatic      First    15.97   \n",
              "\n",
              "      Engine  Power  Seats  New_price  Price  Age Brand Model  \\\n",
              "2328  2993.0  258.0    5.0        NaN   65.0    3   bmw    x5   \n",
              "\n",
              "                  Series  \n",
              "2328  xdrive 30d m sport  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1988d055-da0a-424f-b3cb-1db8fefbceca\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2328</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>6500000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>15.97</td>\n",
              "      <td>2993.0</td>\n",
              "      <td>258.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>65.0</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x5</td>\n",
              "      <td>xdrive 30d m sport</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1988d055-da0a-424f-b3cb-1db8fefbceca')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1988d055-da0a-424f-b3cb-1db8fefbceca button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1988d055-da0a-424f-b3cb-1db8fefbceca');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['Kilometers_Driven'] > 1000000]\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Chennai\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 6500000,\n        \"max\": 6500000,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6500000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Automatic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"First\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 15.97,\n        \"max\": 15.97,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          15.97\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2993.0,\n        \"max\": 2993.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2993.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 258.0,\n        \"max\": 258.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          258.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 65.0,\n        \"max\": 65.0,\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Series\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the number of BMW's Age 3\n",
        "df[(df['Brand'] == 'bmw') & (df['Age'] == 3)]"
      ],
      "metadata": {
        "id": "ya_eBk2R8QyS",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 778
        },
        "outputId": "497a70d6-0eb0-4e3d-ecc8-64ae0b6903ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Location  Kilometers_Driven Fuel_Type Transmission Owner_Type  \\\n",
              "271   Coimbatore              51982    Diesel    Automatic      First   \n",
              "549   Coimbatore              31645    Diesel    Automatic      First   \n",
              "1631       Kochi              32838    Diesel    Automatic      First   \n",
              "1863      Jaipur              19543    Diesel    Automatic      First   \n",
              "1924  Coimbatore              27313    Diesel    Automatic      First   \n",
              "1984   Bangalore              17465    Petrol    Automatic      First   \n",
              "2328     Chennai            6500000    Diesel    Automatic      First   \n",
              "2470       Kochi              23806    Diesel    Automatic      First   \n",
              "2833       Kochi              36935    Diesel    Automatic      First   \n",
              "2963       Kochi              55389    Diesel    Automatic      First   \n",
              "4327     Kolkata              27001    Diesel    Automatic      First   \n",
              "4558      Mumbai               8000    Diesel    Automatic      First   \n",
              "4614     Chennai              15000    Diesel    Automatic      First   \n",
              "4856       Kochi              41816    Diesel    Automatic      First   \n",
              "5002       Kochi              36723    Diesel    Automatic      First   \n",
              "5304   Bangalore              21000    Diesel    Automatic      First   \n",
              "5568  Coimbatore              34232    Diesel    Automatic      First   \n",
              "5601       Delhi              23000    Diesel    Automatic      First   \n",
              "5618       Delhi              16485    Diesel    Automatic      First   \n",
              "5740     Chennai              21000    Diesel    Automatic     Second   \n",
              "6212     Chennai              16000    Diesel    Automatic      First   \n",
              "6378  Coimbatore              17273    Diesel    Automatic      First   \n",
              "6718  Coimbatore              41078    Diesel    Automatic      First   \n",
              "7176  Coimbatore              22574    Diesel    Automatic      First   \n",
              "\n",
              "      Mileage  Engine   Power  Seats  New_price  Price  Age Brand Model  \\\n",
              "271     16.55  2993.0  258.00    5.0        NaN  45.77    3   bmw    x3   \n",
              "549     20.68  1995.0  190.00    5.0      48.18  29.40    3   bmw    x1   \n",
              "1631    17.05  1995.0  190.00    5.0      50.97  30.29    3   bmw    x1   \n",
              "1863    18.12  1995.0  190.00    5.0        NaN  40.50    3   bmw     5   \n",
              "1924    14.69  2993.0  258.00    5.0        NaN  48.63    3   bmw     5   \n",
              "1984    12.05  2979.0  320.00    5.0        NaN  93.00    3   bmw     7   \n",
              "2328    15.97  2993.0  258.00    5.0        NaN  65.00    3   bmw    x5   \n",
              "2470    22.69  1995.0  190.00    5.0        NaN  33.66    3   bmw     3   \n",
              "2833    18.56  1995.0  190.00    5.0        NaN  32.64    3   bmw    x3   \n",
              "2963    18.88  1995.0  184.00    5.0        NaN  28.45    3   bmw     3   \n",
              "4327    20.68  1995.0  190.00    5.0      50.26  29.00    3   bmw    x1   \n",
              "4558    19.59  1995.0  187.74    5.0        NaN  33.75    3   bmw     3   \n",
              "4614    15.97  2993.0  258.00    5.0        NaN  70.00    3   bmw    x5   \n",
              "4856    18.56  1995.0  190.00    5.0        NaN  32.78    3   bmw    x3   \n",
              "5002    18.56  1995.0  190.00    5.0      64.76  32.57    3   bmw    x3   \n",
              "5304    21.76  1995.0  190.00    5.0      62.07  35.00    3   bmw     3   \n",
              "5568    21.76  1995.0  190.00    5.0      55.07  35.84    3   bmw     3   \n",
              "5601    20.68  1995.0  190.00    5.0        NaN  28.75    3   bmw    x1   \n",
              "5618    22.48  1995.0  187.74    5.0        NaN  42.75    3   bmw     5   \n",
              "5740    15.97  2993.0  258.00    5.0        NaN  55.00    3   bmw    x5   \n",
              "6212    16.77  2993.0  261.49    5.0     158.00    NaN    3   bmw     7   \n",
              "6378    20.68  1995.0  190.00    5.0        NaN    NaN    3   bmw    x1   \n",
              "6718    22.69  1995.0  190.00    5.0        NaN    NaN    3   bmw     3   \n",
              "7176    21.76  1995.0  190.00    5.0      62.07    NaN    3   bmw     3   \n",
              "\n",
              "                                 Series  \n",
              "271                   xdrive30d m sport  \n",
              "549                    sdrive 20d xline  \n",
              "1631                 m sport sdrive 20d  \n",
              "1863  series 2013-2017 520d luxury line  \n",
              "1924      series 2013-2017 530d m sport  \n",
              "1984                       series 740li  \n",
              "2328                 xdrive 30d m sport  \n",
              "2470                series 320d m sport  \n",
              "2833                    xdrive20d xline  \n",
              "2963            series 320d luxury line  \n",
              "4327                 xdrive 20d m sport  \n",
              "4558         series 320d gt luxury line  \n",
              "4614                               x5 m  \n",
              "4856                    xdrive20d xline  \n",
              "5002                   xdrive 20d xline  \n",
              "5304                 series luxury line  \n",
              "5568                 series luxury line  \n",
              "5601                   xdrive 20d xline  \n",
              "5618             series 520d sport line  \n",
              "5740                 xdrive 30d m sport  \n",
              "6212         series 730ld dpe signature  \n",
              "6378                   xdrive 20d xline  \n",
              "6718                  series 320d sport  \n",
              "7176                 series luxury line  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a51718a6-7264-4ee5-8e31-7e500daa263b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>271</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>51982</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>16.55</td>\n",
              "      <td>2993.0</td>\n",
              "      <td>258.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>45.77</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x3</td>\n",
              "      <td>xdrive30d m sport</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>549</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>31645</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>20.68</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>48.18</td>\n",
              "      <td>29.40</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x1</td>\n",
              "      <td>sdrive 20d xline</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1631</th>\n",
              "      <td>Kochi</td>\n",
              "      <td>32838</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>17.05</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>50.97</td>\n",
              "      <td>30.29</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x1</td>\n",
              "      <td>m sport sdrive 20d</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1863</th>\n",
              "      <td>Jaipur</td>\n",
              "      <td>19543</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>18.12</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>40.50</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>5</td>\n",
              "      <td>series 2013-2017 520d luxury line</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1924</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>27313</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>14.69</td>\n",
              "      <td>2993.0</td>\n",
              "      <td>258.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>48.63</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>5</td>\n",
              "      <td>series 2013-2017 530d m sport</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1984</th>\n",
              "      <td>Bangalore</td>\n",
              "      <td>17465</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>12.05</td>\n",
              "      <td>2979.0</td>\n",
              "      <td>320.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>93.00</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>7</td>\n",
              "      <td>series 740li</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2328</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>6500000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>15.97</td>\n",
              "      <td>2993.0</td>\n",
              "      <td>258.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>65.00</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x5</td>\n",
              "      <td>xdrive 30d m sport</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2470</th>\n",
              "      <td>Kochi</td>\n",
              "      <td>23806</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>22.69</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33.66</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>3</td>\n",
              "      <td>series 320d m sport</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2833</th>\n",
              "      <td>Kochi</td>\n",
              "      <td>36935</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>18.56</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>32.64</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x3</td>\n",
              "      <td>xdrive20d xline</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2963</th>\n",
              "      <td>Kochi</td>\n",
              "      <td>55389</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>18.88</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>184.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>28.45</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>3</td>\n",
              "      <td>series 320d luxury line</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4327</th>\n",
              "      <td>Kolkata</td>\n",
              "      <td>27001</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>20.68</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>50.26</td>\n",
              "      <td>29.00</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x1</td>\n",
              "      <td>xdrive 20d m sport</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4558</th>\n",
              "      <td>Mumbai</td>\n",
              "      <td>8000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>19.59</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>187.74</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>33.75</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>3</td>\n",
              "      <td>series 320d gt luxury line</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4614</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>15000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>15.97</td>\n",
              "      <td>2993.0</td>\n",
              "      <td>258.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>70.00</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x5</td>\n",
              "      <td>x5 m</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4856</th>\n",
              "      <td>Kochi</td>\n",
              "      <td>41816</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>18.56</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>32.78</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x3</td>\n",
              "      <td>xdrive20d xline</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5002</th>\n",
              "      <td>Kochi</td>\n",
              "      <td>36723</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>18.56</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>64.76</td>\n",
              "      <td>32.57</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x3</td>\n",
              "      <td>xdrive 20d xline</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5304</th>\n",
              "      <td>Bangalore</td>\n",
              "      <td>21000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>21.76</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>62.07</td>\n",
              "      <td>35.00</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>3</td>\n",
              "      <td>series luxury line</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5568</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>34232</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>21.76</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>55.07</td>\n",
              "      <td>35.84</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>3</td>\n",
              "      <td>series luxury line</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5601</th>\n",
              "      <td>Delhi</td>\n",
              "      <td>23000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>20.68</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>28.75</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x1</td>\n",
              "      <td>xdrive 20d xline</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5618</th>\n",
              "      <td>Delhi</td>\n",
              "      <td>16485</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>22.48</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>187.74</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>42.75</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>5</td>\n",
              "      <td>series 520d sport line</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5740</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>21000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>15.97</td>\n",
              "      <td>2993.0</td>\n",
              "      <td>258.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>55.00</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x5</td>\n",
              "      <td>xdrive 30d m sport</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6212</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>16000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>16.77</td>\n",
              "      <td>2993.0</td>\n",
              "      <td>261.49</td>\n",
              "      <td>5.0</td>\n",
              "      <td>158.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>7</td>\n",
              "      <td>series 730ld dpe signature</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6378</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>17273</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>20.68</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>x1</td>\n",
              "      <td>xdrive 20d xline</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6718</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>41078</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>22.69</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>3</td>\n",
              "      <td>series 320d sport</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7176</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>22574</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>21.76</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>190.00</td>\n",
              "      <td>5.0</td>\n",
              "      <td>62.07</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>bmw</td>\n",
              "      <td>3</td>\n",
              "      <td>series luxury line</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a51718a6-7264-4ee5-8e31-7e500daa263b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a51718a6-7264-4ee5-8e31-7e500daa263b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a51718a6-7264-4ee5-8e31-7e500daa263b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-81a572ad-536b-4071-8a0d-feb5332db442\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81a572ad-536b-4071-8a0d-feb5332db442')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-81a572ad-536b-4071-8a0d-feb5332db442 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[(df['Brand'] == 'bmw') & (df['Age'] == 3)]\",\n  \"rows\": 24,\n  \"fields\": [\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Kochi\",\n          \"Kolkata\",\n          \"Coimbatore\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1321197,\n        \"min\": 8000,\n        \"max\": 6500000,\n        \"num_unique_values\": 23,\n        \"samples\": [\n          21000,\n          55389,\n          51982\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Automatic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Second\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.82891485186996,\n        \"min\": 12.05,\n        \"max\": 22.69,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          18.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 462.4562964075162,\n        \"min\": 1995.0,\n        \"max\": 2993.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2993.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38.12450299747326,\n        \"min\": 184.0,\n        \"max\": 320.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          258.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 5.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.5254610804964,\n        \"min\": 48.18,\n        \"max\": 158.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          48.18\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.942241789152497,\n        \"min\": 28.45,\n        \"max\": 93.0,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          45.77\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 3,\n        \"max\": 3,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"bmw\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"x3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Series\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"xdrive30d m sport\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Changing the incorrectly recorded Kilometers_Driven to the median value\n",
        "bmw_age_3= df[(df['Brand'] == 'bmw') & (df['Age'] == 3) & (df.index != 2328)]\n",
        "median_val = bmw_age_3['Kilometers_Driven'].median()\n",
        "df.at[2328, 'Kilometers_Driven'] = median_val"
      ],
      "metadata": {
        "id": "OKc_pLNy-Ucq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:** **(QUESTION 3a)**\n",
        "\n",
        "* The Max value of Kilometers_Driven was 6,500,000 which was incorrectly recorded for a 3 year old vehicle.  With the large number of 3 year old BMW's, replacing the value with the median is appropriate.  This is not exluding the possibility of further outliers in this column which will be looked at later."
      ],
      "metadata": {
        "id": "C1d6ZNux_ZQ_"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Rwx-1ZuhU3D"
      },
      "source": [
        "## **Univariate Analysis (QUESTION 1b)**\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XYmSIliuIrcy"
      },
      "source": [
        "**Questions:**\n",
        "\n",
        "* 1b. Do univariate analysis for numerical and categorical variables? **(below)**\n",
        "* 2b. Check the distribution of the different variables? is the distributions skewed? **(below)**\n",
        "* 3b. Do we need to do log_transformation, if so for what variables we need to do? **(below)**\n",
        "* 4b. Perfoem the log_transformation(if needed) and write down your observations? **(below)**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KkKnOKT9j6w1"
      },
      "outputs": [],
      "source": [
        "# Defining barplot function\n",
        "def labeled_barplot(data, feature, perc = False, n = None):\n",
        "    total = len(data[feature])\n",
        "    count = data[feature].nunique()\n",
        "    if n is None:\n",
        "        plt.figure(figsize = (count + 1, 5))\n",
        "    else:\n",
        "        plt.figure(figsize = (n + 1, 5))\n",
        "\n",
        "    plt.xticks(rotation = 45, fontsize = 10)\n",
        "    ax = sns.countplot(\n",
        "        data = data,\n",
        "        x = feature,\n",
        "        palette = \"Paired\",\n",
        "        order = data[feature].value_counts().index[:n].sort_values(),)\n",
        "\n",
        "    for p in ax.patches:\n",
        "        if perc == True:\n",
        "            label = \"{:.1f}%\".format(\n",
        "                100 * p.get_height() / total)\n",
        "        else:\n",
        "            label = p.get_height()\n",
        "\n",
        "        x = p.get_x() + p.get_width() / 2\n",
        "        y = p.get_height()\n",
        "        ax.annotate(\n",
        "            label,\n",
        "            (x, y),\n",
        "            ha = \"center\",\n",
        "            va = \"center\",\n",
        "            size = 12,\n",
        "            xytext = (0, 5),\n",
        "            textcoords = \"offset points\",)\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "labeled_barplot(df, 'Fuel_Type', perc = True)"
      ],
      "metadata": {
        "id": "UsNXk0KVLDR_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 497
        },
        "outputId": "79e9990f-0890-41f4-9fbb-bbab030b2c0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Combining Green types of alternative fuel\n",
        "df['Fuel_Type'] = df['Fuel_Type'].replace(['CNG', 'Electric', 'LPG'], 'Green')"
      ],
      "metadata": {
        "id": "vkwDPKrCvPc1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "labeled_barplot(df, 'Fuel_Type', perc = True)"
      ],
      "metadata": {
        "id": "w_DVIcTSvdHC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "outputId": "0ce5436d-3e60-451a-c6b0-0c3dc4668a52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* With such low representation combining CNG, LPG, and Electric will help the model."
      ],
      "metadata": {
        "id": "db1Myr5IvnYA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "labeled_barplot(df, 'Transmission', perc = True)"
      ],
      "metadata": {
        "id": "-hkdHrkXLDMx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "outputId": "4ea1faad-7e25-44bf-ce3f-41217e24b2bc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Manual is dominant Transmission type for vehicles."
      ],
      "metadata": {
        "id": "EgsAGpUEweKQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "labeled_barplot(df, 'Seats', perc = True)"
      ],
      "metadata": {
        "id": "tG45_NuyLDBV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 481
        },
        "outputId": "e6177f32-cf0d-45ed-bb0b-80b408da9afb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Changing the seats to three categories\n",
        "df['Seats'] = df['Seats'].replace([2.0, 4.0], '2-4')\n",
        "df['Seats'] = df['Seats'].replace([6.0, 7.0, 8.0, 9.0, 10.0], '6-10')\n",
        "df['Seats'] = df['Seats'].replace([5.0], '5')"
      ],
      "metadata": {
        "id": "Tnoe8BCpceJD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "labeled_barplot(df, 'Seats', perc = True)"
      ],
      "metadata": {
        "id": "IyjK3RwzRlXy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "outputId": "41dc45a3-7fc8-436e-b2bc-c50557f32b9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Changing the categorical variable to object\n",
        "df['Seats'] = df['Seats'].astype('object')"
      ],
      "metadata": {
        "id": "UPD0PtH1deHF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The vast majority of vehicles have 5 seats with 83.4% Pooling the seats to less than five and more than five provides a better representaiton of the data"
      ],
      "metadata": {
        "id": "2V3PbX_Mwtla"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "labeled_barplot(df, 'Owner_Type', perc = True)"
      ],
      "metadata": {
        "id": "VAQcawt7LDEs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 536
        },
        "outputId": "e6bf4b4d-4224-41cd-918c-569f00d8078f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* At 82.1% used vehicles are First owners"
      ],
      "metadata": {
        "id": "M8qqPEKJw6Yv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "labeled_barplot(df, 'Location', perc = True)"
      ],
      "metadata": {
        "id": "GCM9WMW7LI-C",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 520
        },
        "outputId": "2ae6fa4a-c8d3-42a3-f806-f35b1fe18abf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Ranging from 3.8% to 13.1% in Mumbai, there is a good distribution of sales throught these cities.\n",
        "  * Mumbai, Hyderabad are the top and Coimbatore, Kochi, and Pune are third."
      ],
      "metadata": {
        "id": "mbLXtTDTxLNn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "labeled_barplot(df, 'Brand', perc = True)"
      ],
      "metadata": {
        "id": "jj5eTXSALIz_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "outputId": "b01ecbed-2f8c-4e2d-8e59-e15dcc72377e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 3300x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* This shows the sigificance Maruti 19.9% and Hyundai 18.5% used car sales, these are the dominant Brands of vehicle, with Honda third at 10.2%"
      ],
      "metadata": {
        "id": "rvb91wYexZ1l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Overview of the data in histograms\n",
        "num_cols = ['Age', 'Kilometers_Driven', 'Mileage','Engine', 'Power', 'New_price', 'Price']\n",
        "df[num_cols].hist(figsize = (10, 10))\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "dY8aNqQDO0Lc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 852
        },
        "outputId": "9acc99c7-b577-483d-f420-f6f03c00eee5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* There are some heavily right skewed variables in this dataframe; Kilometers_Driven, Engine, Power, New_Price, and Price.  Age is also right skewed but not as drastically as the others.\n",
        "  * The dependent variable Price will need a log transfer and possibly others, we will address the others after looking at outliers.\n",
        "  * New_Price will need to be dropped."
      ],
      "metadata": {
        "id": "0_ZDskgH2fM-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **(QUESTION 2b)**"
      ],
      "metadata": {
        "id": "OuXMAoE7R2iZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining boxplot histogram funciton\n",
        "def histogram_boxplot(data, feature, figsize = (8, 4), kde = False, bins = None):\n",
        "    f2, (ax_box2, ax_hist2) = plt.subplots(\n",
        "        nrows = 2,\n",
        "        sharex = True,\n",
        "        gridspec_kw = {\"height_ratios\": (0.25, 0.75)},\n",
        "        figsize = figsize,)\n",
        "\n",
        "    sns.boxplot(\n",
        "        data = data, x = feature, ax = ax_box2, showmeans = True, color = \"violet\"\n",
        "    )\n",
        "    sns.histplot(\n",
        "        data = data, x = feature, kde = True, ax = ax_hist2, bins = bins, palette = \"winter\"\n",
        "    ) if bins else sns.histplot(\n",
        "        data = data, x = feature, kde = True, ax = ax_hist2\n",
        "    )\n",
        "    ax_hist2.axvline(data[feature].mean(), color = \"green\", linestyle = \"--\")\n",
        "    ax_hist2.axvline(data[feature].median(), color = \"black\", linestyle = \"-\")"
      ],
      "metadata": {
        "id": "rOqoVCFRQFYE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "histogram_boxplot(df, 'Age', kde = True)"
      ],
      "metadata": {
        "id": "8NmouYhaQIda",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "35dfc85d-a722-4dc8-fb96-fcaac91a5147"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Age is right skewed, but doesn't feel overly impacted by outliers, and depending on the owners could easily be accurate vehicle ages."
      ],
      "metadata": {
        "id": "1WzxNSPGGbGx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "histogram_boxplot(df, 'Kilometers_Driven', kde = True)"
      ],
      "metadata": {
        "id": "Rgb3T5I8QM12",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "ddfb3573-248d-4c49-a75a-51786015a7ff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Kilometers_Driven even after removing the obvious incorrect value of 6,500,000, it still apears to have some highly suspicious values.  Values about 400,000 should be confirmed by age.\n",
        "* There is an obvious right skew."
      ],
      "metadata": {
        "id": "RzsS5Dl6HO-J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "histogram_boxplot(df, 'Mileage', kde = True)"
      ],
      "metadata": {
        "id": "kjk7RpFkQMsf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "1dda3972-ffab-4e70-9082-04501238d176"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Mileage is the most normally distributed of the numerical values.\n",
        "* No extensive outliers, but the zero values will need to be imputed as no mileage is ever reported as zero."
      ],
      "metadata": {
        "id": "6D1IL8m-IOSr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "histogram_boxplot(df, 'Engine', kde = True)"
      ],
      "metadata": {
        "id": "0zPUcjT6QMjL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "c5942089-510b-47be-8554-9afebe8b2cdf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* There is a clear standard engine size.  \n",
        "* Right skewed, but with further inspection the Engine sizes that are greater than 5000 are all high powered vehicles.  The inputs are accurate."
      ],
      "metadata": {
        "id": "RUg5vl6SIcQQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "histogram_boxplot(df, 'Power', kde = True)"
      ],
      "metadata": {
        "id": "VEYG4fXqQMag",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "a24ebd54-4cf2-47aa-d29f-355a8875b24f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArcAAAFzCAYAAAAkDCFIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABZ7klEQVR4nO3dd3hUZf428PtMTZ00kklCCQFCDb0ZkR7pKi6r4osuKiu7CqjYUVF0V7CtBUVRV8Fd2y7+VkQEpINKQJqUAKGTSCppkzr1ef8Ic8iQBJIwkzOZ3J/rmouZU7/nnIHcPHnOcyQhhAARERERkQ9QKV0AEREREZG7MNwSERERkc9guCUiIiIin8FwS0REREQ+g+GWiIiIiHwGwy0RERER+QyGWyIiIiLyGQy3REREROQzNEoX4A0cDgcyMzMRHBwMSZKULoeIiIiILiOEQElJCWJjY6FS1d0+y3ALIDMzE23btlW6DCIiIiK6ioyMDLRp06bO+Qy3AIKDgwFUnSyDwaBwNURERER0OZPJhLZt28q5rS4Mt4DcFcFgMDDcEhEREXmxq3Uh5Q1lREREROQzGG6JiIiIyGcw3BIRERGRz2CfW6qhoKAAZWVlSpfRpAIDAxEeHq50GURERHSNGG7JRUFBARYuXAir1ap0KU1Kq9XimWeeYcAlIiJq5hhuyUVZWRmsVismRE5AuO7agl6+JR9r89ZifOR4ROgi3FSh+xVYCrAmbw3KysoYbomIiJo5hluqVbguHEa90S3bitBFuG1bRERERFfCG8qIiIiIyGcw3BIRERGRz2C4JSIiIiKfwXBLRERERD6D4ZaIiIiIfAbDLRERERH5DIZbIiIiIvIZDLdERERE5DMYbomIiIjIZzDcEhEREZHPYLhVgMViQUZGBiwWi9KlEDUpfveJiMjTGG4VkJOTgzfeeAM5OTlKl0LUpPjdJyIiT2O4JSIiIiKfwXBLRERERD6D4ZaIiIiIfAbDLRERERH5DIZbIiIiIvIZDLdERERE5DMYbomIiIjIZzDcEhEREZHP0ChdABG1PAUFBXj33XdhNpuhVqvRr18/xMXFITU1FUePHq1zPZ1Oh7CwMPTv3x8mkwlCCMTFxeHkyZP49ddfa11Hq9VCrVZDrVZDCAGHw4GQkBA89NBDCAoKwunTp/HOO+/IywcEBGDevHkwGAw1tlVaWorFixejpKQEwcHB8jYaory8HB9++CGKioqg1+sxbNgwGI1GGI1GvPfeezCZTHA4HAgMDIROp8PAgQMxYMAAvP/++7Xu12azYfv27Th48CAAIDExESNGjIBGU/XPu8PhwKlTp2AymWAwGBAfH48zZ84gOzsbGzduRFlZGTQaDUaMGIFRo0bh3Llz8rIdO3aEStW4NhDnfgsKCnDw4EH5eG02G8xmM/z8/DBo0CBERUU1aD+XH0/Hjh0BoMY05/YsFgtWrlyJCxcuoFWrVpg8eTJ0Ol2d27rW43XHtqqz2Wz46aefkJ+fj4iICAwdOhQajeaKx6WUhpyD6ssGBQVBkiSUlJS49dx5msPhwIkTJ3Dy5EkAQEJCAjp16uRSu6e+F0rz9uOShBBC6SKUZjKZEBISguLi4lp/oLlbRkYG3njjDTz++ONo27atx/fXEM7a7mp9F4x64zVtK8ecg8/Pf37N29qv2Y8P/T/EXyr+gr62vtdUU22cdXrj9fA1zu9Xc+Dn54dXX31V/vzss8+itLS0xnJBQUF4+eWX67XNl156Cfn5+W6pLygoCIMGDcLmzZtrzJMkCSNHjkT79u2xcuVKFBQUyPNUKhUcDke99hEeHo7Jkyejd+/eDartwIEDNfbrjv3Utl1nyK9+bZzb+/XXX3H48OEa20lMTMSgQYNqbMudx9vYbVX33XffYevWrS7XS6VSISwsrNbvUWJiIu6///5G7+9aNOQcXO374Y5z52kHDhzAf//73xr/JgQFBeH2229H7969Pfa9UJqSx1XfvMZwC4bb6rwt3AoIzA2aixOaE0iwJeCt0rcgQbqmuuqq0xuvh6+ZO3duvYNVU9Pr9TCbzS7TnAG3erBt3749JkyYgDVr1uDs2bMA6hdwLw+28fHxEELI26iPPn36oKioqMY6er0eY8eOhSRJWLdunctxJCYm4sYbb8SFCxfw73//22U9SZIQGhqKwsJCl+nDhw9Hv379sGHDBqSmpuLee++t9w+tAwcOYNmyZQgKCkJJSQmAqwdqPz8/mM3mK+7Hud0ePXrgxhtvRExMDLZv347Vq1cDACZNmoRhw4YhKysLGzZskEOtWq3GyJEjcd1112Hnzp3YsmUL7Ha7y7mJiYmR12vs8Vavq7Hbqu67777D5s2bERwcjIkTJ6JHjx5ITU3FihUrYLfbIUkSRo8eXeO4lAi4DTkH1Zdt3749fvjhB8THxwMATp8+jUmTJuHs2bPXdO487cCBA/j0008BAB06dMD48eMBAGvXrsXp06cBAKNGjcKWLVvc/r1Qmqe+7/VV37zmPW3IRLXYp9mHE5oTAIATmhPYp9mncEXUWAUFBXLA8fPzQ2hoKLp16+b2/VzpV7PJycm1Tn/mmWfw2muv4Z133sFTTz0lT6+srERmZqYcbF9++WXMnTsXXbp0wdy5c+VAW1paWmurrlN5ebkcbENCQpCYmIiHHnqo1hAiSRJef/11PPPMMzXmHTx4EHPmzMGLL74oTwsICMDChQsxevRojBo1CgsXLkRgYKA8f/r06WjXrh1++OEHdOnSxWU/r732Gp577jlotVqXXylu374dbdq0wYwZM9CjRw9899139fpPicPhwMqVK9GtWzc52CYkJMjrajQal305W10rKyvRpUuXOvfj3G6PHj0wY8YMtG/fHlqtFjt27ECPHj3Qo0cPpKSkQKvVon379rj77rvldRcuXIibbroJkZGRuOmmm7Bw4UJ53t1334327dtDr9ejffv2jT7e6nU1dlvV2Ww2bN26FcHBwViwYAGSkpJgMBjQv39/OZgLITB+/Hj5uF555RWo1WocPnwYFoulQfu7Fg05B9WXvffee+XrN2fOHMyZMweJiYlISUnBvffe2+hz52kOhwPffvsttFqtXHvnzp3RuXNnzJkzBz169IBGo8HWrVvRvXt3t34vlOap77sntMg+t2az2aVlw2QyKVJHTk6OIvu9Em+qSUDg337/hkqo4JAcUAkV/u33b/Qr7ef21lvAu47dF7377rvy+8TEROzZswft2rVz+36u9IN948aN6NKlC9LS0lymf/LJJ3KYjI2NdZn32muvAahqsb28f21QUBDatWuH9PR0LF68uNZACgAffvghAMjL3nfffVCpVFi8eDEA15ZNIQTOnTuHFStWyOsHBASgvLwcDocDP/30k8u2NRqN3L/W+XngwIHYunUrAOCXX35BmzZtavwK2LkfALBarQCAqKgo5ObmQgiBn376CSNHjkRycjLefvttnDp1CgkJCbUen5Ozj22bNm3kac4wVv289+3bF/v370dpaSk6d+6M48ePw2KxID8/v9b9OLc7ffp0ORhXnyaEcKlx1apV8roZGRku28vIyJDfr1q1Crfffrv8WaVSNep4q9fV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TaPC7bJly655x6NHj8ahQ4dcpt17773o2rUrnnrqKbRt2xZarRabNm3ClClTAABpaWlIT09HUlISACApKQkvv/wycnNzERVV1Zdzw4YNMBgM6N69+zXX6Cu8YaSE6gLKs6FVSyiptCHHZEZ0SNO23BMREZHvuqbnme7duxdHjx4FAPTo0QN9+/at97rBwcFITEx0mRYYGIiIiAh5+owZM/Doo48iPDwcBoMBc+bMQVJSEq677joAwJgxY9C9e3fcfffdeO2115CdnY3nnnsOs2bNalEts1cjj3HrJeFWJezo0CoIaTklSMspuWK41ag0mN57uvyeiIiI6EoalRZyc3MxdepUbN26Ve4yUFRUhJEjR+Lrr79GZGSkW4p76623oFKpMGXKFJjNZowdOxbvv/++PF+tVmP16tV44IEHkJSUhMDAQEyfPh0vvfSSW/bvC6x2B87lK/8Ah8t1NlaF2xM5JRia0AqqOrom6DV6LJ+8vGmLIyIiomarUeF2zpw5KCkpQWpqKrp16wYAOHLkCKZPn46HHnoIX331VaOK2bp1q8tnPz8/LFmyBEuWLKlznbi4OKxZs6ZR+2sJMgrKYbUL+GvViDF4z6//4yICodeoUGaxI7OoAm3CApQuiYiIiHxAo4YCW7duHd5//3052AJA9+7dsWTJEqxdu9ZtxdG1c3ZJ6BAZCJXKe27cUqskdLrYkpyWXVLnckIIlFnKUGYp4+N3iYiI6KoaFW4dDge02prjpWq1WjgcHJjfm5x0DgPmRV0SnDobgwFU1Wh31B5cy63lCFoUhKBFQXz8LhEREV1Vo8LtqFGj8PDDDyMzM1Oedv78ecydOxejR492W3F07bxtpITq2oT5I0CnRqXNgfQCBlciIiK6do0Kt++99x5MJhPat2+Pjh07omPHjoiPj4fJZMK7777r7hrpGnhzuFVJEhKcXRNy6u6aQERERFRfjbqhrG3btti3bx82btyIY8eOAQC6deuG5ORktxZH10YIIT+dzFse4HC5LtHBOPB7MU7llqKDSqd0OURERNTMNajldvPmzejevTtMJhMkScKNN96IOXPmYM6cORg4cCB69OiBn376yVO1UgNdKLXAVGmDJAHtI7wz3EYb/BARpIPNIVBs6KB0OURERNTMNSjcvv3227j//vthMBhqzAsJCcFf/vIXvPnmm24rjq6Ns0tC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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Again there is a clear standard power range.\n",
        "* And again, right skewed, but with further inspection the Power values that are greater than 500 are all high powered vehicles, and the same vehicles as the Engine size.  The inputs are accurate."
      ],
      "metadata": {
        "id": "ek7-AAHTJ5r9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "histogram_boxplot(df, 'New_price', kde = True)"
      ],
      "metadata": {
        "id": "C-NOAHt7QMRZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "0aed2958-b151-4a06-ce6a-fca37d0a4dc4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* New_price will need to be dropped to the 86.1% missing values.  \n",
        "* There is a right skew, and the one large values at 375 is the Bentley that tops the Engine and Power ranges as well.  "
      ],
      "metadata": {
        "id": "lKGiY3KuLAoq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "histogram_boxplot(df, 'Price', kde = True)"
      ],
      "metadata": {
        "id": "jCPNx5BqQMIj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "3dd7d209-7721-429b-a67a-8eb2c30d1450"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Performing a log transformation to address the right skew of the dependent variable\n",
        "df['log_Price'] = np.log(df['Price'])"
      ],
      "metadata": {
        "id": "FuXm51Q8L7lQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "histogram_boxplot(df, 'log_Price', kde = True)"
      ],
      "metadata": {
        "id": "0ObLXKJzMZyB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "a8e40255-dfea-48fe-d439-f8991be8d8ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "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H3+ce++9l759+7J169ZAiAV4+OGH+f3vf8+YMWOYMWMGPXv2BOoCbv1XTCJyfOtC1rEjZAcAO0J2sC5kncEVibScsrKyNhNs6xuPDme1WgPdIqDu80RERDBhwgQiIiICr//iF7+gR48edOvWjZqaGpxOJ1arlRUrVrBs2TIiIiKYMWMGffv2ZeXKlfTt25c//vGPgYaq22+/nTvvvJN+/fqxcuVKJk+eTN++ffn4449P+O1tfb7o27cvU6ZMoXPnztjtdjp37syUKVMatY/Gasljna522ee2urqa6urqwPMzHdJ27dpFUVERnTp1AuCCCy4ItMiazWbGjh3LCy+8wKBBg/j2229544038Pl8DB06lC+//JJJkyZhNptZsmQJPp+Ps88+m2+++Saw/6ysLLp378748eP54IMPWL16Nenp6ezcuZOEhITAD2x9HZMmTeLLL79k/fr1dO/ePbC+vo7DbdiwgQsuuCBQ6/jx49m+fTsAzz33HFOmTAEgLy/vzJ1AaReC8d+QHz9/d/wds9+Mz+TD7Dfzd8ffGVwxGBOmk++gFQjG/y/Sct58802jS2i0mpqao17zer0ADB48GJPJxNq1a/n73//O6NGjKS0tDWz3ySefcO211waus9dddx3vv/9+4Kv7CRMmYLPZ6NWrF5s3b6Z3795kZWUFGqqWL1/OBRdcELgO79mzJ/B4165dgW95j3T4df3IPq+H54sT7aOxWvJYp6tdhtunnnqKRx99tMWOVx+eKysrARgxYkSD9UlJSQCkpqby7bffUlJSAkCHDh0arC8sLATqwvHh4bZ+//369eODDz6gsLCQyMjI49aRlJQUCNeHt9LWH+dw9cc81jZutzvw+O9///sxPrlI+3Z4qy2Az+QLtN4OqRliYGWNp59tkbrrc7du3Vi7di2FhYVHNYoVFBQAP15n+/bt22B9/fP6a6/Vam2wj/prbf01tqysLPCeEzXAHX5dP5bD93e6WvJYp6tdhtvp06czbdq0wPOysrIzesNEfafn0NBQAFatWsXll18eWJ+TkwNAZmYmAFFRUZSUlAR+WHJycujcuTOxsbEAfPnll8fcf30/2djY2MA+j7VdTk5OoO/v4S3Yx3pP/TGPtU14eHjg8c033xzowyvSFHl5eUEVpI5sta3X1lpv9bMtp+PNN99sFWHndGVmZpKVlQXUXRePvJmpvjGq/vXNmzc3WL9582YyMjIC116v19vg+lr/uP4a63K5Gjw+nsOv6507dz5qfWP20VgteazT1S7Drd1ub9BieaZ17dqVmJiYwNcbX375JePGjQsMIbJgwQKioqL47rvvgLq+O3/4wx9Ys2YNMTExzJ8/nylTpnDuuefyySefNGi1hbq7NWtqapg7dy5ms5nhw4fzySefAHWBoaamhpCQkEAd8+bNCwTpHTt2UFNTg9lsZsGCBcTExFBbWxv4uuXwOx99Ph9z584NPJ82bVpgu4SEBN1RLXKYI1tt67W11lv9bMvpuPfee3nwwQeNLqNRQkJCjuqaYLVa8Xq9rFv3Y1/5m2++GZvNFrhrH+AnP/kJ8OP1/rPPPsNqtRIREUFxcTGfffYZQ4YMYdu2bZjNZrZu3crQoUMxmUz4/X5GjRoVyAOxsbF06dKFWbNmERsbS9euXY9bc/3x6nPC4d0FDt/fifbRWC15rNPVLsNtSzObzVxxxRXMmjULp9NJRUUF999/PwMHDqS0tJSdO3diNpvx+Xz069ePsLAwRo8ezaJFi3A4HGzatInXX3+djh07Brar/4GAupZoi8WC1+slNTWVBx54AJ/PR2xsLIWFhTzyyCOMHz+efv360bt3b5YvXw7UXbTy8vJ48MEHiYqKIicnh4yMjAY/xI8++ihxcXEMGzaM+fPnB/7qrB+D8PA+RyJSp77V1uQ34TcdPTqCyW9qU623Ik3lcrlwOBxt4qay4/W5DQsLC9xUFhERQVlZGStXrqS8vDyw3RtvvMEll1wC1IXk+r62I0eOpKysjKVLl3L//fdTW1vLqFGjWL58Ob///e8D1/HXXnsNgN27d3PZZZcxa9YsNm/ezOTJk084fuzh+eKtt95i7NixJCUlkZOTw4IFCxq1j8ZqyWOdLo1zi8a5PZLGuRUjBNM4t1683Oq6lRJzyXHfF+2LZlbZLKxYW6jSU6NxbqU5tfXhwI7nTI1zGxsby8SJE09rnNtT3UdjteSxjtTYvKaW2xY0YMAAzjrrrEbPUDZx4kQmTJhwWjOUHb4PzVAm0jKsWHmh/AVKzcf/ZiPKF9Vqg61Ic3v66afZvHnzUaMnaIay5pmh7PB8caZnDWvJYzWVwm0LM5vNdO/ene7dux81asKxhISEBIbiOtLxXm/sPg4fqqNXr17HrHXgwIEMHDiwUccRkR/F+eOIq40zugyRVqM+rLaVbwP69+9/1GvXXnvtUa+ZzWZ69uwZGAf+cEcOiXXktbg5h8yqzxctoSWP1RStJ2aLiIiIiJwmhVsRERERCRoKtyIiIiISNBRuRURERCRoKNyKiIiISNBQuBURERGRoKFwKyIiIiJBQ+FWRERERIKGwq2cloSEBH7729+SkNB2pksVEZGWp+uFtBTNUCanxWaztYmZZkRExFi6XkhLUcutiIiIiAQNhVsRERERCRoKtyIiIiISNBRuRURERCRoKNyKiIiISNBQuBURERGRoKFwKyIiIiJBQ+FWRERERIKGwq2IiIiIBA2FWxEREREJGpp+V0RalSJPkdElnJJCT2GD/waLtvb/QUSknsKtiLQK4eHhWK1W5hycY3QpTTL34FyjS2h2VquV8PBwo8sQETklJr/f7ze6CKOVlZURGRlJaWkpLpfL6HJE2q2ioiLcbrfRZcgPwsPDiYmJMboMERGg8XlNLbci0mrExMQoTImIyGnRDWUiIiIiEjQUbkVEREQkaCjcioiIiEjQUJ9boP6eurKyMoMrEREREZFjqc9pJxsLQeEWKC8vByAlJcXgSkRERETkRMrLy4mMjDzueg0FBvh8PrKzs4mIiMBkMp1w27KyMlJSUsjKytKwYS1M595YOv/G0vk3js69sXT+jdPazr3f76e8vJzk5GTM5uP3rFXLLWA2m+nUqdMpvcflcrWK/9Htkc69sXT+jaXzbxyde2Pp/BunNZ37E7XY1tMNZSIiIiISNBRuRURERCRoKNyeIrvdzsMPP4zdbje6lHZH595YOv/G0vk3js69sXT+jdNWz71uKBMRERGRoKGWWxEREREJGgq3IiIiIhI0FG5FREREJGgo3IqIiIhI0FC4FREREZGgoXArIiIiIkFD4VZEREREgobCrYiIiIgEDYVbEREREQkaCrciIiIiEjQUbkVEREQkaCjcioiIiEjQULgVERERkaChcCsiIiIiQUPhVkRERESChsKtiIiIiAQNhVsRERERCRoKtyIiIiISNBRuRURERCRoKNyKiIiISNAIMbqA1sDn85GdnU1ERAQmk8nockRERETkCH6/n/LycpKTkzGbj98+q3ALZGdnk5KSYnQZIiIiInISWVlZdOrU6bjrFW6BiIgIoO5kuVwug6sRkbbC7XaTnJwM1P2RHB4ebnBF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nQA8NW8HlZ5agysSETl9TQq3F154IXfddRfZ2T/OWHTgwAHuuecexowZ0+j9fP7559x666307duXAQMGMHv2bDIzM1m7di0ApaWlvPXWWzz33HNceOGFDBkyhFmzZrFixQpWrVoFwBdffMGWLVv4xz/+wcCBAxk/fjyPP/44M2fOxOPxNOXjibQ7uw9W8ME3+wG475KemExqtW0vBneKoKYsn+zSal5bvNPockRETluTwu0rr7xCWVkZnTt3pmvXrnTt2pUuXbpQVlbGyy+/3ORiSktLAYiJiQHqRmPwer2MHTs2sE2vXr1ITU1l5cqVQN2saGeddVaDmybGjRtHWVkZmzdvPuZxqqurKSsra7CItGf/O/97an1+xvSKZ0hajNHlSAuyWswUL/wLAK8v2c2egqNHVxARaUuadENZSkoK69atY8GCBWzbVjf3fO/evRuE0FPl8/m4++67GTVqFP369QMgNzcXm80WGJGhXkJCArm5uYFtjrwbuP55/TZHeuqpp3j00UebXKtIsPB4PGzILOKz73IwAVPPSz3m0FHHek2Cx6HvVzAyPZoVu4uZ/p/vePdnI9TnWkTarFNquV20aBF9+vShrKwMk8nERRddxJ133smdd97J0KFD6du3L8uWLWtSIVOnTmXTpk289957TXr/qZg+fTqlpaWBJSsr64wfU6S18Xg8pKSmcdnv3wCgYvNihnRNxOl0HrXU/8Ho86lPZrB66NIehFotrNpdxLtfZxpdjohIk51Sy+0LL7zAbbfdhsvlOmpdZGQkv/jFL3juuec499xzT6mIO+64g08//ZSlS5fSqdOPg8YnJibi8XgoKSlp0Hqbl5dHYmJiYJuvv/66wf7qR1Oo3+ZIdrsdu91+SjWKBBuv10upNZbE9LMxm+BnN19H5G03HnPbipIinpw0RuE2iKVEh3LvuJ489ukWZszdxgW94ukYFWp0WSIip+yUWm43bNjAJZdcctz1F198ceBmsMbw+/3ccccdfPjhhyxatIguXbo0WD9kyBCsVisLFy4MvLZ9+3YyMzPJyMgAICMjg40bN5Kfnx/YZv78+bhcLvr06dPoWkTaG7/fT9T5twDQNzmS+GjXcYeMsjkUctqDSSM7Mzg1iorqGn7/n42GDF0mInK6Tinc5uXlHXMIsHohISEcPHiw0fubOnUq//jHP3j33XeJiIgg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78jnJ1NaWorT6SQsLIyePXuSkJDAO++8E1hvs9no37//Ceusrq5mzJgxx1y/YcMGdu7cSUREBE6nE6fTSUxMDFVVVezateuUahURaW5quRURCTIRERGsW7cOs9lMUlISoaGhDdaHhoYGWlyP5cjtj1RRUcGQIUMaBOZ6cXFxTStaRKSZqOVWRKSF9O7dm5qaGlavXh14rbCwkO3bt9OnTx8AevbsyZo1axq878jnJ2M2m+nWrRvp6eknDarH0r17d0JDQ1m4cOEx1w8ePJgdO3YQHx9Pt27dGiwadUFEjKZwKyLSQrp3787EiRO57bbb+Oqrr9iwYQM33XQTHTt2ZOLEiQDceeedzJkzh+eee44dO3bwxhtvMHfu3BO2tDY3h8PBfffdx+9+9zv+9re/sWvXLlatWsVbb70FwI033kiHDh2YOHEiy5YtY8+ePSxevJhf//rX7N+/v8XqFBE5FoVbEZEWNGvWLIYMGcJll11GRkYGfr+fOXPmYLVaARg1ahSvv/46zz33HAMGDODzzz/nnnvuweFwtGidDz74IL/5zW946KGH6N27N9ddd11gIoiwsDCWLl1KamoqV111Fb1792bKlClUVVXhcrlatE4RkSOZ/H6/3+giRETk+G677Ta2bdvGsmXLjC5FRKTV0w1lIiKtzLPPPstFF11EeHg4c+fO5e233+bVV181uiwRkTZBLbciIq3Mtddey+LFiykvLyc9PZ0777yTX/7ylwD07duXffv2HfN9b7zxBjfeeGNLlioi0uoo3IqItCH79u0LzGZ2pISEhMBEDSIi7ZXCrYiIiIgEDY2WICIiIiJBQ+FWRERERIKGwq2IiIiIBA2FWxEREREJGgq3IiIiIhI0FG5FREREJGgo3IqIiIhI0FC4FREREZGg8f8BV+p96+5tNuoAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation: (QUESTION 3b & 4b)\n",
        "* Price is the dependent variable.\n",
        "* Before log, you can see two outliers that are affecting the skew.\n",
        "* Taking the log of Price has completely transformed the variable into a fairly normal distribution, reducing the affect of the minimal extreme outliers.\n",
        "  * I will keep the non-log Price until modeling to confirm it's relevance."
      ],
      "metadata": {
        "id": "JwvblSibLwwm"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "beo_tDmVhU3-"
      },
      "source": [
        "## **Bivariate Analysis**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v1JvMEDfj6w1"
      },
      "source": [
        "**Questions:**\n",
        "\n",
        "* 1c. Plot a scatter plot for the log transformed values(if log_transformation done in previous steps)? **(below)**\n",
        "* 2c. What can we infer form the correlation heatmap? Is there correlation between the dependent and independent variables? **(below)**\n",
        "* 3c. Plot a box plot for target variable and categorical variable 'Location' and write your observations? **(below)**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the heatmap of the numerical variables\n",
        "num_col = df.select_dtypes(include=[np.number])\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.heatmap(num_col.corr(), annot=True, fmt='.2f', cmap='viridis')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "ZYrprZ4MRAHd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 640
        },
        "outputId": "7fd91ce4-f886-4981-d3cc-e7d74a407254"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:** (QUESTION 2c)\n",
        "\n",
        "* Price and log_Price have the strongest correlation, in order from 0.85 to 0.69, with New_price, Power, and Engine.  \n",
        "  * And negative -0.50 to -0.19 with Age, Mileage, and Kilometers_Driven.\n",
        "* Kilometers_Driven highest correlation is with Age, which is logical.\n",
        "* Mileage is understandably negatively correlated with the Engine and Power related variables, but is also across the board negatively correlated with all variables.\n",
        "* Engine and Power are correlated with eachother, as they go hand in hand.\n",
        "* And Age is negatively correlated with Mileage which is also logical because the increased fuel efficancy came about in more recent years."
      ],
      "metadata": {
        "id": "A9RBgKo-ODie"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **(QUESTION 1c)**"
      ],
      "metadata": {
        "id": "719bKn2rQwNf"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sUUU3zskj6w1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "1b7da473-f4b3-4078-a815-3a566c971653"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x400 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Checking the independent and dependent variable correlations\n",
        "fig, axes = plt.subplots(1, 3, figsize = (15, 4))\n",
        "sns.scatterplot(x = 'New_price', y = 'Price', data = df, ax = axes[0]);\n",
        "sns.scatterplot(x = 'Power', y = 'Price', data = df, ax = axes[1]);\n",
        "sns.scatterplot(x = 'Engine', y = 'Price', data = df, ax = axes[2]);"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the independent and LOGGED dependent variable correlations\n",
        "fig, axes = plt.subplots(1, 3, figsize = (15, 4))\n",
        "sns.scatterplot(x = 'New_price', y = 'log_Price', data = df, ax = axes[0]);\n",
        "sns.scatterplot(x = 'Power', y = 'log_Price', data = df, ax = axes[1]);\n",
        "sns.scatterplot(x = 'Engine', y = 'log_Price', data = df, ax = axes[2]);"
      ],
      "metadata": {
        "id": "PAKvRkUfQgCY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "37a19ee7-10d6-4c9a-ab7b-67c600f85d34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x400 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Again, the lack of values in New_price is shown here.\n",
        "* Power and Engine have a cluster to a point, and then beyond that you can see the pricing becoming more variable, it's likely due to high end cars which don't follow the standard pricing rules usually.\n",
        "* Log_Price will really help with the nature of this data and that is evident."
      ],
      "metadata": {
        "id": "MARKiQAqRup4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the independent and dependent variable correlations\n",
        "fig, axes = plt.subplots(1, 3, figsize = (15, 4))\n",
        "sns.scatterplot(x = 'Age', y = 'Price', data = df, ax = axes[0]);\n",
        "sns.scatterplot(x = 'Mileage', y = 'Price', data = df, ax = axes[1]);\n",
        "sns.scatterplot(x = 'Kilometers_Driven', y = 'Price', data = df, ax = axes[2]);"
      ],
      "metadata": {
        "id": "nbseWPUbRSkt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "db958fb2-5e73-489d-b870-86bf34d3b5e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x400 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the independent and LOGGED dependent variable correlations\n",
        "fig, axes = plt.subplots(1, 3, figsize = (15, 4))\n",
        "sns.scatterplot(x = 'Age', y = 'log_Price', data = df, ax = axes[0]);\n",
        "sns.scatterplot(x = 'Mileage', y = 'log_Price', data = df, ax = axes[1]);\n",
        "sns.scatterplot(x = 'Kilometers_Driven', y = 'log_Price', data = df, ax = axes[2]);"
      ],
      "metadata": {
        "id": "HveuCixZRUqk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "906885d2-e8b0-4def-ab2f-64cec7c2f162"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x400 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Age has a logical relationship with Price, cars depreciate and that's the curve shown.\n",
        "* Mileage has values at 0.0 that need to be addressed. With a general range of Mileage possible it lacks an obvious visual correlation with Price.\n",
        "* Kilometers_Driven has an expected relationship with Price, but the outliers/potential wrong values need to be addressed."
      ],
      "metadata": {
        "id": "gJ-61v5YTprR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking multiple independent variable correlations\n",
        "from google.colab import files\n",
        "\n",
        "fig, ax1 = plt.subplots(figsize=(10, 5))\n",
        "\n",
        "scatter1 = ax1.scatter(df['Engine'], df['Price'], color='tomato', alpha=0.25, label='Engine vs Price')\n",
        "ax1.set_xlabel('Engine', fontsize=12)\n",
        "ax1.set_ylabel('Price', fontsize=12)\n",
        "ax1.tick_params(axis='x', labelcolor='tomato')\n",
        "\n",
        "ax2 = ax1.twiny()\n",
        "scatter2 = ax2.scatter(df['Power'], df['Price'], color='royalblue', alpha=0.25, label='Power vs Price')\n",
        "ax2.set_xlabel('Power', fontsize=12)\n",
        "ax2.tick_params(axis='x', labelcolor='royalblue')\n",
        "\n",
        "ax1.legend(handles=[scatter1], loc='lower right')\n",
        "ax2.legend(handles=[scatter2], loc='upper right')\n",
        "plt.title('Engine, Power vs Price', pad=20)\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "n5QymNdCWu5C",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 552
        },
        "outputId": "5e5dd188-7d1b-42b4-8afa-f2e6f30b1a29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Price vs Engine and Power have a strong relationship, increased power/engine size yields a higher price."
      ],
      "metadata": {
        "id": "ZipSiKxtRgtO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "plt.title(\"Price vs Age vs Fuel_Type\")\n",
        "sns.lineplot(x='Age', y='Price',hue='Fuel_Type',\n",
        "             data=df)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Tff7skuSZTfl",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "outputId": "16af7de6-13da-4275-dddf-47d5e1d6fcfb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Younger vehicles yields higher prices.\n",
        "* Diesel vehicles have higher prices than Petrol.\n",
        "* Green fuel are the lowest prices."
      ],
      "metadata": {
        "id": "o2KyeOEkSBS3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "plt.title(\"Price vs Age vs Transmission\")\n",
        "sns.lineplot(x='Age', y='Price',hue='Transmission',\n",
        "             data=df)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "I_H2Atiyato9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "outputId": "9562a501-a8bf-4e1a-a663-78363dee66d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Automatic vehicles have higher prices than Manual Transmissions"
      ],
      "metadata": {
        "id": "Qm4e9ynZS5B7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "plt.title(\"Price vs Age vs Owner_Type\")\n",
        "sns.lineplot(x='Age', y='Price',hue='Owner_Type',\n",
        "             data=df)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "yK4dUU0VZlpZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "outputId": "1c68a1ea-5ec7-4664-84d3-f0260961676c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Owner_type follows the depreciation in Price by Age."
      ],
      "metadata": {
        "id": "7ghGo8MPTRFG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "plt.title(\"Power vs Age vs Fuel_Type\")\n",
        "sns.lineplot(x='Age', y='Power',hue='Fuel_Type',\n",
        "             data=df)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "BOfalmMaLicA",
        "outputId": "a2fc7208-987f-4a46-a84c-b3b9f6520bd0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Diesel have higher Power, all power Fuel_Types depreciate significantly after 10 years.\n",
        "* Green vehicles, lowest Power, have no representation above 15 years, either they didn't exist or thet don't last that long."
      ],
      "metadata": {
        "id": "PiyN7uMKL39n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(9, 5))\n",
        "barplot = sns.barplot(x='Location', y='Price', data=df, palette='coolwarm')\n",
        "barplot.set_xticklabels(barplot.get_xticklabels(), rotation=90, horizontalalignment='center')\n",
        "\n",
        "plt.xlabel('Location', fontsize=12)\n",
        "plt.ylabel('Average Price', fontsize=12)\n",
        "plt.title('Average Car Price by Location', fontsize=12)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "aCMbrP29c2sT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "outputId": "40c3e2de-4653-403e-9a4c-233aac994dc2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:** (QUESTION 3c)\n",
        "\n",
        "* The highest average Prices are in Coimbatore and Bangalore.\n",
        "* The lowest average Prices are in Jaipur and Kolkata."
      ],
      "metadata": {
        "id": "xeIbcLZyT34_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(9, 5))\n",
        "barplot = sns.barplot(x = 'Location', y ='Age', data = df, palette='coolwarm')\n",
        "barplot.set_xticklabels(barplot.get_xticklabels(), rotation=90, horizontalalignment='center')\n",
        "\n",
        "plt.xlabel('Location', fontsize=12)\n",
        "plt.ylabel('Average Age', fontsize=12)\n",
        "plt.title('Average Age by Location', fontsize=12)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "Dsj4wA8RZZEU",
        "outputId": "ccc3b473-d66d-4add-90e1-8d1a41372af1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Oldest average vehicle Age by locaiton is Pune and Chennai.\n",
        "* Newest average vehicle Age by location is Coimbatore and Kochi."
      ],
      "metadata": {
        "id": "z3CU4_YrdE5T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(9, 5))\n",
        "barplot = sns.barplot(x='Location', y='Kilometers_Driven', data=df, palette='coolwarm')\n",
        "barplot.set_xticklabels(barplot.get_xticklabels(), rotation=90, horizontalalignment='center')\n",
        "\n",
        "plt.xlabel('Location', fontsize=12)\n",
        "plt.ylabel('Average Kilometers Driven', fontsize=12)\n",
        "plt.title('Average Kilometers Driven by Location', fontsize=12)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "6cOJcskGYB6e",
        "outputId": "be6e2d1e-23f2-49e4-a905-b432e5782b4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Highest average Kilometers_Driven by Location is Chennai and Pune.\n",
        "* Lowest average Kilometers_Driven by Location is Kolkata, Kochi, Coimbatore, and Mumbai.\n",
        "\n",
        "**Insight:** The lowest average prices with lowest age and kilometers driven, is the Kolkata location."
      ],
      "metadata": {
        "id": "A8CdoBYedcTH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12, 6))\n",
        "barplot = sns.barplot(x='Brand', y='Price', data=df, palette='coolwarm')\n",
        "barplot.set_xticklabels(barplot.get_xticklabels(), rotation=90, horizontalalignment='center')\n",
        "\n",
        "plt.xlabel('Brand', fontsize=12)\n",
        "plt.ylabel('Average Price', fontsize=12)\n",
        "plt.title('Average Car Price by Brand', fontsize=12)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "gl8L9CirdPIX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "outputId": "a78a38e6-37cc-4454-a8b7-f340c9d24c3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The top average Prices of vehciles are Lamborghini and Bentley, followed by Porshce, then Land Rover and Jaguar, next Audi, Mercedes-Benz, BMW, Mini Cooper.\n",
        "* The lowest are Opel, Hindustan, and Ambassador."
      ],
      "metadata": {
        "id": "JQ4XMy9OV1d5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "barplot = sns.barplot(x='Fuel_Type', y='Mileage', data=df, palette='coolwarm')\n",
        "barplot.set_xticklabels(barplot.get_xticklabels(), rotation=90, horizontalalignment='center')\n",
        "\n",
        "plt.xlabel('Fuel_Type', fontsize=12)\n",
        "plt.ylabel('Average Mileage', fontsize=12)\n",
        "plt.title('Average Car Mileage by Fuel_Type', fontsize=12)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "vnQbw0ceZIMs",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "outputId": "634c0b71-07fc-410a-d6f9-a8a8284e44d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Petrol has the lowest average Mileage reported."
      ],
      "metadata": {
        "id": "mSR7kyVOerx_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "agg_df = df.groupby(['Location', 'Transmission'])['Price'].sum().unstack(fill_value=0)\n",
        "colors =['lightgrey','lightsalmon']\n",
        "agg_df.plot(kind='bar', stacked=True, figsize=(10, 6), color=colors)\n",
        "\n",
        "plt.title('Price by Location and Transmission Type')\n",
        "plt.xlabel('Location')\n",
        "plt.ylabel('Price')\n",
        "plt.legend(title='Transmission')\n",
        "plt.xticks(rotation=45)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "4Ae9JfpbBCuW",
        "outputId": "48d1c73b-475c-4b49-e0d1-696307ac7433"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* This shows the sum of the Prices of vehcles and the distribution of Transmission.\n",
        "* Coimbatore has the highest amount of sales by Price, followed by Mumbai, Kochi, and Hyperabad.\n",
        "\n",
        "**Insight**\n",
        "\n",
        "* Kolkata has low total Price sum with medium high counts with a low average Price."
      ],
      "metadata": {
        "id": "3odZmEKREd0G"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "70E7M7KJtOS1"
      },
      "source": [
        "### **Outlier Detection and Treatment**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Outlier detection using boxplot\n",
        "num_columns = ['Kilometers_Driven', 'Mileage', 'Engine', 'Power', 'New_price', 'Age', 'Price', 'log_Price']\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "for i, variable in enumerate(num_columns):\n",
        "    plt.subplot(2, 4, i + 1)\n",
        "    valid_data = df[variable].dropna()\n",
        "    plt.boxplot(valid_data, whis=1.5)\n",
        "    plt.title(variable)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "Lz33M1cIW7N6",
        "outputId": "b144e99f-e588-499a-ae2d-0c0e6fa43308"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the percentage of outliers independent variables\n",
        "for k, v in df.select_dtypes(include=[np.number]).items():\n",
        "    q1 = v.quantile(0.25)\n",
        "    q3 = v.quantile(0.75)\n",
        "    irq = q3 - q1\n",
        "    v_col = v[(v <= q1 - 1.5 * irq) | (v >= q3 + 1.5 * irq)]\n",
        "    perc = np.shape(v_col)[0] * 100.0 / np.shape(df)[0]\n",
        "    print(\"Column %s outliers = %.2f%%\" % (k, perc))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yopzJg98nAI7",
        "outputId": "56952df7-6dbe-4698-b651-2837a765b8bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Column Kilometers_Driven outliers = 3.54%\n",
            "Column Mileage outliers = 1.36%\n",
            "Column Engine outliers = 0.90%\n",
            "Column Power outliers = 3.76%\n",
            "Column New_price outliers = 1.49%\n",
            "Column Price outliers = 9.90%\n",
            "Column Age outliers = 0.80%\n",
            "Column log_Price outliers = 1.86%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation: (QUESTION 3b)**\n",
        "\n",
        "* Kilometers_Driven has additional servere outliers, it's difficult to be sure they are incorrectly input as before, so imputing values isn't appropriate, these are vehicles that maybe had a level of maintence that warrented this longevity, or it was in fact incorrectly recorded.\n",
        "  * Even after removing the extreme values, the distribution will still have a strong right skew that will benefit from taking the log of this variable.\n",
        "* Engine and Power are representative of high power vehicles and these will remain.\n",
        "* New_price will be dropped therefore doesn't need to be addressed.\n",
        "* Price has some outliers, but these were reduced by taking the log of Price."
      ],
      "metadata": {
        "id": "Sc38-bcMYeg8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Locating extreme Kilometers_Driven rows\n",
        "df[df['Kilometers_Driven'] > 400000]"
      ],
      "metadata": {
        "id": "FZQH6L9QTB-f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "outputId": "3c01a9ad-dac8-4b31-90bd-8489982aabc5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Location  Kilometers_Driven Fuel_Type Transmission Owner_Type  Mileage  \\\n",
              "340     Kolkata             775000    Diesel    Automatic      First    19.30   \n",
              "358     Chennai             620000    Petrol       Manual      First    20.36   \n",
              "1860    Chennai             720000    Diesel       Manual      First    20.54   \n",
              "2823    Chennai             480000    Diesel    Automatic      First    16.96   \n",
              "3092    Kolkata             480000    Petrol       Manual      First    17.40   \n",
              "4491  Bangalore             445000    Petrol       Manual      First    18.50   \n",
              "\n",
              "      Engine   Power Seats  New_price  Price  Age       Brand    Model  \\\n",
              "340   1968.0  141.00     5        NaN   7.50    7       skoda  octavia   \n",
              "358   1197.0   78.90     5        NaN   2.70   11     hyundai      i10   \n",
              "1860  1598.0  103.60     5        NaN   5.90    7  volkswagen    vento   \n",
              "2823  1968.0  138.03     5        NaN  13.00    5  volkswagen    jetta   \n",
              "3092  1497.0  117.30     5        NaN   5.00    5       honda     city   \n",
              "4491  1197.0   82.90     5        NaN   4.45    7     hyundai      i20   \n",
              "\n",
              "                              Series  log_Price  \n",
              "340         ambition plus 2.0 tdi at   2.014903  \n",
              "358                        magna 1.2   0.993252  \n",
              "1860                 diesel highline   1.774952  \n",
              "2823  2013-2015 2.0l tdi highline at   2.564949  \n",
              "3092                       i vtec sv   1.609438  \n",
              "4491              magna optional 1.2   1.492904  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6d920297-4360-4d7a-82f6-5e8b88a2786a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "      <th>log_Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>340</th>\n",
              "      <td>Kolkata</td>\n",
              "      <td>775000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>19.30</td>\n",
              "      <td>1968.0</td>\n",
              "      <td>141.00</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7.50</td>\n",
              "      <td>7</td>\n",
              "      <td>skoda</td>\n",
              "      <td>octavia</td>\n",
              "      <td>ambition plus 2.0 tdi at</td>\n",
              "      <td>2.014903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>358</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>620000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.36</td>\n",
              "      <td>1197.0</td>\n",
              "      <td>78.90</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.70</td>\n",
              "      <td>11</td>\n",
              "      <td>hyundai</td>\n",
              "      <td>i10</td>\n",
              "      <td>magna 1.2</td>\n",
              "      <td>0.993252</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1860</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>720000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>20.54</td>\n",
              "      <td>1598.0</td>\n",
              "      <td>103.60</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.90</td>\n",
              "      <td>7</td>\n",
              "      <td>volkswagen</td>\n",
              "      <td>vento</td>\n",
              "      <td>diesel highline</td>\n",
              "      <td>1.774952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2823</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>480000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>16.96</td>\n",
              "      <td>1968.0</td>\n",
              "      <td>138.03</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>13.00</td>\n",
              "      <td>5</td>\n",
              "      <td>volkswagen</td>\n",
              "      <td>jetta</td>\n",
              "      <td>2013-2015 2.0l tdi highline at</td>\n",
              "      <td>2.564949</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3092</th>\n",
              "      <td>Kolkata</td>\n",
              "      <td>480000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>17.40</td>\n",
              "      <td>1497.0</td>\n",
              "      <td>117.30</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.00</td>\n",
              "      <td>5</td>\n",
              "      <td>honda</td>\n",
              "      <td>city</td>\n",
              "      <td>i vtec sv</td>\n",
              "      <td>1.609438</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4491</th>\n",
              "      <td>Bangalore</td>\n",
              "      <td>445000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.50</td>\n",
              "      <td>1197.0</td>\n",
              "      <td>82.90</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.45</td>\n",
              "      <td>7</td>\n",
              "      <td>hyundai</td>\n",
              "      <td>i20</td>\n",
              "      <td>magna optional 1.2</td>\n",
              "      <td>1.492904</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d920297-4360-4d7a-82f6-5e8b88a2786a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6d920297-4360-4d7a-82f6-5e8b88a2786a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6d920297-4360-4d7a-82f6-5e8b88a2786a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c79ce832-9a51-4905-81f8-9e55c935516a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c79ce832-9a51-4905-81f8-9e55c935516a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c79ce832-9a51-4905-81f8-9e55c935516a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['Kilometers_Driven'] > 400000]\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Kolkata\",\n          \"Chennai\",\n          \"Bangalore\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 139415,\n        \"min\": 445000,\n        \"max\": 775000,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          620000,\n          445000,\n          720000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Manual\",\n          \"Automatic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"First\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.49234937821767,\n        \"min\": 16.96,\n        \"max\": 20.54,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          19.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 346.7491408304665,\n        \"min\": 1197.0,\n        \"max\": 1968.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1197.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.615980475396103,\n        \"min\": 78.9,\n        \"max\": 141.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          141.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5907868218539516,\n        \"min\": 2.7,\n        \"max\": 13.0,\n        \"num_unique_values\": 6,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 5,\n        \"max\": 11,\n        \"num_unique_values\": 3,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Series\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5278356784677474,\n        \"min\": 0.9932517730102834,\n        \"max\": 2.5649493574615367,\n        \"num_unique_values\": 6,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping vehicles that have above 445,000 miles and above\n",
        "df = df.drop([340, 358, 1860, 2823, 3092, 4491], axis = 0).reset_index(drop = True)"
      ],
      "metadata": {
        "id": "hk8JcaNpUZh4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Performing a log transformation to address the right skew and outliers in Kilometers_Driven\n",
        "df['log_Kilometers_Driven'] = np.log(df['Kilometers_Driven'])"
      ],
      "metadata": {
        "id": "OXOSTE72sCHB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "histogram_boxplot(df, 'Kilometers_Driven', kde = True)"
      ],
      "metadata": {
        "id": "TJoa0e2vVIZF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "153f7594-6c1d-45b7-c258-098b4a64df10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation: QUESTION 4b)**\n",
        "\n",
        "* While Kilometers_Driven is still right skewed the log made the distribution  more normal."
      ],
      "metadata": {
        "id": "Gu4xO6biS1o8"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2N4fU3TetOS3"
      },
      "source": [
        "### **Missing value treatment**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking null values\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "id": "gqgnEetTJrZ9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ba9783a9-8c01-468e-eae8-440c7838b5c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location                    0\n",
              "Kilometers_Driven           0\n",
              "Fuel_Type                   0\n",
              "Transmission                0\n",
              "Owner_Type                  0\n",
              "Mileage                     2\n",
              "Engine                     46\n",
              "Power                     175\n",
              "Seats                      53\n",
              "New_price                6241\n",
              "Price                    1234\n",
              "Age                         0\n",
              "Brand                       0\n",
              "Model                       0\n",
              "Series                      0\n",
              "log_Price                1234\n",
              "log_Kilometers_Driven       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Locating missing Mileage value and Milegae that has a zero value\n",
        "df[df['Mileage'].isna()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "-A33lbEn7YI-",
        "outputId": "32cfe8b6-8a95-4a21-a3d0-520d346800e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Location  Kilometers_Driven Fuel_Type Transmission Owner_Type  Mileage  \\\n",
              "4441  Chennai              50000     Green    Automatic      First      NaN   \n",
              "4898   Mumbai              44000     Green    Automatic      First      NaN   \n",
              "\n",
              "      Engine  Power Seats  New_price  Price  Age     Brand  Model  \\\n",
              "4441    72.0   41.0     5      13.58  13.00    4  mahindra      e   \n",
              "4898  1798.0   73.0     5        NaN  12.75    9    toyota  prius   \n",
              "\n",
              "            Series  log_Price  log_Kilometers_Driven  \n",
              "4441     verito d4   2.564949              10.819778  \n",
              "4898  2009-2016 z4   2.545531              10.691945  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4db0bb51-9858-433a-b342-91e532ec7e53\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "      <th>log_Price</th>\n",
              "      <th>log_Kilometers_Driven</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4441</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>50000</td>\n",
              "      <td>Green</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>NaN</td>\n",
              "      <td>72.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>5</td>\n",
              "      <td>13.58</td>\n",
              "      <td>13.00</td>\n",
              "      <td>4</td>\n",
              "      <td>mahindra</td>\n",
              "      <td>e</td>\n",
              "      <td>verito d4</td>\n",
              "      <td>2.564949</td>\n",
              "      <td>10.819778</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4898</th>\n",
              "      <td>Mumbai</td>\n",
              "      <td>44000</td>\n",
              "      <td>Green</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1798.0</td>\n",
              "      <td>73.0</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>12.75</td>\n",
              "      <td>9</td>\n",
              "      <td>toyota</td>\n",
              "      <td>prius</td>\n",
              "      <td>2009-2016 z4</td>\n",
              "      <td>2.545531</td>\n",
              "      <td>10.691945</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4db0bb51-9858-433a-b342-91e532ec7e53')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4db0bb51-9858-433a-b342-91e532ec7e53 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4db0bb51-9858-433a-b342-91e532ec7e53');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-51f570eb-0351-4825-8e57-dc31f696c4b8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-51f570eb-0351-4825-8e57-dc31f696c4b8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-51f570eb-0351-4825-8e57-dc31f696c4b8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['Mileage']\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Mumbai\",\n          \"Chennai\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4242,\n        \"min\": 44000,\n        \"max\": 50000,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          44000,\n          50000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Green\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Automatic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"First\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1220.466304327981,\n        \"min\": 72.0,\n        \"max\": 1798.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.627416997969522,\n        \"min\": 41.0,\n        \"max\": 73.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 13.58,\n        \"max\": 13.58,\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1767766952966369,\n        \"min\": 12.75,\n        \"max\": 13.0,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 4,\n        \"max\": 9,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Series\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013730660187219282,\n        \"min\": 2.545531271604435,\n        \"max\": 2.5649493574615367,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09039184385657885,\n        \"min\": 10.691944912900398,\n        \"max\": 10.819778284410283,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Replacing mean Green Fuel_Type for missing values\n",
        "mean_green = df[df['Fuel_Type'] == 'Green']['Mileage'].mean()\n",
        "df['Mileage'] = df['Mileage'].fillna(mean_green)"
      ],
      "metadata": {
        "id": "_KdjwblFZ-Po"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the zero values\n",
        "df[df['Mileage'] == 0.0].head()"
      ],
      "metadata": {
        "id": "KRHaSo3VAHOd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "outputId": "ba83aac5-d37c-489c-d89e-ad7407dd70bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Location  Kilometers_Driven Fuel_Type Transmission Owner_Type  Mileage  \\\n",
              "14         Pune              85000    Diesel    Automatic     Second      0.0   \n",
              "67   Coimbatore              15369    Diesel    Automatic      First      0.0   \n",
              "79    Hyderabad              87591    Petrol       Manual      First      0.0   \n",
              "194   Ahmedabad              60006    Petrol       Manual      First      0.0   \n",
              "229   Bangalore              70436    Diesel       Manual      First      0.0   \n",
              "\n",
              "     Engine  Power Seats  New_price  Price  Age          Brand       Model  \\\n",
              "14   2179.0  115.0     5        NaN  17.50    8     land rover  freelander   \n",
              "67   1950.0  194.0     5      49.14  35.67    1  mercedes-benz     c-class   \n",
              "79   1086.0    NaN     5        NaN   1.30   15        hyundai      santro   \n",
              "194     NaN    NaN   NaN        NaN   2.95   13          honda        city   \n",
              "229  1498.0   99.0   NaN        NaN   3.60    5           ford        figo   \n",
              "\n",
              "                 Series  log_Price  log_Kilometers_Driven  \n",
              "14             2 td4 se   2.862201              11.350407  \n",
              "67   progressive c 220d   3.574310               9.640108  \n",
              "79              xing xl   0.262364              11.380434  \n",
              "194             1.5 gxi   1.081805              11.002200  \n",
              "229              diesel   1.280934              11.162460  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c927e42a-f819-4338-a444-292433ba91b9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "      <th>log_Price</th>\n",
              "      <th>log_Kilometers_Driven</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Pune</td>\n",
              "      <td>85000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2179.0</td>\n",
              "      <td>115.0</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.50</td>\n",
              "      <td>8</td>\n",
              "      <td>land rover</td>\n",
              "      <td>freelander</td>\n",
              "      <td>2 td4 se</td>\n",
              "      <td>2.862201</td>\n",
              "      <td>11.350407</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>67</th>\n",
              "      <td>Coimbatore</td>\n",
              "      <td>15369</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>First</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1950.0</td>\n",
              "      <td>194.0</td>\n",
              "      <td>5</td>\n",
              "      <td>49.14</td>\n",
              "      <td>35.67</td>\n",
              "      <td>1</td>\n",
              "      <td>mercedes-benz</td>\n",
              "      <td>c-class</td>\n",
              "      <td>progressive c 220d</td>\n",
              "      <td>3.574310</td>\n",
              "      <td>9.640108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>87591</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1086.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.30</td>\n",
              "      <td>15</td>\n",
              "      <td>hyundai</td>\n",
              "      <td>santro</td>\n",
              "      <td>xing xl</td>\n",
              "      <td>0.262364</td>\n",
              "      <td>11.380434</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>60006</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.95</td>\n",
              "      <td>13</td>\n",
              "      <td>honda</td>\n",
              "      <td>city</td>\n",
              "      <td>1.5 gxi</td>\n",
              "      <td>1.081805</td>\n",
              "      <td>11.002200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>229</th>\n",
              "      <td>Bangalore</td>\n",
              "      <td>70436</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1498.0</td>\n",
              "      <td>99.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.60</td>\n",
              "      <td>5</td>\n",
              "      <td>ford</td>\n",
              "      <td>figo</td>\n",
              "      <td>diesel</td>\n",
              "      <td>1.280934</td>\n",
              "      <td>11.162460</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c927e42a-f819-4338-a444-292433ba91b9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c927e42a-f819-4338-a444-292433ba91b9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c927e42a-f819-4338-a444-292433ba91b9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ac7804d9-8f36-448f-aa54-b2603b1fb3c4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ac7804d9-8f36-448f-aa54-b2603b1fb3c4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ac7804d9-8f36-448f-aa54-b2603b1fb3c4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['Mileage'] == 0\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Coimbatore\",\n          \"Bangalore\",\n          \"Hyderabad\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29237,\n        \"min\": 15369,\n        \"max\": 87591,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          15369,\n          70436,\n          87591\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Manual\",\n          \"Automatic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"First\",\n          \"Second\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 485.7464187550263,\n        \"min\": 1086.0,\n        \"max\": 2179.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1950.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50.86255990411808,\n        \"min\": 99.0,\n        \"max\": 194.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          115.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 49.14,\n        \"max\": 49.14,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          49.14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14.6395297055609,\n        \"min\": 1.3,\n        \"max\": 35.67,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          35.67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"mercedes-benz\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"c-class\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Series\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"progressive c 220d\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.362465097320352,\n        \"min\": 0.26236426446749106,\n        \"max\": 3.5743099993708003,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.5743099993708003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7245838827169212,\n        \"min\": 9.640107772607312,\n        \"max\": 11.380433531920369,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          9.640107772607312\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Changing to NaN then imputing with mean value by Brand Fuel_Type mean\n",
        "df.loc[df['Mileage']==0.0,'Mileage']=np.nan\n",
        "df['Mileage'] = df.groupby(['Brand', 'Fuel_Type'])['Mileage'].transform(lambda val: val.fillna(val.mean()))"
      ],
      "metadata": {
        "id": "azZJdw8M_HNa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Imputing the remaining two mising values by Fuel_Type mean\n",
        "df['Mileage'] = df.groupby(['Fuel_Type'])['Mileage'].transform(lambda val: val.fillna(val.mean()))"
      ],
      "metadata": {
        "id": "6LUlNZ8f1O3G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* As mentioned during the summary, the 0.0 min values for Mileage needed to be addressed along with the 2 missing values for a total of 83 values.\n",
        "  * The two missing values had no other like entries, they are the only two Electiric cars in the dataframe, the mean value of the Green Fuel_Types was imputed.\n",
        "  * The 0.0 values were spread throughout the various Brands and either Diesel or Petrol, the mean Mileage for each Brand and Fuel_Type was imputed."
      ],
      "metadata": {
        "id": "O0cM86B_CMze"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Locating the missing values in Engine\n",
        "df[df['Engine'].isna()].head()"
      ],
      "metadata": {
        "id": "nfHShT9CDe_f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 217
        },
        "outputId": "ada675b1-5715-4953-b12a-01b220824202"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Location  Kilometers_Driven Fuel_Type Transmission Owner_Type  \\\n",
              "194   Ahmedabad              60006    Petrol       Manual      First   \n",
              "208     Kolkata              42001    Petrol       Manual      First   \n",
              "731     Chennai              97800    Petrol       Manual      Third   \n",
              "747      Mumbai              55001    Diesel    Automatic     Second   \n",
              "1292      Delhi              55005    Petrol       Manual      First   \n",
              "\n",
              "        Mileage  Engine  Power Seats  New_price  Price  Age       Brand  \\\n",
              "194   16.585121     NaN    NaN   NaN        NaN   2.95   13       honda   \n",
              "208   16.100000     NaN    NaN   NaN        NaN   2.11   10      maruti   \n",
              "731   16.100000     NaN    NaN   NaN        NaN   1.75   14      maruti   \n",
              "747   12.831053     NaN    NaN   NaN        NaN  26.50   12  land rover   \n",
              "1292  12.800000     NaN    NaN   NaN        NaN   3.20   11       honda   \n",
              "\n",
              "            Model   Series  log_Price  log_Kilometers_Driven  \n",
              "194          city  1.5 gxi   1.081805              11.002200  \n",
              "208         swift  1.3 vxi   0.746688              10.645449  \n",
              "731         swift  1.3 vxi   0.559616              11.490680  \n",
              "747   range rover    3.0 d   3.277145              10.915107  \n",
              "1292         city   1.3 dx   1.163151              10.915179  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ca1e4e88-7525-4b1c-b122-71b140ac5101\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "      <th>log_Price</th>\n",
              "      <th>log_Kilometers_Driven</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>60006</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>16.585121</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.95</td>\n",
              "      <td>13</td>\n",
              "      <td>honda</td>\n",
              "      <td>city</td>\n",
              "      <td>1.5 gxi</td>\n",
              "      <td>1.081805</td>\n",
              "      <td>11.002200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>208</th>\n",
              "      <td>Kolkata</td>\n",
              "      <td>42001</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>16.100000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.11</td>\n",
              "      <td>10</td>\n",
              "      <td>maruti</td>\n",
              "      <td>swift</td>\n",
              "      <td>1.3 vxi</td>\n",
              "      <td>0.746688</td>\n",
              "      <td>10.645449</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>731</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>97800</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Third</td>\n",
              "      <td>16.100000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.75</td>\n",
              "      <td>14</td>\n",
              "      <td>maruti</td>\n",
              "      <td>swift</td>\n",
              "      <td>1.3 vxi</td>\n",
              "      <td>0.559616</td>\n",
              "      <td>11.490680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>747</th>\n",
              "      <td>Mumbai</td>\n",
              "      <td>55001</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>12.831053</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>26.50</td>\n",
              "      <td>12</td>\n",
              "      <td>land rover</td>\n",
              "      <td>range rover</td>\n",
              "      <td>3.0 d</td>\n",
              "      <td>3.277145</td>\n",
              "      <td>10.915107</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1292</th>\n",
              "      <td>Delhi</td>\n",
              "      <td>55005</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>12.800000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.20</td>\n",
              "      <td>11</td>\n",
              "      <td>honda</td>\n",
              "      <td>city</td>\n",
              "      <td>1.3 dx</td>\n",
              "      <td>1.163151</td>\n",
              "      <td>10.915179</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca1e4e88-7525-4b1c-b122-71b140ac5101')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ca1e4e88-7525-4b1c-b122-71b140ac5101 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ca1e4e88-7525-4b1c-b122-71b140ac5101');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f5d7111f-6724-48c5-92fd-26f29927f2ec\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f5d7111f-6724-48c5-92fd-26f29927f2ec')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f5d7111f-6724-48c5-92fd-26f29927f2ec button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Imputing the missing Engine values with Brand median\n",
        "df['Engine'] = df.groupby('Brand')['Engine'].transform(lambda x: x.fillna(x.median()))"
      ],
      "metadata": {
        "id": "b9raxNTFo1x8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Locating the missing values in Power\n",
        "df[df['Power'].isna()].head()"
      ],
      "metadata": {
        "id": "EVVv6HJeFcCj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 234
        },
        "outputId": "cf95899e-74a3-4f82-b718-355ba15ccf1c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Location  Kilometers_Driven Fuel_Type Transmission Owner_Type  \\\n",
              "76      Jaipur             111111    Diesel       Manual      First   \n",
              "79   Hyderabad              87591    Petrol       Manual      First   \n",
              "89   Hyderabad              73745    Petrol       Manual      First   \n",
              "120     Mumbai             102000    Petrol       Manual     Second   \n",
              "143      Kochi              80759    Petrol       Manual      Third   \n",
              "\n",
              "       Mileage  Engine  Power Seats  New_price  Price  Age    Brand   Model  \\\n",
              "76   17.800000  1399.0    NaN     5        NaN   2.00   12     ford  fiesta   \n",
              "79   18.308633  1086.0    NaN     5        NaN   1.30   15  hyundai  santro   \n",
              "89   17.000000  1086.0    NaN     5        NaN   2.10   13  hyundai  santro   \n",
              "120  17.000000  1086.0    NaN     5        NaN   0.85   15  hyundai  santro   \n",
              "143  17.000000  1086.0    NaN     5        NaN   1.67   12  hyundai  santro   \n",
              "\n",
              "                    Series  log_Price  log_Kilometers_Driven  \n",
              "76            1.4 sxi tdci   0.693147              11.618285  \n",
              "79                 xing xl   0.262364              11.380434  \n",
              "89                 xing xo   0.741937              11.208368  \n",
              "120  xing xl erlx euro iii  -0.162519              11.532728  \n",
              "143   xing xo erlx euro ii   0.512824              11.299225  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-adcc35dc-1443-4e28-886c-7e4da3d9c8c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "      <th>log_Price</th>\n",
              "      <th>log_Kilometers_Driven</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>76</th>\n",
              "      <td>Jaipur</td>\n",
              "      <td>111111</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>17.800000</td>\n",
              "      <td>1399.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.00</td>\n",
              "      <td>12</td>\n",
              "      <td>ford</td>\n",
              "      <td>fiesta</td>\n",
              "      <td>1.4 sxi tdci</td>\n",
              "      <td>0.693147</td>\n",
              "      <td>11.618285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>87591</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>18.308633</td>\n",
              "      <td>1086.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.30</td>\n",
              "      <td>15</td>\n",
              "      <td>hyundai</td>\n",
              "      <td>santro</td>\n",
              "      <td>xing xl</td>\n",
              "      <td>0.262364</td>\n",
              "      <td>11.380434</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>73745</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>1086.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.10</td>\n",
              "      <td>13</td>\n",
              "      <td>hyundai</td>\n",
              "      <td>santro</td>\n",
              "      <td>xing xo</td>\n",
              "      <td>0.741937</td>\n",
              "      <td>11.208368</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120</th>\n",
              "      <td>Mumbai</td>\n",
              "      <td>102000</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Second</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>1086.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.85</td>\n",
              "      <td>15</td>\n",
              "      <td>hyundai</td>\n",
              "      <td>santro</td>\n",
              "      <td>xing xl erlx euro iii</td>\n",
              "      <td>-0.162519</td>\n",
              "      <td>11.532728</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>Kochi</td>\n",
              "      <td>80759</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Third</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>1086.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.67</td>\n",
              "      <td>12</td>\n",
              "      <td>hyundai</td>\n",
              "      <td>santro</td>\n",
              "      <td>xing xo erlx euro ii</td>\n",
              "      <td>0.512824</td>\n",
              "      <td>11.299225</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-adcc35dc-1443-4e28-886c-7e4da3d9c8c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-adcc35dc-1443-4e28-886c-7e4da3d9c8c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-adcc35dc-1443-4e28-886c-7e4da3d9c8c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1a3273b8-7f39-4845-8f50-e6d2734433ba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a3273b8-7f39-4845-8f50-e6d2734433ba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1a3273b8-7f39-4845-8f50-e6d2734433ba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['Power']\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Hyderabad\",\n          \"Kochi\",\n          \"Jaipur\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15327,\n        \"min\": 73745,\n        \"max\": 111111,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          87591,\n          80759,\n          73745\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"First\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6048250014454276,\n        \"min\": 17.0,\n        \"max\": 18.308632676709156,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          17.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 139.97785539148686,\n        \"min\": 1086.0,\n        \"max\": 1399.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1086.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5162654356045929,\n        \"min\": 0.85,\n        \"max\": 2.1,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 12,\n        \"max\": 15,\n        \"num_unique_values\": 3,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Series\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3709786552188912,\n        \"min\": -0.16251892949777494,\n        \"max\": 0.7419373447293773,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16749732054425562,\n        \"min\": 11.208368475293602,\n        \"max\": 11.618284980627555,\n        \"num_unique_values\": 5,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Imputing the missing Power values with Brand median\n",
        "df['Power'] = df.groupby('Brand')['Power'].transform(lambda x: x.fillna(x.median()))"
      ],
      "metadata": {
        "id": "SoY6kY2lpuOK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Addressing a remaining NaN value due to no median by Brand available\n",
        "df[df['Power'].isna()]"
      ],
      "metadata": {
        "id": "3KDJMcHwI_B5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "outputId": "efd8dc81-5890-424e-c794-df175a4f7ba3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Location  Kilometers_Driven Fuel_Type Transmission Owner_Type    Mileage  \\\n",
              "913      Pune             103000    Diesel    Automatic     Second  18.752758   \n",
              "6210     Pune              65000    Diesel       Manual     Second  14.100000   \n",
              "\n",
              "      Engine  Power Seats  New_price  Price  Age      Brand   Model  \\\n",
              "913    799.0    NaN   2-4        NaN    3.0   12      smart  fortwo   \n",
              "6210  1995.0    NaN     5        NaN    NaN   24  hindustan  motors   \n",
              "\n",
              "                Series  log_Price  log_Kilometers_Driven  \n",
              "913             cdi at   1.098612              11.542484  \n",
              "6210  contessa 2.0 dsl        NaN              11.082143  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9da64971-09be-48d1-ad89-a5e2bf92a46c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "      <th>log_Price</th>\n",
              "      <th>log_Kilometers_Driven</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>913</th>\n",
              "      <td>Pune</td>\n",
              "      <td>103000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>18.752758</td>\n",
              "      <td>799.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2-4</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>12</td>\n",
              "      <td>smart</td>\n",
              "      <td>fortwo</td>\n",
              "      <td>cdi at</td>\n",
              "      <td>1.098612</td>\n",
              "      <td>11.542484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6210</th>\n",
              "      <td>Pune</td>\n",
              "      <td>65000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Second</td>\n",
              "      <td>14.100000</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>24</td>\n",
              "      <td>hindustan</td>\n",
              "      <td>motors</td>\n",
              "      <td>contessa 2.0 dsl</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11.082143</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9da64971-09be-48d1-ad89-a5e2bf92a46c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9da64971-09be-48d1-ad89-a5e2bf92a46c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9da64971-09be-48d1-ad89-a5e2bf92a46c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b9131d66-3523-4a3e-8004-d55404242377\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b9131d66-3523-4a3e-8004-d55404242377')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b9131d66-3523-4a3e-8004-d55404242377 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['Power']\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Pune\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26870,\n        \"min\": 65000,\n        \"max\": 103000,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          65000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Second\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.289996750740409,\n        \"min\": 14.1,\n        \"max\": 18.7527580250605,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          14.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 845.6997102991108,\n        \"min\": 799.0,\n        \"max\": 1995.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1995.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 12,\n        \"max\": 24,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Series\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.0986122886681098,\n        \"max\": 1.0986122886681098,\n        \"num_unique_values\": 1,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3255107506970377,\n        \"min\": 11.082142548877775,\n        \"max\": 11.542484267211773,\n        \"num_unique_values\": 2,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Imputing median value for remaining missing Power\n",
        "df.loc[df['Power'].isnull(), 'Power'] = df['Power'].median()"
      ],
      "metadata": {
        "id": "6iznpNeSKe1_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Engine and Power's missing values were imputed with the median value of the Brand.  There was a variety of Brands that were missing data, and with the overall right skewed data of Engine and Power, the median was the appropriate method to use.\n",
        "  * Two missing values of Power remained due to lack of median by Brand, and in those cases the overal median for Power was imputed."
      ],
      "metadata": {
        "id": "nL4kWeC1KymE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Locating the missing values in Seats\n",
        "df[df['Seats'].isna()].head()"
      ],
      "metadata": {
        "id": "uBn3wAsQipWK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 217
        },
        "outputId": "337c4b22-6bf1-437d-bdbb-664dfa2d7aaf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Location  Kilometers_Driven Fuel_Type Transmission Owner_Type  \\\n",
              "194  Ahmedabad              60006    Petrol       Manual      First   \n",
              "208    Kolkata              42001    Petrol       Manual      First   \n",
              "229  Bangalore              70436    Diesel       Manual      First   \n",
              "731    Chennai              97800    Petrol       Manual      Third   \n",
              "747     Mumbai              55001    Diesel    Automatic     Second   \n",
              "\n",
              "       Mileage  Engine  Power Seats  New_price  Price  Age       Brand  \\\n",
              "194  16.585121  1497.0   98.6   NaN        NaN   2.95   13       honda   \n",
              "208  16.100000  1197.0   74.0   NaN        NaN   2.11   10      maruti   \n",
              "229  19.541013  1498.0   99.0   NaN        NaN   3.60    5        ford   \n",
              "731  16.100000  1197.0   74.0   NaN        NaN   1.75   14      maruti   \n",
              "747  12.831053  2179.0  187.7   NaN        NaN  26.50   12  land rover   \n",
              "\n",
              "           Model   Series  log_Price  log_Kilometers_Driven  \n",
              "194         city  1.5 gxi   1.081805              11.002200  \n",
              "208        swift  1.3 vxi   0.746688              10.645449  \n",
              "229         figo   diesel   1.280934              11.162460  \n",
              "731        swift  1.3 vxi   0.559616              11.490680  \n",
              "747  range rover    3.0 d   3.277145              10.915107  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7d327fc2-7cbf-41ca-936d-ad8172e74a50\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>Model</th>\n",
              "      <th>Series</th>\n",
              "      <th>log_Price</th>\n",
              "      <th>log_Kilometers_Driven</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>60006</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>16.585121</td>\n",
              "      <td>1497.0</td>\n",
              "      <td>98.6</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.95</td>\n",
              "      <td>13</td>\n",
              "      <td>honda</td>\n",
              "      <td>city</td>\n",
              "      <td>1.5 gxi</td>\n",
              "      <td>1.081805</td>\n",
              "      <td>11.002200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>208</th>\n",
              "      <td>Kolkata</td>\n",
              "      <td>42001</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>16.100000</td>\n",
              "      <td>1197.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.11</td>\n",
              "      <td>10</td>\n",
              "      <td>maruti</td>\n",
              "      <td>swift</td>\n",
              "      <td>1.3 vxi</td>\n",
              "      <td>0.746688</td>\n",
              "      <td>10.645449</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>229</th>\n",
              "      <td>Bangalore</td>\n",
              "      <td>70436</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.541013</td>\n",
              "      <td>1498.0</td>\n",
              "      <td>99.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.60</td>\n",
              "      <td>5</td>\n",
              "      <td>ford</td>\n",
              "      <td>figo</td>\n",
              "      <td>diesel</td>\n",
              "      <td>1.280934</td>\n",
              "      <td>11.162460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>731</th>\n",
              "      <td>Chennai</td>\n",
              "      <td>97800</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>Third</td>\n",
              "      <td>16.100000</td>\n",
              "      <td>1197.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.75</td>\n",
              "      <td>14</td>\n",
              "      <td>maruti</td>\n",
              "      <td>swift</td>\n",
              "      <td>1.3 vxi</td>\n",
              "      <td>0.559616</td>\n",
              "      <td>11.490680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>747</th>\n",
              "      <td>Mumbai</td>\n",
              "      <td>55001</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Automatic</td>\n",
              "      <td>Second</td>\n",
              "      <td>12.831053</td>\n",
              "      <td>2179.0</td>\n",
              "      <td>187.7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>26.50</td>\n",
              "      <td>12</td>\n",
              "      <td>land rover</td>\n",
              "      <td>range rover</td>\n",
              "      <td>3.0 d</td>\n",
              "      <td>3.277145</td>\n",
              "      <td>10.915107</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d327fc2-7cbf-41ca-936d-ad8172e74a50')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7d327fc2-7cbf-41ca-936d-ad8172e74a50 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7d327fc2-7cbf-41ca-936d-ad8172e74a50');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6d783f56-855b-4757-8234-be42fecdf432\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6d783f56-855b-4757-8234-be42fecdf432')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6d783f56-855b-4757-8234-be42fecdf432 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 84
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Determining the mode value of seats by Brand and imputing to missing Seat values\n",
        "def get_mode(series):\n",
        "    if not series.mode().empty:\n",
        "        return series.mode().iloc[0]\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "df['Seats'] = df.groupby('Brand')['Seats'].transform(lambda x: x.fillna(get_mode(x)))"
      ],
      "metadata": {
        "id": "Q3sLDLVEiQqr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Changing seats back to object\n",
        "df['Seats'] = df['Seats'].astype('object')"
      ],
      "metadata": {
        "id": "m8NzaZkMHrxo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The mode of seats by Brand was determined and then imputed to the missing values."
      ],
      "metadata": {
        "id": "JrOx8NSsbu3U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping New_price due to the high percentage of missing values\n",
        "df.drop(columns = ['New_price'], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "S_JKipBQtqtQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* New_Price with 86% of the data missing and the numerous seemingly more relevant more features that contribute to a used car price, it seems appropriate to drop this column."
      ],
      "metadata": {
        "id": "6ckeZ3Z1bCll"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Seperating the missing value rows of the dependent variable Price and log_Price\n",
        "nan_price_df = df[df['Price'].isna()]\n",
        "nan_log_price_df = df[df['log_Price'].isna()]\n",
        "\n",
        "df = df.dropna(subset=['Price','log_Price'])"
      ],
      "metadata": {
        "id": "pSLa1WtRpBDM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping Price for modeling\n",
        "df = df.drop(columns=['Price'], axis = 1)"
      ],
      "metadata": {
        "id": "1rnP6g6cqHjp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* There are 1234 missing values for the dependent variable Price, these values can not be imputed and therefore will be dropped, from log_Price as well.\n",
        "  * The rows with the missing dependent variable were retained for possible additonal use.\n",
        "* As the log_Price has shown to be beneficial, at this time we will also drop Price as well."
      ],
      "metadata": {
        "id": "mzRtSPKVbnCO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Confirming no null values remain\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TBAVE-zGFn9G",
        "outputId": "1fdc8ecc-dfb6-4197-a870-bdd962c01d76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Location                 0\n",
              "Kilometers_Driven        0\n",
              "Fuel_Type                0\n",
              "Transmission             0\n",
              "Owner_Type               0\n",
              "Mileage                  0\n",
              "Engine                   0\n",
              "Power                    0\n",
              "Seats                    0\n",
              "Age                      0\n",
              "Brand                    0\n",
              "Model                    0\n",
              "Series                   0\n",
              "log_Price                0\n",
              "log_Kilometers_Driven    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Important Insights from EDA and Data Preprocessing**\n",
        "\n",
        "What are the the most important observations and insights from the data based on the EDA and Data Preprocessing performed?\n",
        "\n",
        "  * Answer:\n",
        "    * From preprocessing it was apparent the data needed to be cleaned up an average amount. This included imputing missing values, seperating Brand and Model names, dropping columns with low value, removing outliers, taking the log of heavily skewed variables, and removing duplicates.  \n",
        "    * Many insights about the data were found during exploratory data analysis.\n",
        "      * Engine and Power are highly correlated.\n",
        "      * Diesel has the highest Power of the Fuel_Types\n",
        "      * Increased Age, Mileage, and Kilometers_Driven decrease the Price.\n",
        "      * Manual Transmissions are lower in Price.\n",
        "      * Coimbatore has the high average Prices and sum of total Prices of all Locations.\n",
        "      * Kolkata has the lowest average Price, Age, Kilometers_Driven, and sum of total Prices."
      ],
      "metadata": {
        "id": "bmXurf90CjuT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question:\n",
        "\n",
        "Why we should drop 'Name', 'Price', 'price_log', 'Kilometers_Driven' from X before splitting?\n",
        "\n",
        "* Answer: These columns will not be needed in the X_train data.\n",
        "  * Name has too many unique values, the Brand was seperated from this and will be utilized during modeling.\n",
        "  * Price won't be used during modeling, it was decided due to the skew that the log of Price would be taken.\n",
        "  * log_Price is dropped as it is the dependent variable.\n",
        "  * Kilometers_Driven was dropped because due to the skew the log was taken and will be used during modeling.\n"
      ],
      "metadata": {
        "id": "SQnluUdtDags"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Final Feature Feature Engineering and Preparing the data for Modeling**"
      ],
      "metadata": {
        "id": "97r8k5o4ra2F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns = ['Kilometers_Driven', 'Series', 'Model'], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "yHSU7nOBt-dp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Kilometers_Driven will be dropped and log_Kilometers_Driven will be used for the model.\n",
        "* Series contains 1628 unique values and not useful for modeling purposes.\n",
        "* I am reluctantly choosing to drop Model.  I made many attempts to utilize this information, but ultimately the application of the information for this model and project will be more effective at a less granular level.  Creating a senario where 268 levels of significace for the various Models found feels less useful.\n",
        "  * While the dataset is not small, the distribution of Models puts many Models at 1 representative, if this dataset was much much larger, there would be more nuiance for the model to pick up on, and there would be more value in the retention of this column."
      ],
      "metadata": {
        "id": "_ExCnYleckLP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for duplicates after dropping multiple columns\n",
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PGIRRTHX6twc",
        "outputId": "7d1cd96d-dd3d-4699-e916-6a63a3846e10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Locating the duplicates\n",
        "duplicates = df.duplicated(keep=False)\n",
        "df[duplicates]\n"
      ],
      "metadata": {
        "id": "WCSab_jW4-L2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "fdad974a-fb33-4c1e-dcbe-f0223c25f4e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Location Fuel_Type Transmission Owner_Type  Mileage  Engine  Power  \\\n",
              "940     Kolkata    Diesel       Manual      First    27.39  1248.0   74.0   \n",
              "2936    Kolkata    Diesel       Manual      First    27.39  1248.0   74.0   \n",
              "3618  Hyderabad    Petrol       Manual      First    19.70   796.0   46.3   \n",
              "4775  Hyderabad    Petrol       Manual      First    19.70   796.0   46.3   \n",
              "\n",
              "     Seats  Age   Brand  log_Price  log_Kilometers_Driven  \n",
              "940      5    4  maruti   1.871802              10.275051  \n",
              "2936     5    4  maruti   1.871802              10.275051  \n",
              "3618     5   13  maruti   0.559616              10.862742  \n",
              "4775     5   13  maruti   0.559616              10.862742  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c507fcc0-323a-4402-b624-77cc476ea270\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Location</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>Age</th>\n",
              "      <th>Brand</th>\n",
              "      <th>log_Price</th>\n",
              "      <th>log_Kilometers_Driven</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>940</th>\n",
              "      <td>Kolkata</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>27.39</td>\n",
              "      <td>1248.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>maruti</td>\n",
              "      <td>1.871802</td>\n",
              "      <td>10.275051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2936</th>\n",
              "      <td>Kolkata</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>27.39</td>\n",
              "      <td>1248.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>maruti</td>\n",
              "      <td>1.871802</td>\n",
              "      <td>10.275051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3618</th>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.70</td>\n",
              "      <td>796.0</td>\n",
              "      <td>46.3</td>\n",
              "      <td>5</td>\n",
              "      <td>13</td>\n",
              "      <td>maruti</td>\n",
              "      <td>0.559616</td>\n",
              "      <td>10.862742</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4775</th>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.70</td>\n",
              "      <td>796.0</td>\n",
              "      <td>46.3</td>\n",
              "      <td>5</td>\n",
              "      <td>13</td>\n",
              "      <td>maruti</td>\n",
              "      <td>0.559616</td>\n",
              "      <td>10.862742</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c507fcc0-323a-4402-b624-77cc476ea270')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c507fcc0-323a-4402-b624-77cc476ea270 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c507fcc0-323a-4402-b624-77cc476ea270');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dd9d7d17-e6e2-4457-9fd3-7ad8dca23e08\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dd9d7d17-e6e2-4457-9fd3-7ad8dca23e08')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dd9d7d17-e6e2-4457-9fd3-7ad8dca23e08 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[duplicates]\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Hyderabad\",\n          \"Kolkata\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"First\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.439823570068223,\n        \"min\": 19.7,\n        \"max\": 27.39,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          19.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 260.96232167371085,\n        \"min\": 796.0,\n        \"max\": 1248.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          796.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.992602456552635,\n        \"min\": 46.3,\n        \"max\": 74.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          46.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 4,\n        \"max\": 13,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"maruti\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7575911648965804,\n        \"min\": 0.5596157879354227,\n        \"max\": 1.8718021769015913,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.5596157879354227\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"log_Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3393034848086681,\n        \"min\": 10.275051108968611,\n        \"max\": 10.8627419838424,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          10.8627419838424\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Determining if these are duplicate records\n",
        "df2 = data.copy()\n",
        "dup_row= [942, 2940, 3623, 4781]\n",
        "df2.loc[dup_row]"
      ],
      "metadata": {
        "id": "eDdCcCA-5aVJ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "outputId": "9c481830-71d8-4505-ecf8-88f7f19c21af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      S.No.                        Name   Location  Year  Kilometers_Driven  \\\n",
              "942     942  Maruti Baleno Alpha Diesel    Kolkata  2016              29000   \n",
              "2940   2940     Maruti Baleno Alpha 1.3    Kolkata  2016              29000   \n",
              "3623   3623             Maruti Alto LXi  Hyderabad  2007              52195   \n",
              "4781   4781             Maruti Alto LXI  Hyderabad  2007              52195   \n",
              "\n",
              "     Fuel_Type Transmission Owner_Type  Mileage  Engine  Power  Seats  \\\n",
              "942     Diesel       Manual      First    27.39  1248.0   74.0    5.0   \n",
              "2940    Diesel       Manual      First    27.39  1248.0   74.0    5.0   \n",
              "3623    Petrol       Manual      First    19.70   796.0   46.3    5.0   \n",
              "4781    Petrol       Manual      First    19.70   796.0   46.3    5.0   \n",
              "\n",
              "      New_price  Price  \n",
              "942        9.53   6.50  \n",
              "2940        NaN   6.50  \n",
              "3623        NaN   1.75  \n",
              "4781        NaN   1.75  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9dfa22d0-073c-4b1a-943f-d9ae144758e6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>S.No.</th>\n",
              "      <th>Name</th>\n",
              "      <th>Location</th>\n",
              "      <th>Year</th>\n",
              "      <th>Kilometers_Driven</th>\n",
              "      <th>Fuel_Type</th>\n",
              "      <th>Transmission</th>\n",
              "      <th>Owner_Type</th>\n",
              "      <th>Mileage</th>\n",
              "      <th>Engine</th>\n",
              "      <th>Power</th>\n",
              "      <th>Seats</th>\n",
              "      <th>New_price</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>942</th>\n",
              "      <td>942</td>\n",
              "      <td>Maruti Baleno Alpha Diesel</td>\n",
              "      <td>Kolkata</td>\n",
              "      <td>2016</td>\n",
              "      <td>29000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>27.39</td>\n",
              "      <td>1248.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.53</td>\n",
              "      <td>6.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2940</th>\n",
              "      <td>2940</td>\n",
              "      <td>Maruti Baleno Alpha 1.3</td>\n",
              "      <td>Kolkata</td>\n",
              "      <td>2016</td>\n",
              "      <td>29000</td>\n",
              "      <td>Diesel</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>27.39</td>\n",
              "      <td>1248.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3623</th>\n",
              "      <td>3623</td>\n",
              "      <td>Maruti Alto LXi</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>2007</td>\n",
              "      <td>52195</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.70</td>\n",
              "      <td>796.0</td>\n",
              "      <td>46.3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4781</th>\n",
              "      <td>4781</td>\n",
              "      <td>Maruti Alto LXI</td>\n",
              "      <td>Hyderabad</td>\n",
              "      <td>2007</td>\n",
              "      <td>52195</td>\n",
              "      <td>Petrol</td>\n",
              "      <td>Manual</td>\n",
              "      <td>First</td>\n",
              "      <td>19.70</td>\n",
              "      <td>796.0</td>\n",
              "      <td>46.3</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.75</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9dfa22d0-073c-4b1a-943f-d9ae144758e6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9dfa22d0-073c-4b1a-943f-d9ae144758e6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9dfa22d0-073c-4b1a-943f-d9ae144758e6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-16590694-72e1-4b3e-8928-e597cb47a57c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-16590694-72e1-4b3e-8928-e597cb47a57c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-16590694-72e1-4b3e-8928-e597cb47a57c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df2\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"S.No.\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1610,\n        \"min\": 942,\n        \"max\": 4781,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2940,\n          4781,\n          942\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Maruti Baleno Alpha 1.3\",\n          \"Maruti Alto LXI\",\n          \"Maruti Baleno Alpha Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Location\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Hyderabad\",\n          \"Kolkata\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 2007,\n        \"max\": 2016,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2007,\n          2016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Kilometers_Driven\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13391,\n        \"min\": 29000,\n        \"max\": 52195,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          52195,\n          29000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fuel_Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Petrol\",\n          \"Diesel\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Transmission\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Manual\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Owner_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"First\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mileage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.439823570068223,\n        \"min\": 19.7,\n        \"max\": 27.39,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          19.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Engine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 260.96232167371085,\n        \"min\": 796.0,\n        \"max\": 1248.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          796.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.992602456552635,\n        \"min\": 46.3,\n        \"max\": 74.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          46.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Seats\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 5.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9.53,\n        \"max\": 9.53,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9.53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.742413778650722,\n        \"min\": 1.75,\n        \"max\": 6.5,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping duplicates\n",
        "df.drop([942, 3623], inplace=True)"
      ],
      "metadata": {
        "id": "o0oMacd67mTM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* After dropping multiple columns two rows have become duplicates.  \n",
        "* Pulling the original rows shows that these are actually duplicate records, the chance that all columns, except two, for each of the vehicles occurred twice seems highly unlikley.\n",
        "  * The only differences were in the S.No. and the Name which is still the same, just slightly different. The issue appears to be a recording error, therefore the duplicates will be removed."
      ],
      "metadata": {
        "id": "upx_aE1-faaT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Seperating independent and dependent variables\n",
        "X = df.drop(['log_Price'], axis = 1)\n",
        "y = df['log_Price']"
      ],
      "metadata": {
        "id": "wc1mV9kWraYN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#  Adding an intercept term to increase stability in the model\n",
        "X = sm.add_constant(X)"
      ],
      "metadata": {
        "id": "akuMJhvOtkx0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Using One Hot Encoding on the categorical variables\n",
        "X_ohe = pd.get_dummies(X,\n",
        "               columns = X.select_dtypes(include = ['object']).columns.to_list(),\n",
        "               drop_first = True,\n",
        ")"
      ],
      "metadata": {
        "id": "Dm3O4SZLtnrj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Boolean to binary numbers\n",
        "X_ohe = X_ohe.astype(int)"
      ],
      "metadata": {
        "id": "jTkp4JXbteQV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Spliting the dataset into Train and Test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_ohe, y, test_size = 0.3, random_state = 0)"
      ],
      "metadata": {
        "id": "FU4-d7M00OMy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Preprocessing Multicollinearity check\n",
        "VIF_df = pd.DataFrame()\n",
        "VIF_df['Features'] = X_train.columns\n",
        "VIF_df['VIF'] = [variance_inflation_factor(X_train, i) for i in range(X_train.shape[1])]\n",
        "VIF_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "4cJTsp540TBN",
        "outputId": "cd4af82c-7859-4ee9-e08f-2b5c264e48e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Features          VIF\n",
              "0                       const  4758.569340\n",
              "1                     Mileage     3.757858\n",
              "2                      Engine    10.701412\n",
              "3                       Power     9.354358\n",
              "4                         Age     2.114097\n",
              "5       log_Kilometers_Driven     1.660173\n",
              "6          Location_Bangalore     2.457644\n",
              "7            Location_Chennai     2.874856\n",
              "8         Location_Coimbatore     3.404980\n",
              "9              Location_Delhi     3.163203\n",
              "10         Location_Hyderabad     3.710750\n",
              "11            Location_Jaipur     2.606805\n",
              "12             Location_Kochi     3.577824\n",
              "13           Location_Kolkata     3.085469\n",
              "14            Location_Mumbai     3.970754\n",
              "15              Location_Pune     3.456386\n",
              "16            Fuel_Type_Green     1.081650\n",
              "17           Fuel_Type_Petrol     2.768577\n",
              "18        Transmission_Manual     2.283658\n",
              "19  Owner_Type_Fourth & Above     1.015227\n",
              "20          Owner_Type_Second     1.172083\n",
              "21           Owner_Type_Third     1.127529\n",
              "22                    Seats_5     9.505493\n",
              "23                 Seats_6-10    11.225433\n",
              "24                 Brand_audi   161.964943\n",
              "25              Brand_bentley          NaN\n",
              "26                  Brand_bmw   188.751918\n",
              "27            Brand_chevrolet    84.004653\n",
              "28               Brand_datsun    10.222241\n",
              "29                 Brand_fiat    18.301495\n",
              "30                Brand_force     3.052264\n",
              "31                 Brand_ford   199.071647\n",
              "32                Brand_honda   390.559560\n",
              "33              Brand_hyundai   649.824508\n",
              "34                Brand_isuzu     4.075001\n",
              "35               Brand_jaguar    30.689484\n",
              "36                 Brand_jeep    11.244398\n",
              "37          Brand_lamborghini          NaN\n",
              "38           Brand_land rover    41.661333\n",
              "39             Brand_mahindra   181.271427\n",
              "40               Brand_maruti   703.754693\n",
              "41        Brand_mercedes-benz   212.356996\n",
              "42          Brand_mini cooper    20.477356\n",
              "43           Brand_mitsubishi    20.260996\n",
              "44               Brand_nissan    64.413395\n",
              "45              Brand_porsche    15.618029\n",
              "46              Brand_renault   104.756140\n",
              "47                Brand_skoda   124.110627\n",
              "48                Brand_smart     2.049266\n",
              "49                 Brand_tata   121.116819\n",
              "50               Brand_toyota   275.330317\n",
              "51           Brand_volkswagen   215.738071\n",
              "52                Brand_volvo    15.335248"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4c371481-57ee-495b-8cd6-cf650690c0e4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Features</th>\n",
              "      <th>VIF</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>const</td>\n",
              "      <td>4758.569340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Mileage</td>\n",
              "      <td>3.757858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Engine</td>\n",
              "      <td>10.701412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Power</td>\n",
              "      <td>9.354358</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Age</td>\n",
              "      <td>2.114097</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>log_Kilometers_Driven</td>\n",
              "      <td>1.660173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Location_Bangalore</td>\n",
              "      <td>2.457644</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Location_Chennai</td>\n",
              "      <td>2.874856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Location_Coimbatore</td>\n",
              "      <td>3.404980</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Location_Delhi</td>\n",
              "      <td>3.163203</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Location_Hyderabad</td>\n",
              "      <td>3.710750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Location_Jaipur</td>\n",
              "      <td>2.606805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Location_Kochi</td>\n",
              "      <td>3.577824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Location_Kolkata</td>\n",
              "      <td>3.085469</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Location_Mumbai</td>\n",
              "      <td>3.970754</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Location_Pune</td>\n",
              "      <td>3.456386</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Fuel_Type_Green</td>\n",
              "      <td>1.081650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Fuel_Type_Petrol</td>\n",
              "      <td>2.768577</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Transmission_Manual</td>\n",
              "      <td>2.283658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Owner_Type_Fourth &amp; Above</td>\n",
              "      <td>1.015227</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Owner_Type_Second</td>\n",
              "      <td>1.172083</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Owner_Type_Third</td>\n",
              "      <td>1.127529</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Seats_5</td>\n",
              "      <td>9.505493</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Seats_6-10</td>\n",
              "      <td>11.225433</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Brand_audi</td>\n",
              "      <td>161.964943</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Brand_bentley</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Brand_bmw</td>\n",
              "      <td>188.751918</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Brand_chevrolet</td>\n",
              "      <td>84.004653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Brand_datsun</td>\n",
              "      <td>10.222241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Brand_fiat</td>\n",
              "      <td>18.301495</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>Brand_force</td>\n",
              "      <td>3.052264</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>Brand_ford</td>\n",
              "      <td>199.071647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>Brand_honda</td>\n",
              "      <td>390.559560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Brand_hyundai</td>\n",
              "      <td>649.824508</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>Brand_isuzu</td>\n",
              "      <td>4.075001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>Brand_jaguar</td>\n",
              "      <td>30.689484</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>Brand_jeep</td>\n",
              "      <td>11.244398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>Brand_lamborghini</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>Brand_land rover</td>\n",
              "      <td>41.661333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>Brand_mahindra</td>\n",
              "      <td>181.271427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>Brand_maruti</td>\n",
              "      <td>703.754693</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>Brand_mercedes-benz</td>\n",
              "      <td>212.356996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>Brand_mini cooper</td>\n",
              "      <td>20.477356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>Brand_mitsubishi</td>\n",
              "      <td>20.260996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>Brand_nissan</td>\n",
              "      <td>64.413395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Brand_porsche</td>\n",
              "      <td>15.618029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>Brand_renault</td>\n",
              "      <td>104.756140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>Brand_skoda</td>\n",
              "      <td>124.110627</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>Brand_smart</td>\n",
              "      <td>2.049266</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>Brand_tata</td>\n",
              "      <td>121.116819</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>Brand_toyota</td>\n",
              "      <td>275.330317</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>Brand_volkswagen</td>\n",
              "      <td>215.738071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>Brand_volvo</td>\n",
              "      <td>15.335248</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c371481-57ee-495b-8cd6-cf650690c0e4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4c371481-57ee-495b-8cd6-cf650690c0e4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4c371481-57ee-495b-8cd6-cf650690c0e4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-35dc7d15-c907-461b-9c6a-78ef47d7d184\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-35dc7d15-c907-461b-9c6a-78ef47d7d184')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-35dc7d15-c907-461b-9c6a-78ef47d7d184 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_435ac72b-929f-43b6-b5a8-bdda4b63e60c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('VIF_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_435ac72b-929f-43b6-b5a8-bdda4b63e60c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('VIF_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "VIF_df",
              "summary": "{\n  \"name\": \"VIF_df\",\n  \"rows\": 53,\n  \"fields\": [\n    {\n      \"column\": \"Features\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 53,\n        \"samples\": [\n          \"Owner_Type_Fourth & Above\",\n          \"Brand_mercedes-benz\",\n          \"Brand_skoda\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VIF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 672.0530341608413,\n        \"min\": 1.0152273327979338,\n        \"max\": 4758.56934017911,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          15.618029080065426,\n          20.477356261778006,\n          2.0492660425774947\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping high multicollinearity\n",
        "X_train.drop(columns = ['Engine'], axis = 0, inplace = True)\n",
        "X_test.drop(columns = ['Engine'], axis = 0, inplace = True)"
      ],
      "metadata": {
        "id": "86gpIxceFdDD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Engine's high correlation to Power previously shown explains the high multicollinearity value."
      ],
      "metadata": {
        "id": "S6pj-NbehZW0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the NaN value source\n",
        "constant_columns = [col for col in X_train.columns if X_train[col].nunique() == 1]\n",
        "print(\"Constant columns:\", constant_columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VUnGiwggER2-",
        "outputId": "fabdb7b0-c7ea-41d9-e028-12e6e37693a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Constant columns: ['const', 'Brand_bentley', 'Brand_lamborghini']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Dropping the Brands that became constant columns after OHE\n",
        "X_train.drop(columns = ['Brand_bentley'], axis = 0, inplace = True)\n",
        "X_test.drop(columns = ['Brand_bentley'], axis = 0, inplace = True)\n",
        "\n",
        "X_train.drop(columns = ['Brand_lamborghini'], axis = 0, inplace = True)\n",
        "X_test.drop(columns = ['Brand_lamborghini'], axis = 0, inplace = True)"
      ],
      "metadata": {
        "id": "OtoO_IdtERO1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The source of the NaN values in the VIF table was determined to be from the result of the OHE causing Bentley and Lamborghini to become a constant variable. After many alternative solutions were attempted, the only effective one was removing these columns.  "
      ],
      "metadata": {
        "id": "ypNKU3CaiKRG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Preprocessing Multicollinearity check\n",
        "VIF_df = pd.DataFrame()\n",
        "VIF_df['Features'] = X_train.columns\n",
        "VIF_df['VIF'] = [variance_inflation_factor(X_train, i) for i in range(X_train.shape[1])]\n",
        "VIF_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fzRv354aFpI7",
        "outputId": "42e4166b-782c-4994-b125-37d84ba66b25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Features          VIF\n",
              "0                       const  4694.035238\n",
              "1                     Mileage     3.318125\n",
              "2                       Power     4.319162\n",
              "3                         Age     2.099742\n",
              "4       log_Kilometers_Driven     1.660113\n",
              "5          Location_Bangalore     2.457527\n",
              "6            Location_Chennai     2.874727\n",
              "7         Location_Coimbatore     3.404438\n",
              "8              Location_Delhi     3.163064\n",
              "9          Location_Hyderabad     3.710470\n",
              "10            Location_Jaipur     2.606802\n",
              "11             Location_Kochi     3.577809\n",
              "12           Location_Kolkata     3.085445\n",
              "13            Location_Mumbai     3.969842\n",
              "14              Location_Pune     3.456027\n",
              "15            Fuel_Type_Green     1.080824\n",
              "16           Fuel_Type_Petrol     2.300644\n",
              "17        Transmission_Manual     2.282976\n",
              "18  Owner_Type_Fourth & Above     1.015142\n",
              "19          Owner_Type_Second     1.171527\n",
              "20           Owner_Type_Third     1.127393\n",
              "21                    Seats_5     9.505460\n",
              "22                 Seats_6-10    11.029068\n",
              "23                 Brand_audi   161.887435\n",
              "24                  Brand_bmw   188.652935\n",
              "25            Brand_chevrolet    83.984663\n",
              "26               Brand_datsun    10.220594\n",
              "27                 Brand_fiat    18.292802\n",
              "28                Brand_force     3.052170\n",
              "29                 Brand_ford   199.068182\n",
              "30                Brand_honda   390.535856\n",
              "31              Brand_hyundai   649.700929\n",
              "32                Brand_isuzu     4.072277\n",
              "33               Brand_jaguar    30.674799\n",
              "34                 Brand_jeep    11.235573\n",
              "35           Brand_land rover    41.653978\n",
              "36             Brand_mahindra   181.267336\n",
              "37               Brand_maruti   703.631346\n",
              "38        Brand_mercedes-benz   212.321235\n",
              "39          Brand_mini cooper    20.472668\n",
              "40           Brand_mitsubishi    20.257562\n",
              "41               Brand_nissan    64.412381\n",
              "42              Brand_porsche    15.617912\n",
              "43              Brand_renault   104.735937\n",
              "44                Brand_skoda   124.106300\n",
              "45                Brand_smart     2.043258\n",
              "46                 Brand_tata   121.106464\n",
              "47               Brand_toyota   275.286987\n",
              "48           Brand_volkswagen   215.714923\n",
              "49                Brand_volvo    15.324982"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-636a6cbc-7d28-43b1-bb1a-f52eed7a490c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Features</th>\n",
              "      <th>VIF</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>const</td>\n",
              "      <td>4694.035238</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Mileage</td>\n",
              "      <td>3.318125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Power</td>\n",
              "      <td>4.319162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Age</td>\n",
              "      <td>2.099742</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>log_Kilometers_Driven</td>\n",
              "      <td>1.660113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Location_Bangalore</td>\n",
              "      <td>2.457527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Location_Chennai</td>\n",
              "      <td>2.874727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Location_Coimbatore</td>\n",
              "      <td>3.404438</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Location_Delhi</td>\n",
              "      <td>3.163064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Location_Hyderabad</td>\n",
              "      <td>3.710470</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Location_Jaipur</td>\n",
              "      <td>2.606802</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Location_Kochi</td>\n",
              "      <td>3.577809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Location_Kolkata</td>\n",
              "      <td>3.085445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Location_Mumbai</td>\n",
              "      <td>3.969842</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Location_Pune</td>\n",
              "      <td>3.456027</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Fuel_Type_Green</td>\n",
              "      <td>1.080824</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Fuel_Type_Petrol</td>\n",
              "      <td>2.300644</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Transmission_Manual</td>\n",
              "      <td>2.282976</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Owner_Type_Fourth &amp; Above</td>\n",
              "      <td>1.015142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Owner_Type_Second</td>\n",
              "      <td>1.171527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Owner_Type_Third</td>\n",
              "      <td>1.127393</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Seats_5</td>\n",
              "      <td>9.505460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Seats_6-10</td>\n",
              "      <td>11.029068</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Brand_audi</td>\n",
              "      <td>161.887435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Brand_bmw</td>\n",
              "      <td>188.652935</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Brand_chevrolet</td>\n",
              "      <td>83.984663</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Brand_datsun</td>\n",
              "      <td>10.220594</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Brand_fiat</td>\n",
              "      <td>18.292802</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Brand_force</td>\n",
              "      <td>3.052170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Brand_ford</td>\n",
              "      <td>199.068182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>Brand_honda</td>\n",
              "      <td>390.535856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>Brand_hyundai</td>\n",
              "      <td>649.700929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>Brand_isuzu</td>\n",
              "      <td>4.072277</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Brand_jaguar</td>\n",
              "      <td>30.674799</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>Brand_jeep</td>\n",
              "      <td>11.235573</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>Brand_land rover</td>\n",
              "      <td>41.653978</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>Brand_mahindra</td>\n",
              "      <td>181.267336</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>Brand_maruti</td>\n",
              "      <td>703.631346</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>Brand_mercedes-benz</td>\n",
              "      <td>212.321235</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>Brand_mini cooper</td>\n",
              "      <td>20.472668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>Brand_mitsubishi</td>\n",
              "      <td>20.257562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>Brand_nissan</td>\n",
              "      <td>64.412381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>Brand_porsche</td>\n",
              "      <td>15.617912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>Brand_renault</td>\n",
              "      <td>104.735937</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>Brand_skoda</td>\n",
              "      <td>124.106300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>Brand_smart</td>\n",
              "      <td>2.043258</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>Brand_tata</td>\n",
              "      <td>121.106464</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>Brand_toyota</td>\n",
              "      <td>275.286987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>Brand_volkswagen</td>\n",
              "      <td>215.714923</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>Brand_volvo</td>\n",
              "      <td>15.324982</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-636a6cbc-7d28-43b1-bb1a-f52eed7a490c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-636a6cbc-7d28-43b1-bb1a-f52eed7a490c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-636a6cbc-7d28-43b1-bb1a-f52eed7a490c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-10fdd002-863d-49e5-9de9-574602066394\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-10fdd002-863d-49e5-9de9-574602066394')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-10fdd002-863d-49e5-9de9-574602066394 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_7a97b95a-8f5f-4398-9347-d95f1dd57020\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('VIF_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7a97b95a-8f5f-4398-9347-d95f1dd57020 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('VIF_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "VIF_df",
              "summary": "{\n  \"name\": \"VIF_df\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"Features\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"Location_Mumbai\",\n          \"Brand_mini cooper\",\n          \"Brand_honda\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VIF\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 669.613857585444,\n        \"min\": 1.01514214793711,\n        \"max\": 4694.035238128351,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          3.9698415931735673,\n          20.472668151439755,\n          390.5358564662841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* All values are <5, excluding OHE values."
      ],
      "metadata": {
        "id": "-81rIKOEjJ_G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# OLS Regression Model\n",
        "model = sm.OLS(y_train, X_train).fit()\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "-_U_Fcx_2tEe",
        "outputId": "f6d70ac0-000e-422c-c14d-ff93cbe6a548"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<class 'statsmodels.iolib.summary.Summary'>\n",
              "\"\"\"\n",
              "                            OLS Regression Results                            \n",
              "==============================================================================\n",
              "Dep. Variable:              log_Price   R-squared:                       0.925\n",
              "Model:                            OLS   Adj. R-squared:                  0.924\n",
              "Method:                 Least Squares   F-statistic:                     1047.\n",
              "Date:                Thu, 11 Apr 2024   Prob (F-statistic):               0.00\n",
              "Time:                        15:21:04   Log-Likelihood:                 76.862\n",
              "No. Observations:                4207   AIC:                            -53.72\n",
              "Df Residuals:                    4157   BIC:                             263.5\n",
              "Df Model:                          49                                         \n",
              "Covariance Type:            nonrobust                                         \n",
              "=============================================================================================\n",
              "                                coef    std err          t      P>|t|      [0.025      0.975]\n",
              "---------------------------------------------------------------------------------------------\n",
              "const                         3.1623      0.252     12.525      0.000       2.667       3.657\n",
              "Mileage                      -0.0214      0.002    -13.269      0.000      -0.025      -0.018\n",
              "Power                         0.0062      0.000     42.859      0.000       0.006       0.006\n",
              "Age                          -0.1208      0.002    -73.899      0.000      -0.124      -0.118\n",
              "log_Kilometers_Driven        -0.0521      0.006     -8.681      0.000      -0.064      -0.040\n",
              "Location_Bangalore            0.1379      0.024      5.642      0.000       0.090       0.186\n",
              "Location_Chennai              0.0091      0.023      0.390      0.697      -0.037       0.055\n",
              "Location_Coimbatore           0.0793      0.022      3.541      0.000       0.035       0.123\n",
              "Location_Delhi               -0.0667      0.022     -2.966      0.003      -0.111      -0.023\n",
              "Location_Hyderabad            0.0878      0.022      4.038      0.000       0.045       0.130\n",
              "Location_Jaipur              -0.0760      0.024     -3.177      0.002      -0.123      -0.029\n",
              "Location_Kochi               -0.0583      0.022     -2.631      0.009      -0.102      -0.015\n",
              "Location_Kolkata             -0.2523      0.023    -11.067      0.000      -0.297      -0.208\n",
              "Location_Mumbai              -0.0558      0.022     -2.580      0.010      -0.098      -0.013\n",
              "Location_Pune                -0.0583      0.022     -2.631      0.009      -0.102      -0.015\n",
              "Fuel_Type_Green              -0.2640      0.035     -7.467      0.000      -0.333      -0.195\n",
              "Fuel_Type_Petrol             -0.3272      0.011    -29.179      0.000      -0.349      -0.305\n",
              "Transmission_Manual          -0.1259      0.012    -10.236      0.000      -0.150      -0.102\n",
              "Owner_Type_Fourth & Above     0.1070      0.098      1.087      0.277      -0.086       0.300\n",
              "Owner_Type_Second            -0.0662      0.011     -6.075      0.000      -0.088      -0.045\n",
              "Owner_Type_Third             -0.1150      0.032     -3.625      0.000      -0.177      -0.053\n",
              "Seats_5                       0.0361      0.031      1.151      0.250      -0.025       0.098\n",
              "Seats_6-10                    0.1699      0.036      4.776      0.000       0.100       0.240\n",
              "Brand_audi                    0.3844      0.243      1.582      0.114      -0.092       0.861\n",
              "Brand_bmw                     0.3629      0.243      1.493      0.136      -0.114       0.840\n",
              "Brand_chevrolet              -0.4955      0.243     -2.041      0.041      -0.972      -0.019\n",
              "Brand_datsun                 -0.6153      0.255     -2.413      0.016      -1.115      -0.115\n",
              "Brand_fiat                   -0.4900      0.248     -1.972      0.049      -0.977      -0.003\n",
              "Brand_force                  -0.0552      0.295     -0.187      0.852      -0.634       0.524\n",
              "Brand_ford                   -0.2391      0.242     -0.988      0.323      -0.714       0.235\n",
              "Brand_honda                  -0.1142      0.242     -0.472      0.637      -0.589       0.361\n",
              "Brand_hyundai                -0.1774      0.242     -0.733      0.463      -0.652       0.297\n",
              "Brand_isuzu                  -0.3416      0.279     -1.226      0.220      -0.888       0.205\n",
              "Brand_jaguar                  0.4364      0.247      1.769      0.077      -0.047       0.920\n",
              "Brand_jeep                   -0.0108      0.254     -0.042      0.966      -0.508       0.487\n",
              "Brand_land rover              0.6414      0.245      2.617      0.009       0.161       1.122\n",
              "Brand_mahindra               -0.3355      0.243     -1.383      0.167      -0.811       0.140\n",
              "Brand_maruti                 -0.1739      0.242     -0.719      0.472      -0.648       0.301\n",
              "Brand_mercedes-benz           0.4461      0.243      1.837      0.066      -0.030       0.922\n",
              "Brand_mini cooper             0.8458      0.249      3.401      0.001       0.358       1.333\n",
              "Brand_mitsubishi              0.0384      0.247      0.155      0.877      -0.447       0.523\n",
              "Brand_nissan                 -0.1745      0.244     -0.717      0.474      -0.652       0.303\n",
              "Brand_porsche                 0.1024      0.253      0.405      0.686      -0.393       0.598\n",
              "Brand_renault                -0.2377      0.243     -0.978      0.328      -0.714       0.239\n",
              "Brand_skoda                  -0.1043      0.243     -0.430      0.667      -0.580       0.372\n",
              "Brand_smart                  -0.1080      0.342     -0.316      0.752      -0.778       0.562\n",
              "Brand_tata                   -0.6646      0.243     -2.739      0.006      -1.140      -0.189\n",
              "Brand_toyota                  0.0666      0.242      0.275      0.783      -0.408       0.541\n",
              "Brand_volkswagen             -0.1954      0.242     -0.807      0.420      -0.670       0.279\n",
              "Brand_volvo                   0.2032      0.250      0.811      0.417      -0.288       0.694\n",
              "==============================================================================\n",
              "Omnibus:                     1250.367   Durbin-Watson:                   1.978\n",
              "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            27650.848\n",
              "Skew:                          -0.886   Prob(JB):                         0.00\n",
              "Kurtosis:                      15.434   Cond. No.                     4.37e+04\n",
              "==============================================================================\n",
              "\n",
              "Notes:\n",
              "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
              "[2] The condition number is large, 4.37e+04. This might indicate that there are\n",
              "strong multicollinearity or other numerical problems.\n",
              "\"\"\""
            ],
            "text/html": [
              "<table class=\"simpletable\">\n",
              "<caption>OLS Regression Results</caption>\n",
              "<tr>\n",
              "  <th>Dep. Variable:</th>        <td>log_Price</td>    <th>  R-squared:         </th> <td>   0.925</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.924</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   1047.</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Date:</th>             <td>Thu, 11 Apr 2024</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Time:</th>                 <td>15:21:04</td>     <th>  Log-Likelihood:    </th> <td>  76.862</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>No. Observations:</th>      <td>  4207</td>      <th>  AIC:               </th> <td>  -53.72</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Residuals:</th>          <td>  4157</td>      <th>  BIC:               </th> <td>   263.5</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Df Model:</th>              <td>    49</td>      <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "              <td></td>                 <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>const</th>                     <td>    3.1623</td> <td>    0.252</td> <td>   12.525</td> <td> 0.000</td> <td>    2.667</td> <td>    3.657</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Mileage</th>                   <td>   -0.0214</td> <td>    0.002</td> <td>  -13.269</td> <td> 0.000</td> <td>   -0.025</td> <td>   -0.018</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Power</th>                     <td>    0.0062</td> <td>    0.000</td> <td>   42.859</td> <td> 0.000</td> <td>    0.006</td> <td>    0.006</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Age</th>                       <td>   -0.1208</td> <td>    0.002</td> <td>  -73.899</td> <td> 0.000</td> <td>   -0.124</td> <td>   -0.118</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>log_Kilometers_Driven</th>     <td>   -0.0521</td> <td>    0.006</td> <td>   -8.681</td> <td> 0.000</td> <td>   -0.064</td> <td>   -0.040</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Bangalore</th>        <td>    0.1379</td> <td>    0.024</td> <td>    5.642</td> <td> 0.000</td> <td>    0.090</td> <td>    0.186</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Chennai</th>          <td>    0.0091</td> <td>    0.023</td> <td>    0.390</td> <td> 0.697</td> <td>   -0.037</td> <td>    0.055</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Coimbatore</th>       <td>    0.0793</td> <td>    0.022</td> <td>    3.541</td> <td> 0.000</td> <td>    0.035</td> <td>    0.123</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Delhi</th>            <td>   -0.0667</td> <td>    0.022</td> <td>   -2.966</td> <td> 0.003</td> <td>   -0.111</td> <td>   -0.023</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Hyderabad</th>        <td>    0.0878</td> <td>    0.022</td> <td>    4.038</td> <td> 0.000</td> <td>    0.045</td> <td>    0.130</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Jaipur</th>           <td>   -0.0760</td> <td>    0.024</td> <td>   -3.177</td> <td> 0.002</td> <td>   -0.123</td> <td>   -0.029</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Kochi</th>            <td>   -0.0583</td> <td>    0.022</td> <td>   -2.631</td> <td> 0.009</td> <td>   -0.102</td> <td>   -0.015</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Kolkata</th>          <td>   -0.2523</td> <td>    0.023</td> <td>  -11.067</td> <td> 0.000</td> <td>   -0.297</td> <td>   -0.208</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Mumbai</th>           <td>   -0.0558</td> <td>    0.022</td> <td>   -2.580</td> <td> 0.010</td> <td>   -0.098</td> <td>   -0.013</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Location_Pune</th>             <td>   -0.0583</td> <td>    0.022</td> <td>   -2.631</td> <td> 0.009</td> <td>   -0.102</td> <td>   -0.015</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Fuel_Type_Green</th>           <td>   -0.2640</td> <td>    0.035</td> <td>   -7.467</td> <td> 0.000</td> <td>   -0.333</td> <td>   -0.195</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Fuel_Type_Petrol</th>          <td>   -0.3272</td> <td>    0.011</td> <td>  -29.179</td> <td> 0.000</td> <td>   -0.349</td> <td>   -0.305</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Transmission_Manual</th>       <td>   -0.1259</td> <td>    0.012</td> <td>  -10.236</td> <td> 0.000</td> <td>   -0.150</td> <td>   -0.102</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Owner_Type_Fourth & Above</th> <td>    0.1070</td> <td>    0.098</td> <td>    1.087</td> <td> 0.277</td> <td>   -0.086</td> <td>    0.300</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Owner_Type_Second</th>         <td>   -0.0662</td> <td>    0.011</td> <td>   -6.075</td> <td> 0.000</td> <td>   -0.088</td> <td>   -0.045</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Owner_Type_Third</th>          <td>   -0.1150</td> <td>    0.032</td> <td>   -3.625</td> <td> 0.000</td> <td>   -0.177</td> <td>   -0.053</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Seats_5</th>                   <td>    0.0361</td> <td>    0.031</td> <td>    1.151</td> <td> 0.250</td> <td>   -0.025</td> <td>    0.098</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Seats_6-10</th>                <td>    0.1699</td> <td>    0.036</td> <td>    4.776</td> <td> 0.000</td> <td>    0.100</td> <td>    0.240</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_audi</th>                <td>    0.3844</td> <td>    0.243</td> <td>    1.582</td> <td> 0.114</td> <td>   -0.092</td> <td>    0.861</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_bmw</th>                 <td>    0.3629</td> <td>    0.243</td> <td>    1.493</td> <td> 0.136</td> <td>   -0.114</td> <td>    0.840</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_chevrolet</th>           <td>   -0.4955</td> <td>    0.243</td> <td>   -2.041</td> <td> 0.041</td> <td>   -0.972</td> <td>   -0.019</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_datsun</th>              <td>   -0.6153</td> <td>    0.255</td> <td>   -2.413</td> <td> 0.016</td> <td>   -1.115</td> <td>   -0.115</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_fiat</th>                <td>   -0.4900</td> <td>    0.248</td> <td>   -1.972</td> <td> 0.049</td> <td>   -0.977</td> <td>   -0.003</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_force</th>               <td>   -0.0552</td> <td>    0.295</td> <td>   -0.187</td> <td> 0.852</td> <td>   -0.634</td> <td>    0.524</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_ford</th>                <td>   -0.2391</td> <td>    0.242</td> <td>   -0.988</td> <td> 0.323</td> <td>   -0.714</td> <td>    0.235</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_honda</th>               <td>   -0.1142</td> <td>    0.242</td> <td>   -0.472</td> <td> 0.637</td> <td>   -0.589</td> <td>    0.361</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_hyundai</th>             <td>   -0.1774</td> <td>    0.242</td> <td>   -0.733</td> <td> 0.463</td> <td>   -0.652</td> <td>    0.297</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_isuzu</th>               <td>   -0.3416</td> <td>    0.279</td> <td>   -1.226</td> <td> 0.220</td> <td>   -0.888</td> <td>    0.205</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_jaguar</th>              <td>    0.4364</td> <td>    0.247</td> <td>    1.769</td> <td> 0.077</td> <td>   -0.047</td> <td>    0.920</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_jeep</th>                <td>   -0.0108</td> <td>    0.254</td> <td>   -0.042</td> <td> 0.966</td> <td>   -0.508</td> <td>    0.487</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_land rover</th>          <td>    0.6414</td> <td>    0.245</td> <td>    2.617</td> <td> 0.009</td> <td>    0.161</td> <td>    1.122</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_mahindra</th>            <td>   -0.3355</td> <td>    0.243</td> <td>   -1.383</td> <td> 0.167</td> <td>   -0.811</td> <td>    0.140</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_maruti</th>              <td>   -0.1739</td> <td>    0.242</td> <td>   -0.719</td> <td> 0.472</td> <td>   -0.648</td> <td>    0.301</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_mercedes-benz</th>       <td>    0.4461</td> <td>    0.243</td> <td>    1.837</td> <td> 0.066</td> <td>   -0.030</td> <td>    0.922</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_mini cooper</th>         <td>    0.8458</td> <td>    0.249</td> <td>    3.401</td> <td> 0.001</td> <td>    0.358</td> <td>    1.333</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_mitsubishi</th>          <td>    0.0384</td> <td>    0.247</td> <td>    0.155</td> <td> 0.877</td> <td>   -0.447</td> <td>    0.523</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_nissan</th>              <td>   -0.1745</td> <td>    0.244</td> <td>   -0.717</td> <td> 0.474</td> <td>   -0.652</td> <td>    0.303</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_porsche</th>             <td>    0.1024</td> <td>    0.253</td> <td>    0.405</td> <td> 0.686</td> <td>   -0.393</td> <td>    0.598</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_renault</th>             <td>   -0.2377</td> <td>    0.243</td> <td>   -0.978</td> <td> 0.328</td> <td>   -0.714</td> <td>    0.239</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_skoda</th>               <td>   -0.1043</td> <td>    0.243</td> <td>   -0.430</td> <td> 0.667</td> <td>   -0.580</td> <td>    0.372</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_smart</th>               <td>   -0.1080</td> <td>    0.342</td> <td>   -0.316</td> <td> 0.752</td> <td>   -0.778</td> <td>    0.562</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_tata</th>                <td>   -0.6646</td> <td>    0.243</td> <td>   -2.739</td> <td> 0.006</td> <td>   -1.140</td> <td>   -0.189</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_toyota</th>              <td>    0.0666</td> <td>    0.242</td> <td>    0.275</td> <td> 0.783</td> <td>   -0.408</td> <td>    0.541</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_volkswagen</th>          <td>   -0.1954</td> <td>    0.242</td> <td>   -0.807</td> <td> 0.420</td> <td>   -0.670</td> <td>    0.279</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Brand_volvo</th>               <td>    0.2032</td> <td>    0.250</td> <td>    0.811</td> <td> 0.417</td> <td>   -0.288</td> <td>    0.694</td>\n",
              "</tr>\n",
              "</table>\n",
              "<table class=\"simpletable\">\n",
              "<tr>\n",
              "  <th>Omnibus:</th>       <td>1250.367</td> <th>  Durbin-Watson:     </th> <td>   1.978</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>27650.848</td>\n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Skew:</th>           <td>-0.886</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
              "</tr>\n",
              "<tr>\n",
              "  <th>Kurtosis:</th>       <td>15.434</td>  <th>  Cond. No.          </th> <td>4.37e+04</td> \n",
              "</tr>\n",
              "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 4.37e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
            ],
            "text/latex": "\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}               &    log\\_Price    & \\textbf{  R-squared:         } &     0.925   \\\\\n\\textbf{Model:}                       &       OLS        & \\textbf{  Adj. R-squared:    } &     0.924   \\\\\n\\textbf{Method:}                      &  Least Squares   & \\textbf{  F-statistic:       } &     1047.   \\\\\n\\textbf{Date:}                        & Thu, 11 Apr 2024 & \\textbf{  Prob (F-statistic):} &     0.00    \\\\\n\\textbf{Time:}                        &     15:21:04     & \\textbf{  Log-Likelihood:    } &    76.862   \\\\\n\\textbf{No. Observations:}            &        4207      & \\textbf{  AIC:               } &    -53.72   \\\\\n\\textbf{Df Residuals:}                &        4157      & \\textbf{  BIC:               } &     263.5   \\\\\n\\textbf{Df Model:}                    &          49      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}             &    nonrobust     & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                                      & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const}                        &       3.1623  &        0.252     &    12.525  &         0.000        &        2.667    &        3.657     \\\\\n\\textbf{Mileage}                      &      -0.0214  &        0.002     &   -13.269  &         0.000        &       -0.025    &       -0.018     \\\\\n\\textbf{Power}                        &       0.0062  &        0.000     &    42.859  &         0.000        &        0.006    &        0.006     \\\\\n\\textbf{Age}                          &      -0.1208  &        0.002     &   -73.899  &         0.000        &       -0.124    &       -0.118     \\\\\n\\textbf{log\\_Kilometers\\_Driven}      &      -0.0521  &        0.006     &    -8.681  &         0.000        &       -0.064    &       -0.040     \\\\\n\\textbf{Location\\_Bangalore}          &       0.1379  &        0.024     &     5.642  &         0.000        &        0.090    &        0.186     \\\\\n\\textbf{Location\\_Chennai}            &       0.0091  &        0.023     &     0.390  &         0.697        &       -0.037    &        0.055     \\\\\n\\textbf{Location\\_Coimbatore}         &       0.0793  &        0.022     &     3.541  &         0.000        &        0.035    &        0.123     \\\\\n\\textbf{Location\\_Delhi}              &      -0.0667  &        0.022     &    -2.966  &         0.003        &       -0.111    &       -0.023     \\\\\n\\textbf{Location\\_Hyderabad}          &       0.0878  &        0.022     &     4.038  &         0.000        &        0.045    &        0.130     \\\\\n\\textbf{Location\\_Jaipur}             &      -0.0760  &        0.024     &    -3.177  &         0.002        &       -0.123    &       -0.029     \\\\\n\\textbf{Location\\_Kochi}              &      -0.0583  &        0.022     &    -2.631  &         0.009        &       -0.102    &       -0.015     \\\\\n\\textbf{Location\\_Kolkata}            &      -0.2523  &        0.023     &   -11.067  &         0.000        &       -0.297    &       -0.208     \\\\\n\\textbf{Location\\_Mumbai}             &      -0.0558  &        0.022     &    -2.580  &         0.010        &       -0.098    &       -0.013     \\\\\n\\textbf{Location\\_Pune}               &      -0.0583  &        0.022     &    -2.631  &         0.009        &       -0.102    &       -0.015     \\\\\n\\textbf{Fuel\\_Type\\_Green}            &      -0.2640  &        0.035     &    -7.467  &         0.000        &       -0.333    &       -0.195     \\\\\n\\textbf{Fuel\\_Type\\_Petrol}           &      -0.3272  &        0.011     &   -29.179  &         0.000        &       -0.349    &       -0.305     \\\\\n\\textbf{Transmission\\_Manual}         &      -0.1259  &        0.012     &   -10.236  &         0.000        &       -0.150    &       -0.102     \\\\\n\\textbf{Owner\\_Type\\_Fourth \\& Above} &       0.1070  &        0.098     &     1.087  &         0.277        &       -0.086    &        0.300     \\\\\n\\textbf{Owner\\_Type\\_Second}          &      -0.0662  &        0.011     &    -6.075  &         0.000        &       -0.088    &       -0.045     \\\\\n\\textbf{Owner\\_Type\\_Third}           &      -0.1150  &        0.032     &    -3.625  &         0.000        &       -0.177    &       -0.053     \\\\\n\\textbf{Seats\\_5}                     &       0.0361  &        0.031     &     1.151  &         0.250        &       -0.025    &        0.098     \\\\\n\\textbf{Seats\\_6-10}                  &       0.1699  &        0.036     &     4.776  &         0.000        &        0.100    &        0.240     \\\\\n\\textbf{Brand\\_audi}                  &       0.3844  &        0.243     &     1.582  &         0.114        &       -0.092    &        0.861     \\\\\n\\textbf{Brand\\_bmw}                   &       0.3629  &        0.243     &     1.493  &         0.136        &       -0.114    &        0.840     \\\\\n\\textbf{Brand\\_chevrolet}             &      -0.4955  &        0.243     &    -2.041  &         0.041        &       -0.972    &       -0.019     \\\\\n\\textbf{Brand\\_datsun}                &      -0.6153  &        0.255     &    -2.413  &         0.016        &       -1.115    &       -0.115     \\\\\n\\textbf{Brand\\_fiat}                  &      -0.4900  &        0.248     &    -1.972  &         0.049        &       -0.977    &       -0.003     \\\\\n\\textbf{Brand\\_force}                 &      -0.0552  &        0.295     &    -0.187  &         0.852        &       -0.634    &        0.524     \\\\\n\\textbf{Brand\\_ford}                  &      -0.2391  &        0.242     &    -0.988  &         0.323        &       -0.714    &        0.235     \\\\\n\\textbf{Brand\\_honda}                 &      -0.1142  &        0.242     &    -0.472  &         0.637        &       -0.589    &        0.361     \\\\\n\\textbf{Brand\\_hyundai}               &      -0.1774  &        0.242     &    -0.733  &         0.463        &       -0.652    &        0.297     \\\\\n\\textbf{Brand\\_isuzu}                 &      -0.3416  &        0.279     &    -1.226  &         0.220        &       -0.888    &        0.205     \\\\\n\\textbf{Brand\\_jaguar}                &       0.4364  &        0.247     &     1.769  &         0.077        &       -0.047    &        0.920     \\\\\n\\textbf{Brand\\_jeep}                  &      -0.0108  &        0.254     &    -0.042  &         0.966        &       -0.508    &        0.487     \\\\\n\\textbf{Brand\\_land rover}            &       0.6414  &        0.245     &     2.617  &         0.009        &        0.161    &        1.122     \\\\\n\\textbf{Brand\\_mahindra}              &      -0.3355  &        0.243     &    -1.383  &         0.167        &       -0.811    &        0.140     \\\\\n\\textbf{Brand\\_maruti}                &      -0.1739  &        0.242     &    -0.719  &         0.472        &       -0.648    &        0.301     \\\\\n\\textbf{Brand\\_mercedes-benz}         &       0.4461  &        0.243     &     1.837  &         0.066        &       -0.030    &        0.922     \\\\\n\\textbf{Brand\\_mini cooper}           &       0.8458  &        0.249     &     3.401  &         0.001        &        0.358    &        1.333     \\\\\n\\textbf{Brand\\_mitsubishi}            &       0.0384  &        0.247     &     0.155  &         0.877        &       -0.447    &        0.523     \\\\\n\\textbf{Brand\\_nissan}                &      -0.1745  &        0.244     &    -0.717  &         0.474        &       -0.652    &        0.303     \\\\\n\\textbf{Brand\\_porsche}               &       0.1024  &        0.253     &     0.405  &         0.686        &       -0.393    &        0.598     \\\\\n\\textbf{Brand\\_renault}               &      -0.2377  &        0.243     &    -0.978  &         0.328        &       -0.714    &        0.239     \\\\\n\\textbf{Brand\\_skoda}                 &      -0.1043  &        0.243     &    -0.430  &         0.667        &       -0.580    &        0.372     \\\\\n\\textbf{Brand\\_smart}                 &      -0.1080  &        0.342     &    -0.316  &         0.752        &       -0.778    &        0.562     \\\\\n\\textbf{Brand\\_tata}                  &      -0.6646  &        0.243     &    -2.739  &         0.006        &       -1.140    &       -0.189     \\\\\n\\textbf{Brand\\_toyota}                &       0.0666  &        0.242     &     0.275  &         0.783        &       -0.408    &        0.541     \\\\\n\\textbf{Brand\\_volkswagen}            &      -0.1954  &        0.242     &    -0.807  &         0.420        &       -0.670    &        0.279     \\\\\n\\textbf{Brand\\_volvo}                 &       0.2032  &        0.250     &     0.811  &         0.417        &       -0.288    &        0.694     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Omnibus:}       & 1250.367 & \\textbf{  Durbin-Watson:     } &     1.978  \\\\\n\\textbf{Prob(Omnibus):} &   0.000  & \\textbf{  Jarque-Bera (JB):  } & 27650.848  \\\\\n\\textbf{Skew:}          &  -0.886  & \\textbf{  Prob(JB):          } &      0.00  \\\\\n\\textbf{Kurtosis:}      &  15.434  & \\textbf{  Cond. No.          } &  4.37e+04  \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{OLS Regression Results}\n\\end{center}\n\nNotes: \\newline\n [1] Standard Errors assume that the covariance matrix of the errors is correctly specified. \\newline\n [2] The condition number is large, 4.37e+04. This might indicate that there are \\newline\n strong multicollinearity or other numerical problems."
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The R-squared for the model is 0.925, this is a strong model so far.\n",
        "* The 0.924 Adj-R-squared show's the model is fitting well.\n",
        "  * With both R-squared and the Adj-R-squared we have good indication of model that can explain variance in the Used Car Prices for up to 92%.\n",
        "* While we have some OHE variables that are have a >0.05. p-value, not all values in each category are high, therefore they don't require to be dropped.\n",
        "* The std err range is higher for the OHE Brand's with low representation, therefore understandable."
      ],
      "metadata": {
        "id": "KV9DsgDIV_SX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Defining model evalutaion using the log and the back transformed target variable with Duan's smearing estimator for the bias correction factor\n",
        "def model_evaluation(model, X, y_log_test):\n",
        "    y_log_hat = model.predict(X)\n",
        "\n",
        "    log_scale_mse = mean_squared_error(y_log_test, y_log_hat)\n",
        "    log_scale_rmse = np.sqrt(log_scale_mse)\n",
        "\n",
        "    residuals = y_log_test - y_log_hat\n",
        "    smearing_factor = np.exp(np.mean(residuals))\n",
        "\n",
        "    y_hat_bias_corrected = np.exp(y_log_hat) * smearing_factor\n",
        "    y_original = np.exp(y_log_test)\n",
        "\n",
        "    rmse_bias_corrected = np.sqrt(mean_squared_error(y_original, y_hat_bias_corrected))\n",
        "    mae = mean_absolute_error(y_original, y_hat_bias_corrected)\n",
        "    mape = np.mean(np.abs((y_original - y_hat_bias_corrected) / y_original)) * 100\n",
        "\n",
        "    r2_log_scale = r2_score(y_log_test, y_log_hat)\n",
        "    n = len(y_log_test)\n",
        "    k = X.shape[1]\n",
        "    adj_r2_log_scale = 1 - (((1 - r2_log_scale) * (n - 1)) / (n - k - 1))\n",
        "\n",
        "    return pd.DataFrame({\n",
        "        'Log Scale RMSE': [log_scale_rmse],\n",
        "        'Bias Corrected RMSE': [rmse_bias_corrected],\n",
        "        'MAE': [mae],\n",
        "        'MAPE': [mape],\n",
        "        'Log Scale Adjusted R2': [adj_r2_log_scale],\n",
        "        'Log Scale R2': [r2_log_scale]\n",
        "    })"
      ],
      "metadata": {
        "id": "Sm6BABvH4D7O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking train model evaluation\n",
        "model_evaluation(model, X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        },
        "id": "I6waDC-h3Dfm",
        "outputId": "6b6d7cfa-bdd8-4b6b-c3bf-9c7fe6b45b1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0         0.23759             4.296434  1.797923  18.949202   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0                0.92413      0.925032  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2fed1175-8831-4ff7-9a3c-a235d462b9ff\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.23759</td>\n",
              "      <td>4.296434</td>\n",
              "      <td>1.797923</td>\n",
              "      <td>18.949202</td>\n",
              "      <td>0.92413</td>\n",
              "      <td>0.925032</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fed1175-8831-4ff7-9a3c-a235d462b9ff')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2fed1175-8831-4ff7-9a3c-a235d462b9ff button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2fed1175-8831-4ff7-9a3c-a235d462b9ff');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"model_evaluation(model, X_train, y_train)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.23759006042206918,\n        \"max\": 0.23759006042206918,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.23759006042206918\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.296434343074939,\n        \"max\": 4.296434343074939,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.296434343074939\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.7979228155270623,\n        \"max\": 1.7979228155270623,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.7979228155270623\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.94920157093512,\n        \"max\": 18.94920157093512,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.94920157093512\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9241302800900687,\n        \"max\": 0.9241302800900687,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9241302800900687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9250322025806765,\n        \"max\": 0.9250322025806765,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9250322025806765\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking test model evaluation\n",
        "model_evaluation(model, X_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 78
        },
        "id": "HrEnnHAT3DUm",
        "outputId": "42a7ad0b-78dc-4f33-8457-e9ec8fddcdc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0         0.24007             3.834047  1.714791  18.817033   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.925068      0.927146  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2e546788-aff6-49e0-8760-9583fa8df85a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.24007</td>\n",
              "      <td>3.834047</td>\n",
              "      <td>1.714791</td>\n",
              "      <td>18.817033</td>\n",
              "      <td>0.925068</td>\n",
              "      <td>0.927146</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e546788-aff6-49e0-8760-9583fa8df85a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2e546788-aff6-49e0-8760-9583fa8df85a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2e546788-aff6-49e0-8760-9583fa8df85a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"model_evaluation(model, X_test, y_test)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.24006970184441034,\n        \"max\": 0.24006970184441034,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.24006970184441034\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.834046670363554,\n        \"max\": 3.834046670363554,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.834046670363554\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.7147905922462297,\n        \"max\": 1.7147905922462297,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.7147905922462297\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.81703262580987,\n        \"max\": 18.81703262580987,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.81703262580987\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9250677409285276,\n        \"max\": 0.9250677409285276,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9250677409285276\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9271457292555235,\n        \"max\": 0.9271457292555235,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9271457292555235\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The R-squared value for Train is 0.925 and for Test is .0927, and with the RMSE of train and test being close, this indiciates that our model is not overfitting.\n",
        "* The MAE shows that it can predict within a mean error of 1.7 in INR 100,000 of the test data price. RMSE is higher because I included outliers and it penalizes them more than MAE.\n",
        "* MAPE is high, I believe that is because of the nature of how I handled the data. I actively chose not to aggressively remove outliers, it felt like there is a high variability in vehicles and curtailing the data would come at a price, even if perhaps some metrics like MAPE benefited from it. Cutting the data to get better metrics isn't always the right path."
      ],
      "metadata": {
        "id": "52bSyk1Ui1Ro"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Linear Regression Assumptions**"
      ],
      "metadata": {
        "id": "voU28X7AZZJ3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking for Mean Residuals\n",
        "np.mean(model.resid)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pir2L4wls8d4",
        "outputId": "ae37e02d-ad97-4ee8-9b32-62b05826e9c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.440613996317505e-14"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The mean is nearly zero, therefore this check is satisfied"
      ],
      "metadata": {
        "id": "1yFsF6NMaJYd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking Homoscedasticity with the Goldfeldquandt Test\n",
        "name = ['F statistic', 'p-value']\n",
        "test = sms.het_goldfeldquandt(y_train, X_train)\n",
        "lzip(name, test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A4WpsLrZs8VO",
        "outputId": "fa598903-fa29-4d5a-d190-12b520a1677d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[('F statistic', 0.9122282826270829), ('p-value', 0.9813093580891451)]"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The p-value is >0.05 at .981 therefore this assumption is satrisfied showing the residuals are non-symmetrical."
      ],
      "metadata": {
        "id": "UK2XXX9KaanI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the Linearity of Variables with Residuals vs Fitted Values\n",
        "plt.scatter(model.fittedvalues, model.resid, alpha=0.4)\n",
        "plt.axhline(0, color = 'r', alpha = 0.5, linestyle = '-.')\n",
        "plt.xlabel('Fitted Values')\n",
        "plt.ylabel('Residuals')\n",
        "plt.title('Residuals vs Fitted Values')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 471
        },
        "id": "N-BS2WDGs8RR",
        "outputId": "c1c433ee-ddd3-4a36-8c25-18e014e22f09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The is no distinct pattern in the plot and are scattered around the horizontal axis, therefore this assumption is satisfied."
      ],
      "metadata": {
        "id": "ZcRdKhJva0I7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the Normality of Error Terms\n",
        "sns.histplot(model.resid, kde = True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "9nPlp8Vss8Na",
        "outputId": "617ec17d-0b76-4a9a-9b13-fb9894f0d19b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting Q-Q of residuals\n",
        "stats.probplot(model.resid, dist = 'norm', plot = pylab)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 471
        },
        "id": "E-WbasqTs748",
        "outputId": "227c9506-3765-4ccc-8e2a-02f4af6aeec9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Both plots of residuals follow a normal distribution, therefore this assumption is satisfied."
      ],
      "metadata": {
        "id": "aP_eTBsAbOgU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating the coef and pvalues\n",
        "olsmod = pd.DataFrame(model.params, columns = ['coef'])\n",
        "olsmod['pval'] = model.pvalues\n",
        "\n",
        "olsmod = olsmod.sort_values(by = \"pval\", ascending = True)\n",
        "pval_filter = olsmod['pval']<= 0.05\n",
        "olsmod[pval_filter]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 840
        },
        "id": "oSkZ8cJyMclN",
        "outputId": "e044d613-aa87-4c4e-f592-bcd7bf634bc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           coef           pval\n",
              "Power                  0.006205   0.000000e+00\n",
              "Age                   -0.120815   0.000000e+00\n",
              "Fuel_Type_Petrol      -0.327152  1.916241e-170\n",
              "Mileage               -0.021434   2.178612e-39\n",
              "const                  3.162297   2.340639e-35\n",
              "Location_Kolkata      -0.252320   4.450307e-28\n",
              "Transmission_Manual   -0.125852   2.639759e-24\n",
              "log_Kilometers_Driven -0.052063   5.559528e-18\n",
              "Fuel_Type_Green       -0.263960   9.967426e-14\n",
              "Owner_Type_Second     -0.066222   1.348437e-09\n",
              "Location_Bangalore     0.137859   1.793174e-08\n",
              "Seats_6-10             0.169907   1.848959e-06\n",
              "Location_Hyderabad     0.087821   5.484808e-05\n",
              "Owner_Type_Third      -0.114988   2.928181e-04\n",
              "Location_Coimbatore    0.079310   4.033445e-04\n",
              "Brand_mini cooper      0.845757   6.773186e-04\n",
              "Location_Jaipur       -0.075955   1.500470e-03\n",
              "Location_Delhi        -0.066655   3.029283e-03\n",
              "Brand_tata            -0.664604   6.186740e-03\n",
              "Location_Pune         -0.058261   8.543829e-03\n",
              "Location_Kochi        -0.058320   8.547760e-03\n",
              "Brand_land rover       0.641375   8.901012e-03\n",
              "Location_Mumbai       -0.055758   9.922293e-03\n",
              "Brand_datsun          -0.615275   1.586341e-02\n",
              "Brand_chevrolet       -0.495517   4.135922e-02\n",
              "Brand_fiat            -0.489991   4.864398e-02"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c7412e4-4d0c-48f5-8591-2116ddf6e8aa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>coef</th>\n",
              "      <th>pval</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Power</th>\n",
              "      <td>0.006205</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Age</th>\n",
              "      <td>-0.120815</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fuel_Type_Petrol</th>\n",
              "      <td>-0.327152</td>\n",
              "      <td>1.916241e-170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mileage</th>\n",
              "      <td>-0.021434</td>\n",
              "      <td>2.178612e-39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>const</th>\n",
              "      <td>3.162297</td>\n",
              "      <td>2.340639e-35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location_Kolkata</th>\n",
              "      <td>-0.252320</td>\n",
              "      <td>4.450307e-28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Transmission_Manual</th>\n",
              "      <td>-0.125852</td>\n",
              "      <td>2.639759e-24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>log_Kilometers_Driven</th>\n",
              "      <td>-0.052063</td>\n",
              "      <td>5.559528e-18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Fuel_Type_Green</th>\n",
              "      <td>-0.263960</td>\n",
              "      <td>9.967426e-14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Owner_Type_Second</th>\n",
              "      <td>-0.066222</td>\n",
              "      <td>1.348437e-09</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location_Bangalore</th>\n",
              "      <td>0.137859</td>\n",
              "      <td>1.793174e-08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Seats_6-10</th>\n",
              "      <td>0.169907</td>\n",
              "      <td>1.848959e-06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location_Hyderabad</th>\n",
              "      <td>0.087821</td>\n",
              "      <td>5.484808e-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Owner_Type_Third</th>\n",
              "      <td>-0.114988</td>\n",
              "      <td>2.928181e-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location_Coimbatore</th>\n",
              "      <td>0.079310</td>\n",
              "      <td>4.033445e-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand_mini cooper</th>\n",
              "      <td>0.845757</td>\n",
              "      <td>6.773186e-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location_Jaipur</th>\n",
              "      <td>-0.075955</td>\n",
              "      <td>1.500470e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location_Delhi</th>\n",
              "      <td>-0.066655</td>\n",
              "      <td>3.029283e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand_tata</th>\n",
              "      <td>-0.664604</td>\n",
              "      <td>6.186740e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location_Pune</th>\n",
              "      <td>-0.058261</td>\n",
              "      <td>8.543829e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location_Kochi</th>\n",
              "      <td>-0.058320</td>\n",
              "      <td>8.547760e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand_land rover</th>\n",
              "      <td>0.641375</td>\n",
              "      <td>8.901012e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Location_Mumbai</th>\n",
              "      <td>-0.055758</td>\n",
              "      <td>9.922293e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand_datsun</th>\n",
              "      <td>-0.615275</td>\n",
              "      <td>1.586341e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand_chevrolet</th>\n",
              "      <td>-0.495517</td>\n",
              "      <td>4.135922e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Brand_fiat</th>\n",
              "      <td>-0.489991</td>\n",
              "      <td>4.864398e-02</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c7412e4-4d0c-48f5-8591-2116ddf6e8aa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3c7412e4-4d0c-48f5-8591-2116ddf6e8aa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3c7412e4-4d0c-48f5-8591-2116ddf6e8aa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-26d85999-006a-467e-898b-eefa33579acc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-26d85999-006a-467e-898b-eefa33579acc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-26d85999-006a-467e-898b-eefa33579acc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"olsmod[pval_filter]\",\n  \"rows\": 26,\n  \"fields\": [\n    {\n      \"column\": \"coef\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7141543065583211,\n        \"min\": -0.664604000451888,\n        \"max\": 3.1622971020988775,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          -0.263959971372303,\n          -0.07595465713913979,\n          0.0062053458156978705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pval\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.012314740497124933,\n        \"min\": 0.0,\n        \"max\": 0.048643976687155276,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          1.3484369900648834e-09,\n          0.003029283194475837,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* From the OLS model there are a multitude of features that affect the log_Price with Power, Age, and Fuel type being at the top of the list.\n",
        "  * The order of this list is a great representation of what features one would be looking for when determining the value of a vehicle."
      ],
      "metadata": {
        "id": "obpEZPuScD1E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Determining the most significant varaibles, after reversing OHE\n",
        "pval_filter = olsmod['pval']<= 0.05\n",
        "imp_vars = olsmod[pval_filter].index.tolist()\n",
        "\n",
        "sig_var = []\n",
        "for col in imp_vars:\n",
        "    if '' in col:\n",
        "        first_part = col.split('_')[0]\n",
        "        for c in df.columns:\n",
        "            if first_part in c and c not in sig_var :\n",
        "                sig_var.append(c)\n",
        "\n",
        "print('Most overall significant categorical varaibles of LINEAR REGRESSION  are '':\\n', sig_var)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "70XtN7mvNFcQ",
        "outputId": "68d13bf6-9eda-4f77-9659-a1cafb82688c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Most overall significant categorical varaibles of LINEAR REGRESSION  are :\n",
            " ['Power', 'Age', 'Fuel_Type', 'Mileage', 'Location', 'Transmission', 'log_Price', 'log_Kilometers_Driven', 'Owner_Type', 'Seats', 'Brand']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* For a more interpretable view of the features that are have the highest relevance in log_Price, with the OHE removed, are as above, essentially indicating on some level each of the columns in the data are important when prediciting the price of a used vehcile."
      ],
      "metadata": {
        "id": "8il-BpT3eXeo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculating the equation for OLS Regression\n",
        "coef = model.params\n",
        "Equation = \"Used Car Price predictor=\"\n",
        "print(Equation, end='\\t')\n",
        "for i in range(len(coef)):\n",
        "    print('(', coef[i], ') * ', coef.index[i], '+', end = ' ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qn1ZheiwSL-_",
        "outputId": "83ff945f-ba87-4fbb-b49d-652dfc5010e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Used Car Price predictor=\t( 3.1622971020988775 ) *  const + ( -0.021433694522024614 ) *  Mileage + ( 0.0062053458156978705 ) *  Power + ( -0.12081534399963843 ) *  Age + ( -0.05206332336287092 ) *  log_Kilometers_Driven + ( 0.1378593341989788 ) *  Location_Bangalore + ( 0.009075726938702147 ) *  Location_Chennai + ( 0.07931039516570017 ) *  Location_Coimbatore + ( -0.0666551503213087 ) *  Location_Delhi + ( 0.08782066370690006 ) *  Location_Hyderabad + ( -0.07595465713913979 ) *  Location_Jaipur + ( -0.05832036904877462 ) *  Location_Kochi + ( -0.25231989861042575 ) *  Location_Kolkata + ( -0.05575794128226409 ) *  Location_Mumbai + ( -0.05826069810496573 ) *  Location_Pune + ( -0.263959971372303 ) *  Fuel_Type_Green + ( -0.3271520229866288 ) *  Fuel_Type_Petrol + ( -0.12585186877277466 ) *  Transmission_Manual + ( 0.10697734720601258 ) *  Owner_Type_Fourth & Above + ( -0.0662216262549041 ) *  Owner_Type_Second + ( -0.1149880578422994 ) *  Owner_Type_Third + ( 0.036146325728179565 ) *  Seats_5 + ( 0.1699070038371428 ) *  Seats_6-10 + ( 0.3843749290123985 ) *  Brand_audi + ( 0.36288653516953207 ) *  Brand_bmw + ( -0.4955167818100458 ) *  Brand_chevrolet + ( -0.6152753733704283 ) *  Brand_datsun + ( -0.489990544586623 ) *  Brand_fiat + ( -0.05520101947453509 ) *  Brand_force + ( -0.23905342525416773 ) *  Brand_ford + ( -0.1142473487586589 ) *  Brand_honda + ( -0.1774392082635151 ) *  Brand_hyundai + ( -0.34159118413238837 ) *  Brand_isuzu + ( 0.436432013167265 ) *  Brand_jaguar + ( -0.01075007893694961 ) *  Brand_jeep + ( 0.6413751497421049 ) *  Brand_land rover + ( -0.3355302980606956 ) *  Brand_mahindra + ( -0.1738635694787632 ) *  Brand_maruti + ( 0.4460605404552179 ) *  Brand_mercedes-benz + ( 0.8457572327457344 ) *  Brand_mini cooper + ( 0.03843682407346727 ) *  Brand_mitsubishi + ( -0.1744848049920839 ) *  Brand_nissan + ( 0.10240969104178205 ) *  Brand_porsche + ( -0.2376524244352308 ) *  Brand_renault + ( -0.10434461780842076 ) *  Brand_skoda + ( -0.10801246354712074 ) *  Brand_smart + ( -0.664604000451888 ) *  Brand_tata + ( 0.06658675966818856 ) *  Brand_toyota + ( -0.1953602544288694 ) *  Brand_volkswagen + ( 0.2031974173452219 ) *  Brand_volvo + "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The equation is as follows:\n",
        "\n",
        "**$\\log($Price$)$ = $3.162 - 0.021 *$ Mileage$ + 0.006 *$ Power$ - 0.121 *$ Age$ - 0.052 *$ log(Kilometers Driven)$ + 0.138 *$ Location_Bangalore$ + 0.009 *$ Location_Chennai$ + 0.079 *$ Location_Coimbatore$ - 0.067 *$ Location_Delhi$ + 0.088 *$ Location_Hyderabad$ - 0.076 *$ Location_Jaipur$ - 0.058 *$ Location_Kochi$ - 0.252 *$ Location_Kolkata$ - 0.056 *$ Location_Mumbai$ - 0.058 *$ Location_Pune$ - 0.264 *$ Fuel_Type_Green$ - 0.327 *$ Fuel_Type_Petrol$ - 0.126 *$ Transmission_Manual$ + 0.107 *$ Owner_Type_Fourth_Above$ - 0.066 *$ Owner_Type_Second$ - 0.115 *$ Owner_Type_Third$ - 0.036 *$ Seats_5$\n",
        "+ 0.170 *$ Seats_6-10$ + 0.384 *$ Brand_audi$ + 0.363 *$ Brand_bmw$ - 0.496 *$ Brand_chevrolet$ - 0.615 *$ Brand_datsun$ - 0.490 *$ Brand_fiat$ - 0.055 *$ Brand_force$ - 0.239 *$ Brand_ford$ - 0.114 *$ Brand_honda$ - 0.177 *$ Brand_hyundai$ - 0.3420 *$ Brand_isuzu$ + 0.436 *$ Brand_jaguar$ - 0.011 *$ Brand_jeep$ + 0.641 *$ Brand_land_rover$ - 0.336 *$ Brand_mahindra$ - 0.174 *$ Brand_maruti$ + 0.446 *$ Brand_mercedes-benz$ + 0.846 *$ Brand_mini_cooper$ + 0.038 *$ Brand_mitsubishi$ - 0.174 *$ Brand_nissan$ + 0.102 *$ Brand_porsche$ - 0.238 *$ Brand_renault$ - 0.104 *$ Brand_skoda$ - 0.108 *$ Brand_smart$ - 0.665 *$ Brand_tata$ + 0.067 *$ Brand_toyota$ - 0.195 *$ Brand_volkswagen$ + 0.203 *$ Brand_volvo**"
      ],
      "metadata": {
        "id": "jIkJJMEIfMVs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Linear Regression**"
      ],
      "metadata": {
        "id": "bn9KmHFNlcOF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize and fitting the model\n",
        "model2 = LinearRegression()\n",
        "model2.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "3IrXoNCRNP1A",
        "outputId": "700e3cd3-dcc6-4b51-aeb7-7ee66c1080c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "linear_reg_train = model_evaluation(model2, X_train, y_train)\n",
        "linear_reg_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "6iXijODJKK3l",
        "outputId": "2389a45e-c56f-4861-eee9-f71c4855061e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0         0.23759             4.296434  1.797923  18.949202   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0                0.92413      0.925032  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e019fe7c-9564-4052-8540-1ae7640d6852\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.23759</td>\n",
              "      <td>4.296434</td>\n",
              "      <td>1.797923</td>\n",
              "      <td>18.949202</td>\n",
              "      <td>0.92413</td>\n",
              "      <td>0.925032</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e019fe7c-9564-4052-8540-1ae7640d6852')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e019fe7c-9564-4052-8540-1ae7640d6852 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e019fe7c-9564-4052-8540-1ae7640d6852');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_aa4f1d5c-d2d0-4256-ba0c-d74ba6dffd31\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('linear_reg_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_aa4f1d5c-d2d0-4256-ba0c-d74ba6dffd31 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('linear_reg_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "linear_reg_train",
              "summary": "{\n  \"name\": \"linear_reg_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.23759006042206918,\n        \"max\": 0.23759006042206918,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.23759006042206918\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.296434343075079,\n        \"max\": 4.296434343075079,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.296434343075079\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.7979228155270797,\n        \"max\": 1.7979228155270797,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.7979228155270797\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.94920157093515,\n        \"max\": 18.94920157093515,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.94920157093515\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9241302800900687,\n        \"max\": 0.9241302800900687,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9241302800900687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9250322025806765,\n        \"max\": 0.9250322025806765,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9250322025806765\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 122
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "linear_reg = model_evaluation(model2, X_test, y_test)\n",
        "linear_reg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "5YqEgFqxNPqq",
        "outputId": "9bd8b68e-335e-465b-b4a0-8e6861085f83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0         0.24007             3.834047  1.714791  18.817033   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.925068      0.927146  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-083c59a8-b9ce-432b-97e7-d70a2f11c914\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.24007</td>\n",
              "      <td>3.834047</td>\n",
              "      <td>1.714791</td>\n",
              "      <td>18.817033</td>\n",
              "      <td>0.925068</td>\n",
              "      <td>0.927146</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-083c59a8-b9ce-432b-97e7-d70a2f11c914')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-083c59a8-b9ce-432b-97e7-d70a2f11c914 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-083c59a8-b9ce-432b-97e7-d70a2f11c914');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_6f36d200-c7b5-430d-85c7-0037ef94f9a1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('linear_reg')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6f36d200-c7b5-430d-85c7-0037ef94f9a1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('linear_reg');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "linear_reg",
              "summary": "{\n  \"name\": \"linear_reg\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.24006970184441045,\n        \"max\": 0.24006970184441045,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.24006970184441045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.834046670363668,\n        \"max\": 3.834046670363668,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.834046670363668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.714790592246249,\n        \"max\": 1.714790592246249,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.714790592246249\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.81703262580988,\n        \"max\": 18.81703262580988,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.81703262580988\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9250677409285275,\n        \"max\": 0.9250677409285275,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9250677409285275\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9271457292555234,\n        \"max\": 0.9271457292555234,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9271457292555234\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* RMSE and Adj-R-Squared of the training and test data are very close indicating we are not overfitting on the training data.\n",
        "* R-squared of 0.92 indicated the independent variables are explaining approximately 92% of the variance in the dependent variable."
      ],
      "metadata": {
        "id": "EYW0sXrhmLmr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Regularization**"
      ],
      "metadata": {
        "id": "O8BRgT5EnB2t"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Ridge Regresstion**"
      ],
      "metadata": {
        "id": "IZ1JHfePnBpY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Default Parameters"
      ],
      "metadata": {
        "id": "9MEhsuYPomrw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize and fitting the model\n",
        "ridge_model = Ridge()\n",
        "ridge_model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "YcgLDE97Nbbu",
        "outputId": "3ba27b64-bdbc-4d28-9bf4-61278392f18d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Ridge()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "ridge_reg_train = model_evaluation(ridge_model, X_train, y_train)\n",
        "ridge_reg_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "5Sz9qEzSA9Jl",
        "outputId": "496dc515-877c-4c8b-afa7-917da6bbf190"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.237683             4.322605  1.800214  18.943891   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.924071      0.924974  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fb67fa43-e543-495b-9674-7d92c2288173\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.237683</td>\n",
              "      <td>4.322605</td>\n",
              "      <td>1.800214</td>\n",
              "      <td>18.943891</td>\n",
              "      <td>0.924071</td>\n",
              "      <td>0.924974</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb67fa43-e543-495b-9674-7d92c2288173')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fb67fa43-e543-495b-9674-7d92c2288173 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fb67fa43-e543-495b-9674-7d92c2288173');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_58017778-3069-48d4-adce-bf48fca07c93\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('ridge_reg_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_58017778-3069-48d4-adce-bf48fca07c93 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('ridge_reg_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ridge_reg_train",
              "summary": "{\n  \"name\": \"ridge_reg_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.23768285033639372,\n        \"max\": 0.23768285033639372,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.23768285033639372\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.322604584581084,\n        \"max\": 4.322604584581084,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.322604584581084\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.800214481581483,\n        \"max\": 1.800214481581483,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.800214481581483\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.943891451769844,\n        \"max\": 18.943891451769844,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.943891451769844\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9240710072441434,\n        \"max\": 0.9240710072441434,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9240710072441434\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9249736343572658,\n        \"max\": 0.9249736343572658,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9249736343572658\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "ridge_reg = model_evaluation(ridge_model, X_test, y_test)\n",
        "ridge_reg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "h4HH782SNPnR",
        "outputId": "dd91193b-d85b-40fc-987d-36b0ad96076d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.240172             3.864214  1.718717  18.821396   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.925004      0.927084  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-64e9a535-face-474b-8c6a-a2d0aeb9335b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.240172</td>\n",
              "      <td>3.864214</td>\n",
              "      <td>1.718717</td>\n",
              "      <td>18.821396</td>\n",
              "      <td>0.925004</td>\n",
              "      <td>0.927084</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64e9a535-face-474b-8c6a-a2d0aeb9335b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-64e9a535-face-474b-8c6a-a2d0aeb9335b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-64e9a535-face-474b-8c6a-a2d0aeb9335b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_dd87c884-2a63-446e-a24a-ce9eb308b167\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('ridge_reg')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_dd87c884-2a63-446e-a24a-ce9eb308b167 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('ridge_reg');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ridge_reg",
              "summary": "{\n  \"name\": \"ridge_reg\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2401715408936942,\n        \"max\": 0.2401715408936942,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2401715408936942\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.864213558804359,\n        \"max\": 3.864213558804359,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.864213558804359\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.7187171092575313,\n        \"max\": 1.7187171092575313,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.7187171092575313\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.821395744578346,\n        \"max\": 18.821395744578346,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.821395744578346\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9250041539908099,\n        \"max\": 0.9250041539908099,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9250041539908099\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9270839056826898,\n        \"max\": 0.9270839056826898,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9270839056826898\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* No large improvement utlizing Ridge Regression Penalty by reducing the complexity of the model, our metrics are very simliar to the Least Squares model."
      ],
      "metadata": {
        "id": "LEQR2JxFovza"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Optimized $\\large\\alpha$"
      ],
      "metadata": {
        "id": "1mn153TdpdX1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying Grid Search CV\n",
        "folds = KFold(n_splits=10, shuffle=True, random_state=1)\n",
        "params = {'alpha':[0.001, 0.01, 0.1, 0.2, 0.5, 0.9, 1, 5,10,20]}\n",
        "model3 = Ridge()\n",
        "model_cv = GridSearchCV(estimator=model3, param_grid=params, scoring='r2', cv=folds, return_train_score=True)\n",
        "model_cv.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 116
        },
        "id": "ecGrxJm6NbYr",
        "outputId": "9d867017-1f3e-4298-c659-1c591811005f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=KFold(n_splits=10, random_state=1, shuffle=True),\n",
              "             estimator=Ridge(),\n",
              "             param_grid={'alpha': [0.001, 0.01, 0.1, 0.2, 0.5, 0.9, 1, 5, 10,\n",
              "                                   20]},\n",
              "             return_train_score=True, scoring='r2')"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=10, random_state=1, shuffle=True),\n",
              "             estimator=Ridge(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.2, 0.5, 0.9, 1, 5, 10,\n",
              "                                   20]},\n",
              "             return_train_score=True, scoring=&#x27;r2&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=KFold(n_splits=10, random_state=1, shuffle=True),\n",
              "             estimator=Ridge(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.2, 0.5, 0.9, 1, 5, 10,\n",
              "                                   20]},\n",
              "             return_train_score=True, scoring=&#x27;r2&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Determining the optimized parameter for alpha\n",
        "model_cv.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CVpnSJVQNbVj",
        "outputId": "daaffd4f-3c61-4fd4-9a7b-2b0e989e6d39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'alpha': 0.9}"
            ]
          },
          "metadata": {},
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initalizing and fitting model with optimzed alpha\n",
        "ridge_model_tuned = Ridge(alpha=0.1)\n",
        "ridge_model_tuned.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "1hsIfCXuNbSe",
        "outputId": "50c0e41a-b4cc-4855-eb9c-34e461f1bb7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Ridge(alpha=0.1)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge(alpha=0.1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge(alpha=0.1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "ridge_reg_tuned_train = model_evaluation(ridge_model_tuned, X_train, y_train)\n",
        "ridge_reg_tuned_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "bhxVbkM7BLib",
        "outputId": "a2611dc7-28ef-4606-ea8e-dc3eb7602bf1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.237592              4.29859  1.798075  18.947782   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.924129      0.925031  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f552a80d-99be-4b3f-8d76-de61dd8f74cc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.237592</td>\n",
              "      <td>4.29859</td>\n",
              "      <td>1.798075</td>\n",
              "      <td>18.947782</td>\n",
              "      <td>0.924129</td>\n",
              "      <td>0.925031</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f552a80d-99be-4b3f-8d76-de61dd8f74cc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f552a80d-99be-4b3f-8d76-de61dd8f74cc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f552a80d-99be-4b3f-8d76-de61dd8f74cc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_aeb88638-0f75-4e51-99e0-2dd9a9dd5dd7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('ridge_reg_tuned_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_aeb88638-0f75-4e51-99e0-2dd9a9dd5dd7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('ridge_reg_tuned_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ridge_reg_tuned_train",
              "summary": "{\n  \"name\": \"ridge_reg_tuned_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.23759153111952697,\n        \"max\": 0.23759153111952697,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.23759153111952697\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.298590237073558,\n        \"max\": 4.298590237073558,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.298590237073558\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.7980752191110456,\n        \"max\": 1.7980752191110456,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.7980752191110456\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.947781758004727,\n        \"max\": 18.947781758004727,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.947781758004727\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9241293408104596,\n        \"max\": 0.9241293408104596,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9241293408104596\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9250312744670162,\n        \"max\": 0.9250312744670162,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9250312744670162\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "ridge_reg_tuned = model_evaluation(ridge_model_tuned, X_test, y_test)\n",
        "ridge_reg_tuned"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "LAvMEthmNbPS",
        "outputId": "137bd300-63a4-4f4e-fd74-0fe415a6a19f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.240097             3.847249  1.716942  18.819915   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.925051      0.927129  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-494fbd40-73fc-4727-ade6-090483468e80\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.240097</td>\n",
              "      <td>3.847249</td>\n",
              "      <td>1.716942</td>\n",
              "      <td>18.819915</td>\n",
              "      <td>0.925051</td>\n",
              "      <td>0.927129</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-494fbd40-73fc-4727-ade6-090483468e80')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-494fbd40-73fc-4727-ade6-090483468e80 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-494fbd40-73fc-4727-ade6-090483468e80');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_09707e16-3641-47ec-b28e-e2e068c616f9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('ridge_reg_tuned')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_09707e16-3641-47ec-b28e-e2e068c616f9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('ridge_reg_tuned');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ridge_reg_tuned",
              "summary": "{\n  \"name\": \"ridge_reg_tuned\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2400970734262889,\n        \"max\": 0.2400970734262889,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2400970734262889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.847248590396922,\n        \"max\": 3.847248590396922,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.847248590396922\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.7169421294872962,\n        \"max\": 1.7169421294872962,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.7169421294872962\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.819914580277388,\n        \"max\": 18.819914580277388,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.819914580277388\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9250506531296749,\n        \"max\": 0.9250506531296749,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9250506531296749\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9271291153279646,\n        \"max\": 0.9271291153279646,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9271291153279646\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The biased introduced to improve predictions, even with tuned parameters did not result in an improvement in model metrics."
      ],
      "metadata": {
        "id": "ocW4YQUKqpeO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Lasso Regression**"
      ],
      "metadata": {
        "id": "MPfFdqQzrUHZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Default Parameters"
      ],
      "metadata": {
        "id": "46PiyjvbGz-o"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize and fitting the model\n",
        "lasso_model = Lasso()\n",
        "lasso_model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "kJcVtnSZNbMe",
        "outputId": "969c4d9a-7366-4171-a718-0d6017516902"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Lasso()"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "lasso_reg_train = model_evaluation(lasso_model, X_train, y_train)\n",
        "lasso_reg_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "blliUxTwBY42",
        "outputId": "3eda1c1f-3a82-4192-913f-616098e69596"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.481885            23.028192  4.364781  44.403239   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.687897      0.691607  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e785922e-af4d-4535-a29d-04be6e3ee3c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.481885</td>\n",
              "      <td>23.028192</td>\n",
              "      <td>4.364781</td>\n",
              "      <td>44.403239</td>\n",
              "      <td>0.687897</td>\n",
              "      <td>0.691607</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e785922e-af4d-4535-a29d-04be6e3ee3c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e785922e-af4d-4535-a29d-04be6e3ee3c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e785922e-af4d-4535-a29d-04be6e3ee3c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_f3577e9c-52e7-4a20-93aa-92e275bf0404\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lasso_reg_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f3577e9c-52e7-4a20-93aa-92e275bf0404 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lasso_reg_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lasso_reg_train",
              "summary": "{\n  \"name\": \"lasso_reg_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.48188452255467057,\n        \"max\": 0.48188452255467057,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.48188452255467057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 23.028192345058073,\n        \"max\": 23.028192345058073,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          23.028192345058073\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.364780689014603,\n        \"max\": 4.364780689014603,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.364780689014603\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 44.403238922488384,\n        \"max\": 44.403238922488384,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          44.403238922488384\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6878970310474294,\n        \"max\": 0.6878970310474294,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6878970310474294\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.691607242280817,\n        \"max\": 0.691607242280817,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.691607242280817\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "lasso_reg = model_evaluation(lasso_model, X_test, y_test)\n",
        "lasso_reg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "9oLY6dwENbJz",
        "outputId": "df68049f-94ec-484c-b2d9-15caa9428ba7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE      MAPE  \\\n",
              "0        0.485212            38.007282  5.288043  43.16488   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.693904      0.702393  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3a5294c7-178e-45d8-bfa2-bcba86d340b2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.485212</td>\n",
              "      <td>38.007282</td>\n",
              "      <td>5.288043</td>\n",
              "      <td>43.16488</td>\n",
              "      <td>0.693904</td>\n",
              "      <td>0.702393</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3a5294c7-178e-45d8-bfa2-bcba86d340b2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3a5294c7-178e-45d8-bfa2-bcba86d340b2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3a5294c7-178e-45d8-bfa2-bcba86d340b2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_621b0122-6ca5-4fcf-b553-03cd4921e88b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lasso_reg')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_621b0122-6ca5-4fcf-b553-03cd4921e88b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lasso_reg');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lasso_reg",
              "summary": "{\n  \"name\": \"lasso_reg\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.48521224171519794,\n        \"max\": 0.48521224171519794,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.48521224171519794\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 38.00728203684354,\n        \"max\": 38.00728203684354,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          38.00728203684354\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.28804304578807,\n        \"max\": 5.28804304578807,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.28804304578807\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 43.16488020576443,\n        \"max\": 43.16488020576443,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          43.16488020576443\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6939040251886441,\n        \"max\": 0.6939040251886441,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6939040251886441\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7023925436248992,\n        \"max\": 0.7023925436248992,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7023925436248992\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* We have very poor performance with the default alpha, there was significantly higher scores with previous models and overfitting."
      ],
      "metadata": {
        "id": "VXr7bLabBp9Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Optimized $\\large\\alpha$"
      ],
      "metadata": {
        "id": "HkpUF5-UGhIk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying Grid Search CV\n",
        "folds = KFold(n_splits=10, shuffle=True, random_state=1)\n",
        "params = {'alpha':[0.001, 0.01, 0.1, 0.2, 0.5, 0.9, 1, 5,10,20]}\n",
        "model4 = Lasso()\n",
        "model_cv = GridSearchCV(estimator=model4, param_grid=params, scoring='r2', cv=folds, return_train_score=True)\n",
        "model_cv.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 116
        },
        "id": "1d8UyJsuNbG7",
        "outputId": "15fcece5-fc76-40e3-e04a-22fed5750ea0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=KFold(n_splits=10, random_state=1, shuffle=True),\n",
              "             estimator=Lasso(),\n",
              "             param_grid={'alpha': [0.001, 0.01, 0.1, 0.2, 0.5, 0.9, 1, 5, 10,\n",
              "                                   20]},\n",
              "             return_train_score=True, scoring='r2')"
            ],
            "text/html": [
              "<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=10, random_state=1, shuffle=True),\n",
              "             estimator=Lasso(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.2, 0.5, 0.9, 1, 5, 10,\n",
              "                                   20]},\n",
              "             return_train_score=True, scoring=&#x27;r2&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=KFold(n_splits=10, random_state=1, shuffle=True),\n",
              "             estimator=Lasso(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.2, 0.5, 0.9, 1, 5, 10,\n",
              "                                   20]},\n",
              "             return_train_score=True, scoring=&#x27;r2&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Determining the optimized parameter for alpha\n",
        "model_cv.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6MlgD9tJNbDo",
        "outputId": "d33645a0-5deb-4f45-e932-fd953bb8bd4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'alpha': 0.001}"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initalizing and fitting model with optimzed alpha\n",
        "lasso_model_tuned = Lasso(alpha=0.001)\n",
        "lasso_model_tuned.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "AW2iPjO3QIR3",
        "outputId": "b3d42c76-670b-491c-ec4f-7870d01a3812"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Lasso(alpha=0.001)"
            ],
            "text/html": [
              "<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Lasso(alpha=0.001)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Lasso</label><div class=\"sk-toggleable__content\"><pre>Lasso(alpha=0.001)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "lasso_reg_tuned_train = model_evaluation(lasso_model_tuned, X_train, y_train)\n",
        "lasso_reg_tuned_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "1-j0fE8PCQq7",
        "outputId": "c3e59024-5118-41c5-db7a-5c77877dedb2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.244075             4.658127  1.881915  19.438096   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.919932      0.920884  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ef7a0f90-5947-4fe5-bf25-134fd3964036\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.244075</td>\n",
              "      <td>4.658127</td>\n",
              "      <td>1.881915</td>\n",
              "      <td>19.438096</td>\n",
              "      <td>0.919932</td>\n",
              "      <td>0.920884</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef7a0f90-5947-4fe5-bf25-134fd3964036')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ef7a0f90-5947-4fe5-bf25-134fd3964036 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ef7a0f90-5947-4fe5-bf25-134fd3964036');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_28a6a374-f2fc-41f2-8b6b-ffabf01d0747\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lasso_reg_tuned_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_28a6a374-f2fc-41f2-8b6b-ffabf01d0747 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lasso_reg_tuned_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lasso_reg_tuned_train",
              "summary": "{\n  \"name\": \"lasso_reg_tuned_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2440748646030169,\n        \"max\": 0.2440748646030169,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2440748646030169\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.65812670209335,\n        \"max\": 4.65812670209335,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.65812670209335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.8819151861729135,\n        \"max\": 1.8819151861729135,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.8819151861729135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 19.438095836503688,\n        \"max\": 19.438095836503688,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          19.438095836503688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9199321699032238,\n        \"max\": 0.9199321699032238,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9199321699032238\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9208839986014736,\n        \"max\": 0.9208839986014736,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9208839986014736\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 138
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "lasso_reg_tuned = model_evaluation(lasso_model_tuned, X_test, y_test)\n",
        "lasso_reg_tuned"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "z4WsJzVcNbBP",
        "outputId": "a67c1180-f3df-4f88-f394-a907f084a8e1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.245953             4.224632  1.800439  19.244974   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0                0.92135      0.923531  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0aa0ab59-c86d-42a5-8dba-e33dd9574749\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.245953</td>\n",
              "      <td>4.224632</td>\n",
              "      <td>1.800439</td>\n",
              "      <td>19.244974</td>\n",
              "      <td>0.92135</td>\n",
              "      <td>0.923531</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0aa0ab59-c86d-42a5-8dba-e33dd9574749')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0aa0ab59-c86d-42a5-8dba-e33dd9574749 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0aa0ab59-c86d-42a5-8dba-e33dd9574749');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_0fd2062b-e980-47de-a976-6f18dcdcd5c3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lasso_reg_tuned')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_0fd2062b-e980-47de-a976-6f18dcdcd5c3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lasso_reg_tuned');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lasso_reg_tuned",
              "summary": "{\n  \"name\": \"lasso_reg_tuned\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.24595339899730254,\n        \"max\": 0.24595339899730254,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.24595339899730254\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.2246316176184395,\n        \"max\": 4.2246316176184395,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.2246316176184395\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.8004393062855688,\n        \"max\": 1.8004393062855688,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.8004393062855688\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 19.24497363593286,\n        \"max\": 19.24497363593286,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          19.24497363593286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9213498097858378,\n        \"max\": 0.9213498097858378,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9213498097858378\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9235309021378667,\n        \"max\": 0.9235309021378667,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9235309021378667\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Despite adding the penalty and utilizing the optimized alpha value, the performance of Lasso is close but lower than Least Squares and Ridge."
      ],
      "metadata": {
        "id": "qtnxUeIIFtmr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Elastic Net Regression**"
      ],
      "metadata": {
        "id": "qu_EQqjSGLhu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Default Parameters"
      ],
      "metadata": {
        "id": "VUgGT-WwG8oq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize and fitting the model\n",
        "elasticnet_model = ElasticNet()\n",
        "elasticnet_model.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "cI2tR1EGO_gF",
        "outputId": "1f3d9a45-c17b-4974-fa80-80b4a34d8e15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ElasticNet()"
            ],
            "text/html": [
              "<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ElasticNet()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "elasticnet_reg_train = model_evaluation(elasticnet_model, X_train, y_train)\n",
        "elasticnet_reg_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "7Ox6QYWTC9oB",
        "outputId": "ce9bbb80-b913-479d-c4d3-ae945e903a11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE      MAE       MAPE  \\\n",
              "0        0.407035            21.620982  3.84866  35.727321   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.777323       0.77997  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-00d05520-9a20-46ef-b687-6213768429e0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.407035</td>\n",
              "      <td>21.620982</td>\n",
              "      <td>3.84866</td>\n",
              "      <td>35.727321</td>\n",
              "      <td>0.777323</td>\n",
              "      <td>0.77997</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00d05520-9a20-46ef-b687-6213768429e0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-00d05520-9a20-46ef-b687-6213768429e0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-00d05520-9a20-46ef-b687-6213768429e0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_578ac7ef-9c44-482e-ae88-978f5aabf177\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('elasticnet_reg_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_578ac7ef-9c44-482e-ae88-978f5aabf177 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('elasticnet_reg_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "elasticnet_reg_train",
              "summary": "{\n  \"name\": \"elasticnet_reg_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.407035366960865,\n        \"max\": 0.407035366960865,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.407035366960865\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 21.620982443790513,\n        \"max\": 21.620982443790513,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          21.620982443790513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.848659688655126,\n        \"max\": 3.848659688655126,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.848659688655126\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 35.72732050721841,\n        \"max\": 35.72732050721841,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          35.72732050721841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.777322550934983,\n        \"max\": 0.777322550934983,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.777322550934983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7799696913185424,\n        \"max\": 0.7799696913185424,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7799696913185424\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "elasticnet_reg = model_evaluation(elasticnet_model, X_test, y_test)\n",
        "elasticnet_reg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "InQyPVk6DA4K",
        "outputId": "e88ab5f0-48e9-455b-c11e-6f7ecc921e72"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.408666            33.947244  4.609145  33.983437   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.782864      0.788885  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c017de44-accf-4ae6-89f5-f126e14bc8a2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.408666</td>\n",
              "      <td>33.947244</td>\n",
              "      <td>4.609145</td>\n",
              "      <td>33.983437</td>\n",
              "      <td>0.782864</td>\n",
              "      <td>0.788885</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c017de44-accf-4ae6-89f5-f126e14bc8a2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c017de44-accf-4ae6-89f5-f126e14bc8a2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c017de44-accf-4ae6-89f5-f126e14bc8a2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_d9688e8d-14ba-4a50-93ce-961eb6f44cc8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('elasticnet_reg')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d9688e8d-14ba-4a50-93ce-961eb6f44cc8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('elasticnet_reg');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "elasticnet_reg",
              "summary": "{\n  \"name\": \"elasticnet_reg\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.40866642018121835,\n        \"max\": 0.40866642018121835,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.40866642018121835\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 33.94724366373531,\n        \"max\": 33.94724366373531,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          33.94724366373531\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.609144933688287,\n        \"max\": 4.609144933688287,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.609144933688287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 33.98343664492025,\n        \"max\": 33.98343664492025,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          33.98343664492025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7828639031611843,\n        \"max\": 0.7828639031611843,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7828639031611843\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.7888854255360821,\n        \"max\": 0.7888854255360821,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7888854255360821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation**\n",
        "\n",
        "* The performance is low with the default alpha, the L1 penalty does not yield better results."
      ],
      "metadata": {
        "id": "SYB0WHPaHoqA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Optimized $\\large\\alpha$"
      ],
      "metadata": {
        "id": "9jaOHCJNGnhJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying Grid Search CV\n",
        "folds = KFold(n_splits=10, shuffle=True, random_state=1)\n",
        "params = {'alpha':[0.001, 0.01, 0.1, 0.2, 0.5, 0.9],\n",
        "         'l1_ratio': [0.001, 0.01, 0.02, 0.03, 0.04, 0.05]}\n",
        "model5 = ElasticNet()\n",
        "model_cv = GridSearchCV(estimator=model5, param_grid=params, scoring='r2', cv=folds, return_train_score=True)\n",
        "model_cv.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 116
        },
        "id": "ynydHJJUO_c3",
        "outputId": "3a11ca89-8632-4d3e-c90e-dd50ca506486"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=KFold(n_splits=10, random_state=1, shuffle=True),\n",
              "             estimator=ElasticNet(),\n",
              "             param_grid={'alpha': [0.001, 0.01, 0.1, 0.2, 0.5, 0.9],\n",
              "                         'l1_ratio': [0.001, 0.01, 0.02, 0.03, 0.04, 0.05]},\n",
              "             return_train_score=True, scoring='r2')"
            ],
            "text/html": [
              "<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=KFold(n_splits=10, random_state=1, shuffle=True),\n",
              "             estimator=ElasticNet(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.2, 0.5, 0.9],\n",
              "                         &#x27;l1_ratio&#x27;: [0.001, 0.01, 0.02, 0.03, 0.04, 0.05]},\n",
              "             return_train_score=True, scoring=&#x27;r2&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=KFold(n_splits=10, random_state=1, shuffle=True),\n",
              "             estimator=ElasticNet(),\n",
              "             param_grid={&#x27;alpha&#x27;: [0.001, 0.01, 0.1, 0.2, 0.5, 0.9],\n",
              "                         &#x27;l1_ratio&#x27;: [0.001, 0.01, 0.02, 0.03, 0.04, 0.05]},\n",
              "             return_train_score=True, scoring=&#x27;r2&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet()</pre></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 143
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Determining the optimized parameter for alpha\n",
        "model_cv.best_params_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mmair6MfO_Zy",
        "outputId": "bd0ed465-2d2b-4c59-de80-5dc1296f7a01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'alpha': 0.001, 'l1_ratio': 0.001}"
            ]
          },
          "metadata": {},
          "execution_count": 144
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initalizing and fitting model with optimzed alpha\n",
        "elasticnet_model_tuned = ElasticNet(alpha=0.001, l1_ratio=0.05)\n",
        "elasticnet_model_tuned.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "lxWdokoyO_Wr",
        "outputId": "55d11306-87a5-43b1-ecb5-f70bdbe3ebf7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ElasticNet(alpha=0.001, l1_ratio=0.05)"
            ],
            "text/html": [
              "<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ElasticNet(alpha=0.001, l1_ratio=0.05)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" checked><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ElasticNet</label><div class=\"sk-toggleable__content\"><pre>ElasticNet(alpha=0.001, l1_ratio=0.05)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "elasticnet_reg_tuned_train = model_evaluation(elasticnet_model_tuned, X_train, y_train)\n",
        "elasticnet_reg_tuned_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "Rdsd9RZyC3Be",
        "outputId": "b869dbfb-bc9d-4e61-c146-96e44b2d4544"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.238809             4.429299  1.825259  19.029802   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0                0.92335      0.924261  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ca215619-7018-4990-8db7-28977fdfba22\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.238809</td>\n",
              "      <td>4.429299</td>\n",
              "      <td>1.825259</td>\n",
              "      <td>19.029802</td>\n",
              "      <td>0.92335</td>\n",
              "      <td>0.924261</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca215619-7018-4990-8db7-28977fdfba22')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ca215619-7018-4990-8db7-28977fdfba22 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ca215619-7018-4990-8db7-28977fdfba22');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_001a0fe7-db07-432d-abdd-8a6135edaa12\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('elasticnet_reg_tuned_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_001a0fe7-db07-432d-abdd-8a6135edaa12 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('elasticnet_reg_tuned_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "elasticnet_reg_tuned_train",
              "summary": "{\n  \"name\": \"elasticnet_reg_tuned_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.23880854503012772,\n        \"max\": 0.23880854503012772,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.23880854503012772\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.429298872298704,\n        \"max\": 4.429298872298704,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.429298872298704\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.8252586584949162,\n        \"max\": 1.8252586584949162,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.8252586584949162\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 19.02980153218396,\n        \"max\": 19.02980153218396,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          19.02980153218396\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9233500863276354,\n        \"max\": 0.9233500863276354,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9233500863276354\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9242612835895513,\n        \"max\": 0.9242612835895513,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9242612835895513\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 146
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "elasticnet_reg_tuned = model_evaluation(elasticnet_model_tuned, X_test, y_test)\n",
        "elasticnet_reg_tuned"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "gIOmhhYsO_RN",
        "outputId": "788cad57-8620-40a4-b0ed-86a3d9d6e573"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.241151             3.957586  1.736379  18.891943   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.924391      0.926488  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-81e034c6-2013-4d66-be8b-af419140157b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.241151</td>\n",
              "      <td>3.957586</td>\n",
              "      <td>1.736379</td>\n",
              "      <td>18.891943</td>\n",
              "      <td>0.924391</td>\n",
              "      <td>0.926488</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-81e034c6-2013-4d66-be8b-af419140157b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-81e034c6-2013-4d66-be8b-af419140157b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-81e034c6-2013-4d66-be8b-af419140157b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_16d44bbc-2d2a-42d1-8950-8e3e448dd56b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('elasticnet_reg_tuned')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_16d44bbc-2d2a-42d1-8950-8e3e448dd56b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('elasticnet_reg_tuned');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "elasticnet_reg_tuned",
              "summary": "{\n  \"name\": \"elasticnet_reg_tuned\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2411506991592347,\n        \"max\": 0.2411506991592347,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2411506991592347\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.9575856686249242,\n        \"max\": 3.9575856686249242,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.9575856686249242\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.7363785012237778,\n        \"max\": 1.7363785012237778,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.7363785012237778\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 18.891942948401756,\n        \"max\": 18.891942948401756,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          18.891942948401756\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9243914045220886,\n        \"max\": 0.9243914045220886,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9243914045220886\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9264881487117145,\n        \"max\": 0.9264881487117145,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9264881487117145\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Even with the optimized alpha at 0.001 and L1 ratio at 0.05 the performance of the model is just about equal as with Least Squares and Ridge.  "
      ],
      "metadata": {
        "id": "1g6IJzROIm0q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Combine all test results from regression models\n",
        "models= pd.concat([linear_reg,ridge_reg,ridge_reg_tuned,lasso_reg,lasso_reg_tuned,elasticnet_reg,\n",
        "                   elasticnet_reg_tuned], axis=0)\n",
        "models['Models'] = ['Least Squares', 'Ridge Regression', 'Ridge Regression Tuned', 'Lasso Regression',\n",
        "                                      'Lasso Regression Tuned', 'Elastic Net Regression',\n",
        "                    'Elastic Net Regression Tuned']\n",
        "models = models.iloc[:,[6, 0,1,2,3,4,5]]\n",
        "models"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "zX5C9Wy2O_N5",
        "outputId": "6dc097e2-63e4-4ab7-82d2-02b7ce96595b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         Models  Log Scale RMSE  Bias Corrected RMSE  \\\n",
              "0                 Least Squares        0.240070             3.834047   \n",
              "0              Ridge Regression        0.240172             3.864214   \n",
              "0        Ridge Regression Tuned        0.240097             3.847249   \n",
              "0              Lasso Regression        0.485212            38.007282   \n",
              "0        Lasso Regression Tuned        0.245953             4.224632   \n",
              "0        Elastic Net Regression        0.408666            33.947244   \n",
              "0  Elastic Net Regression Tuned        0.241151             3.957586   \n",
              "\n",
              "        MAE       MAPE  Log Scale Adjusted R2  Log Scale R2  \n",
              "0  1.714791  18.817033               0.925068      0.927146  \n",
              "0  1.718717  18.821396               0.925004      0.927084  \n",
              "0  1.716942  18.819915               0.925051      0.927129  \n",
              "0  5.288043  43.164880               0.693904      0.702393  \n",
              "0  1.800439  19.244974               0.921350      0.923531  \n",
              "0  4.609145  33.983437               0.782864      0.788885  \n",
              "0  1.736379  18.891943               0.924391      0.926488  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8b33231f-ea8b-466c-9402-75f3e251090a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Models</th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Least Squares</td>\n",
              "      <td>0.240070</td>\n",
              "      <td>3.834047</td>\n",
              "      <td>1.714791</td>\n",
              "      <td>18.817033</td>\n",
              "      <td>0.925068</td>\n",
              "      <td>0.927146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Ridge Regression</td>\n",
              "      <td>0.240172</td>\n",
              "      <td>3.864214</td>\n",
              "      <td>1.718717</td>\n",
              "      <td>18.821396</td>\n",
              "      <td>0.925004</td>\n",
              "      <td>0.927084</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Ridge Regression Tuned</td>\n",
              "      <td>0.240097</td>\n",
              "      <td>3.847249</td>\n",
              "      <td>1.716942</td>\n",
              "      <td>18.819915</td>\n",
              "      <td>0.925051</td>\n",
              "      <td>0.927129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Lasso Regression</td>\n",
              "      <td>0.485212</td>\n",
              "      <td>38.007282</td>\n",
              "      <td>5.288043</td>\n",
              "      <td>43.164880</td>\n",
              "      <td>0.693904</td>\n",
              "      <td>0.702393</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Lasso Regression Tuned</td>\n",
              "      <td>0.245953</td>\n",
              "      <td>4.224632</td>\n",
              "      <td>1.800439</td>\n",
              "      <td>19.244974</td>\n",
              "      <td>0.921350</td>\n",
              "      <td>0.923531</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Elastic Net Regression</td>\n",
              "      <td>0.408666</td>\n",
              "      <td>33.947244</td>\n",
              "      <td>4.609145</td>\n",
              "      <td>33.983437</td>\n",
              "      <td>0.782864</td>\n",
              "      <td>0.788885</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Elastic Net Regression Tuned</td>\n",
              "      <td>0.241151</td>\n",
              "      <td>3.957586</td>\n",
              "      <td>1.736379</td>\n",
              "      <td>18.891943</td>\n",
              "      <td>0.924391</td>\n",
              "      <td>0.926488</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b33231f-ea8b-466c-9402-75f3e251090a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8b33231f-ea8b-466c-9402-75f3e251090a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8b33231f-ea8b-466c-9402-75f3e251090a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c42153de-3ee6-4cb5-8765-bd310626198b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c42153de-3ee6-4cb5-8765-bd310626198b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c42153de-3ee6-4cb5-8765-bd310626198b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_6aa122fc-f4b6-4acd-a1e0-abbc37ccf351\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('models')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6aa122fc-f4b6-4acd-a1e0-abbc37ccf351 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('models');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "models",
              "summary": "{\n  \"name\": \"models\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"Models\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Least Squares\",\n          \"Ridge Regression\",\n          \"Elastic Net Regression\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10267703174953574,\n        \"min\": 0.24006970184441045,\n        \"max\": 0.48521224171519794,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.24006970184441045,\n          0.2401715408936942,\n          0.40866642018121835\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.674327080239877,\n        \"min\": 3.834046670363668,\n        \"max\": 38.00728203684354,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          3.834046670363668,\n          3.864213558804359,\n          33.94724366373531\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5793621839268257,\n        \"min\": 1.714790592246249,\n        \"max\": 5.28804304578807,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.714790592246249,\n          1.7187171092575313,\n          4.609144933688287\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.951352411267184,\n        \"min\": 18.81703262580988,\n        \"max\": 43.16488020576443,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          18.81703262580988,\n          18.821395744578346,\n          33.98343664492025\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09423188299708966,\n        \"min\": 0.6939040251886441,\n        \"max\": 0.9250677409285275,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.9250677409285275,\n          0.9250041539908099,\n          0.7828639031611843\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09161868601991024,\n        \"min\": 0.7023925436248992,\n        \"max\": 0.9271457292555234,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.9271457292555234,\n          0.9270839056826898,\n          0.7888854255360821\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 148
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The best fitting model is Least Squares but Ridge and Ridge Tunned are nearly identical in performance, and Elastic Net Tuned is also extremely close, and really with that Lasso Tuned is right behind them. There has not been added improvement with the many techinques applied from these modeling methods."
      ],
      "metadata": {
        "id": "uyYPaVuDJizn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Forward Feature Selection using SequentialFeatureSelector"
      ],
      "metadata": {
        "id": "GM4Pfao7a119"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initializing and fitting the model\n",
        "reg = LinearRegression()\n",
        "sfs = SFS(\n",
        "    reg,\n",
        "    k_features=X_train.shape[1],\n",
        "    forward=True,\n",
        "    floating=False,\n",
        "    scoring=\"r2\",\n",
        "    n_jobs=-1,\n",
        "    verbose=2,\n",
        "    cv=5,\n",
        ")\n",
        "sfs = sfs.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DT_DYvYTQlfb",
        "outputId": "4c6e1de2-d174-4a94-bfcf-38980569030c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  25 tasks      | elapsed:    1.7s\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:    1.7s finished\n",
            "\n",
            "[2024-04-11 15:25:13] Features: 1/50 -- score: 0.5780320355358447[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  34 out of  49 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  49 out of  49 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:13] Features: 2/50 -- score: 0.8155748607068439[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  48 out of  48 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:13] Features: 3/50 -- score: 0.8412428347829982[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  47 out of  47 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:13] Features: 4/50 -- score: 0.8582917953265126[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  46 out of  46 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:14] Features: 5/50 -- score: 0.8674605523898917[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  30 out of  45 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  45 out of  45 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:14] Features: 6/50 -- score: 0.8755041857934824[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  44 out of  44 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:14] Features: 7/50 -- score: 0.8799841960988513[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 out of  43 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  43 out of  43 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:14] Features: 8/50 -- score: 0.883721201388808[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  42 out of  42 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:15] Features: 9/50 -- score: 0.8873387622339027[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  26 out of  41 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  41 out of  41 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:15] Features: 10/50 -- score: 0.8907532239704008[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  40 out of  40 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:15] Features: 11/50 -- score: 0.8946762136969099[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  24 out of  39 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  39 out of  39 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:15] Features: 12/50 -- score: 0.8995575931054528[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  38 out of  38 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:16] Features: 13/50 -- score: 0.9048356720167371[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  22 out of  37 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  37 out of  37 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:16] Features: 14/50 -- score: 0.9075605734444782[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  36 out of  36 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:16] Features: 15/50 -- score: 0.9101360434741756[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  20 out of  35 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  35 out of  35 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:16] Features: 16/50 -- score: 0.9120464154155533[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  34 out of  34 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:17] Features: 17/50 -- score: 0.914015788742207[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  18 out of  33 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  33 out of  33 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:17] Features: 18/50 -- score: 0.9156783584485038[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  32 out of  32 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:17] Features: 19/50 -- score: 0.9170860878912152[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  31 out of  31 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:18] Features: 20/50 -- score: 0.917886338962132[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  30 out of  30 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:18] Features: 21/50 -- score: 0.9184391693662679[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  29 out of  29 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:18] Features: 22/50 -- score: 0.9189860069583118[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 out of  28 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:18] Features: 23/50 -- score: 0.9194313644333947[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  27 out of  27 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:19] Features: 24/50 -- score: 0.9198627170435433[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  26 out of  26 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:19] Features: 25/50 -- score: 0.9208712550481692[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  23 out of  25 | elapsed:    0.2s remaining:    0.0s\n",
            "[Parallel(n_jobs=-1)]: Done  25 out of  25 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:19] Features: 26/50 -- score: 0.9213171735241282[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  22 out of  24 | elapsed:    0.2s remaining:    0.0s\n",
            "[Parallel(n_jobs=-1)]: Done  24 out of  24 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:20] Features: 27/50 -- score: 0.9216503321323962[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  20 out of  23 | elapsed:    0.2s remaining:    0.0s\n",
            "[Parallel(n_jobs=-1)]: Done  23 out of  23 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:20] Features: 28/50 -- score: 0.9219090055966321[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  19 out of  22 | elapsed:    0.2s remaining:    0.0s\n",
            "[Parallel(n_jobs=-1)]: Done  22 out of  22 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:20] Features: 29/50 -- score: 0.9221535016201321[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  17 out of  21 | elapsed:    0.2s remaining:    0.0s\n",
            "[Parallel(n_jobs=-1)]: Done  21 out of  21 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:20] Features: 30/50 -- score: 0.9223499529080609[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  16 out of  20 | elapsed:    0.2s remaining:    0.0s\n",
            "[Parallel(n_jobs=-1)]: Done  20 out of  20 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:21] Features: 31/50 -- score: 0.9225148191536295[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  14 out of  19 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  19 out of  19 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:21] Features: 32/50 -- score: 0.9226382634264146[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  13 out of  18 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  18 out of  18 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:21] Features: 33/50 -- score: 0.9227246561900733[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  11 out of  17 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  17 out of  17 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:22] Features: 34/50 -- score: 0.9227980292892315[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  10 out of  16 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  16 out of  16 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:22] Features: 35/50 -- score: 0.9228058279464969[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   8 out of  15 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  15 out of  15 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:22] Features: 36/50 -- score: 0.9228152082013448[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   7 out of  14 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  14 out of  14 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:22] Features: 37/50 -- score: 0.92281522159141[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   5 out of  13 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  13 out of  13 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:23] Features: 38/50 -- score: 0.92281522159141[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   4 out of  12 | elapsed:    0.1s remaining:    0.2s\n",
            "[Parallel(n_jobs=-1)]: Done  12 out of  12 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:23] Features: 39/50 -- score: 0.9228148179210823[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   2 out of  11 | elapsed:    0.1s remaining:    0.3s\n",
            "[Parallel(n_jobs=-1)]: Done   8 out of  11 | elapsed:    0.1s remaining:    0.0s\n",
            "[Parallel(n_jobs=-1)]: Done  11 out of  11 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:23] Features: 40/50 -- score: 0.9228100705802766[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    0.1s remaining:    0.0s\n",
            "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:23] Features: 41/50 -- score: 0.9228014865871655[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   4 out of   9 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done   9 out of   9 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:24] Features: 42/50 -- score: 0.9227879655834125[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   3 out of   8 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done   8 out of   8 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:24] Features: 43/50 -- score: 0.9227722566267822[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   4 out of   7 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done   7 out of   7 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:24] Features: 44/50 -- score: 0.9227369532165554[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   3 out of   6 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done   6 out of   6 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:24] Features: 45/50 -- score: 0.9226996841962883[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   2 out of   5 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done   5 out of   5 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:24] Features: 46/50 -- score: 0.9226662962746355[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   4 out of   4 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:25] Features: 47/50 -- score: 0.9227103731071846[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   3 out of   3 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:25] Features: 48/50 -- score: 0.9225449488006735[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done   2 out of   2 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:25] Features: 49/50 -- score: 0.9221461420753153[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "\n",
            "[2024-04-11 15:25:25] Features: 50/50 -- score: 0.9220729643461603"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the performance\n",
        "fig1 = plot_sfs(sfs.get_metric_dict(), kind = 'std_err', figsize = (15, 5))\n",
        "plt.title('Sequential Forward Selection')\n",
        "plt.xticks(rotation = 90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "HShS92xaQlZY",
        "outputId": "c5d1021d-41ba-49a2-b233-9f5b9c6469ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* It looks like at about 14 features the performance becomes nearly a constant at about 0.92\n",
        "* Roughly 7 features reduces model complexity with only sacrificing performance to about 0.88\n",
        "* And for a far more simple model with still 0.85 Rsquared you could use 4 features.\n",
        "* Additonal stakeholder input would be advised for this decision, but for exploratory purposes we will run all three: 14, 7, 4."
      ],
      "metadata": {
        "id": "TWMSuHIGb-G2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Running 14 features\n",
        "reg = LinearRegression()\n",
        "sfs = SFS(reg,\n",
        "    k_features=14,\n",
        "    forward=True,\n",
        "    floating=False,\n",
        "    scoring=\"r2\",\n",
        "    n_jobs=-1,\n",
        "    verbose=2,\n",
        "    cv=5,\n",
        ")\n",
        "sfs = sfs.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9oXl-XKHQlTG",
        "outputId": "1eec8d67-f578-4663-a8e1-9e2f6bd0994f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:34] Features: 1/14 -- score: 0.5780320355358447[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  34 out of  49 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  49 out of  49 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:34] Features: 2/14 -- score: 0.8155748607068439[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  48 out of  48 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:35] Features: 3/14 -- score: 0.8412428347829982[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  47 out of  47 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:35] Features: 4/14 -- score: 0.8582917953265126[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  46 out of  46 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:35] Features: 5/14 -- score: 0.8674605523898917[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  30 out of  45 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  45 out of  45 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:35] Features: 6/14 -- score: 0.8755041857934824[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  44 out of  44 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:36] Features: 7/14 -- score: 0.8799841960988513[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  28 out of  43 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  43 out of  43 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:25:36] Features: 8/14 -- score: 0.883721201388808[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  42 out of  42 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:36] Features: 9/14 -- score: 0.8873387622339027[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  26 out of  41 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  41 out of  41 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:36] Features: 10/14 -- score: 0.8907532239704008[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  40 out of  40 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:37] Features: 11/14 -- score: 0.8946762136969099[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  24 out of  39 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  39 out of  39 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:37] Features: 12/14 -- score: 0.8995575931054528[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  38 out of  38 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:37] Features: 13/14 -- score: 0.9048356720167371[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  22 out of  37 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  37 out of  37 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:25:37] Features: 14/14 -- score: 0.9075605734444782"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Identifiying important features\n",
        "feat_cols_14 = list(sfs.k_feature_idx_)\n",
        "print(feat_cols_14)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gM7gXH_kQlP4",
        "outputId": "729fa6d2-3f66-4dac-8df9-98ca0a82eed4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 12, 16, 17, 23, 24, 25, 35, 38, 39, 46, 47]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the names of the important features\n",
        "X_train.columns[feat_cols_14]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ngyWykjLQlMX",
        "outputId": "e8cd318c-a22d-4eb3-8632-e1a4a425b776"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Mileage', 'Power', 'Age', 'Location_Kolkata', 'Fuel_Type_Petrol',\n",
              "       'Transmission_Manual', 'Brand_audi', 'Brand_bmw', 'Brand_chevrolet',\n",
              "       'Brand_land rover', 'Brand_mercedes-benz', 'Brand_mini cooper',\n",
              "       'Brand_tata', 'Brand_toyota'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying features to train data\n",
        "X_train_final_14 = X_train[X_train.columns[feat_cols_14]]"
      ],
      "metadata": {
        "id": "5pCN0YaOQlI9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying features to test data\n",
        "X_test_final_14 = X_test[X_train_final_14.columns]"
      ],
      "metadata": {
        "id": "UcHYmZ46QlGF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Running model with selected features\n",
        "lin_reg_model2 = LinearRegression()\n",
        "lin_reg_model2.fit(X_train_final_14, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "hWxdJ0BcQlDD",
        "outputId": "49cedcb6-d41a-4ccb-9322-69a4abe77ad3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" checked><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 156
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "lin_reg_model2_train_perf_14 = model_evaluation(lin_reg_model2, X_train_final_14, y_train)\n",
        "lin_reg_model2_train_perf_14"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "SLWR_0JQQlAI",
        "outputId": "bf051f4b-36f8-47a7-9b47-4f2e03177396"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.262281             4.621179  1.953873  20.985421   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.908336      0.908641  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-44d4d017-eafc-47bd-a153-48184b3ebcca\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.262281</td>\n",
              "      <td>4.621179</td>\n",
              "      <td>1.953873</td>\n",
              "      <td>20.985421</td>\n",
              "      <td>0.908336</td>\n",
              "      <td>0.908641</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44d4d017-eafc-47bd-a153-48184b3ebcca')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-44d4d017-eafc-47bd-a153-48184b3ebcca button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-44d4d017-eafc-47bd-a153-48184b3ebcca');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_ab78cb44-8de0-4a62-94af-06a83b0cc881\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lin_reg_model2_train_perf_14')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ab78cb44-8de0-4a62-94af-06a83b0cc881 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lin_reg_model2_train_perf_14');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lin_reg_model2_train_perf_14",
              "summary": "{\n  \"name\": \"lin_reg_model2_train_perf_14\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.26228058877482735,\n        \"max\": 0.26228058877482735,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.26228058877482735\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.621178763340705,\n        \"max\": 4.621178763340705,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.621178763340705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.9538731592248089,\n        \"max\": 1.9538731592248089,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.9538731592248089\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 20.98542098993433,\n        \"max\": 20.98542098993433,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          20.98542098993433\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9083360623415104,\n        \"max\": 0.9083360623415104,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9083360623415104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9086411729281055,\n        \"max\": 0.9086411729281055,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9086411729281055\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "lin_reg_model2_test_perf_14 = model_evaluation(lin_reg_model2, X_test_final_14, y_test)\n",
        "lin_reg_model2_test_perf_14"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "TCbCyxK6Qk8r",
        "outputId": "cc794859-72a1-4bd6-fb25-3baf0c71da42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.263039             4.236363  1.891311  20.758741   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.911853      0.912538  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ed948de1-0ff8-4dc7-8f24-056e9b8a5e66\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.263039</td>\n",
              "      <td>4.236363</td>\n",
              "      <td>1.891311</td>\n",
              "      <td>20.758741</td>\n",
              "      <td>0.911853</td>\n",
              "      <td>0.912538</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed948de1-0ff8-4dc7-8f24-056e9b8a5e66')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ed948de1-0ff8-4dc7-8f24-056e9b8a5e66 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ed948de1-0ff8-4dc7-8f24-056e9b8a5e66');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_938bd132-8ad2-456c-838b-a6d33fe003da\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lin_reg_model2_test_perf_14')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_938bd132-8ad2-456c-838b-a6d33fe003da button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lin_reg_model2_test_perf_14');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lin_reg_model2_test_perf_14",
              "summary": "{\n  \"name\": \"lin_reg_model2_test_perf_14\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2630389342620615,\n        \"max\": 0.2630389342620615,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2630389342620615\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.236363014545135,\n        \"max\": 4.236363014545135,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.236363014545135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.8913111886859848,\n        \"max\": 1.8913111886859848,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.8913111886859848\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 20.758740669891196,\n        \"max\": 20.758740669891196,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          20.758740669891196\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9118533588912515,\n        \"max\": 0.9118533588912515,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9118533588912515\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9125378031372429,\n        \"max\": 0.9125378031372429,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9125378031372429\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 158
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Values look solid with 14 features, slightly lower Rsqaured value, but overall strong model."
      ],
      "metadata": {
        "id": "yzP81NnziFwG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Running 7 features\n",
        "reg = LinearRegression()\n",
        "sfs = SFS(\n",
        "    reg,\n",
        "    k_features=7,\n",
        "    forward=True,\n",
        "    floating=False,\n",
        "    scoring='r2',\n",
        "    n_jobs=-1,\n",
        "    verbose=2,\n",
        "    cv=5,\n",
        ")\n",
        "sfs = sfs.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X7s5Ku2aiZ3b",
        "outputId": "300af070-0e54-471f-8123-1420ea974630"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:26:01] Features: 1/7 -- score: 0.5780320355358447[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  34 out of  49 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  49 out of  49 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:26:01] Features: 2/7 -- score: 0.8155748607068439[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  48 out of  48 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:26:01] Features: 3/7 -- score: 0.8412428347829982[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  47 out of  47 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:26:01] Features: 4/7 -- score: 0.8582917953265126[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  31 out of  46 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  46 out of  46 | elapsed:    0.2s finished\n",
            "\n",
            "[2024-04-11 15:26:02] Features: 5/7 -- score: 0.8674605523898917[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  30 out of  45 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  45 out of  45 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:26:02] Features: 6/7 -- score: 0.8755041857934824[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  44 out of  44 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:26:02] Features: 7/7 -- score: 0.8799841960988513"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Identifiying important features\n",
        "feat_cols_7 = list(sfs.k_feature_idx_)\n",
        "print(feat_cols_7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "emo06rhlieTn",
        "outputId": "84e2fbae-c00e-4e73-ed47-5bfa2db444fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 12, 16, 17, 46]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the names of the important features\n",
        "X_train.columns[feat_cols_7]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UFIZiirwieK3",
        "outputId": "1d644444-b61c-436f-910d-7a75ef2f3357"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Mileage', 'Power', 'Age', 'Location_Kolkata', 'Fuel_Type_Petrol',\n",
              "       'Transmission_Manual', 'Brand_tata'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying features to train data\n",
        "X_train_final_7 = X_train[X_train.columns[feat_cols_7]]"
      ],
      "metadata": {
        "id": "m41BIh1mieBx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying features to test data\n",
        "X_test_final_7 = X_test[X_train_final_7.columns]"
      ],
      "metadata": {
        "id": "uB0XQL1finOY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Running model with selected features\n",
        "lin_reg_model2 = LinearRegression()\n",
        "lin_reg_model2.fit(X_train_final_7, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "DyVBrDyJim9q",
        "outputId": "772db9f3-0055-4aad-fb0a-43def224011e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" checked><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 164
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "lin_reg_model2_train_perf_7 = model_evaluation(lin_reg_model2, X_train_final_7, y_train)\n",
        "lin_reg_model2_train_perf_7"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "kAvS4rlZimsA",
        "outputId": "31c18f39-08eb-4be8-fa63-d985af60bfa7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.299545             6.355675  2.437212  24.592887   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.880638      0.880837  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aff9781a-5b44-40ae-b469-69c115c1c302\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.299545</td>\n",
              "      <td>6.355675</td>\n",
              "      <td>2.437212</td>\n",
              "      <td>24.592887</td>\n",
              "      <td>0.880638</td>\n",
              "      <td>0.880837</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aff9781a-5b44-40ae-b469-69c115c1c302')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aff9781a-5b44-40ae-b469-69c115c1c302 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aff9781a-5b44-40ae-b469-69c115c1c302');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_f0ce46e5-d686-4141-b148-90334054526f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lin_reg_model2_train_perf_7')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f0ce46e5-d686-4141-b148-90334054526f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lin_reg_model2_train_perf_7');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lin_reg_model2_train_perf_7",
              "summary": "{\n  \"name\": \"lin_reg_model2_train_perf_7\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2995449858511891,\n        \"max\": 0.2995449858511891,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2995449858511891\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 6.355675064737503,\n        \"max\": 6.355675064737503,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6.355675064737503\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.43721208089414,\n        \"max\": 2.43721208089414,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.43721208089414\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 24.592887341801074,\n        \"max\": 24.592887341801074,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          24.592887341801074\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8806381015795789,\n        \"max\": 0.8806381015795789,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8806381015795789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8808367542873637,\n        \"max\": 0.8808367542873637,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8808367542873637\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 165
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "lin_reg_model2_test_perf_7 = model_evaluation(lin_reg_model2, X_test_final_7, y_test)\n",
        "lin_reg_model2_test_perf_7"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "nufWmZUYjKqh",
        "outputId": "2e194ec3-88b1-414f-f096-9fafda19b4a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0         0.29489             6.238849  2.347605  23.355153   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.889646      0.890074  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-64e4e893-e96d-4482-8af9-503ef1aeacf1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.29489</td>\n",
              "      <td>6.238849</td>\n",
              "      <td>2.347605</td>\n",
              "      <td>23.355153</td>\n",
              "      <td>0.889646</td>\n",
              "      <td>0.890074</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64e4e893-e96d-4482-8af9-503ef1aeacf1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-64e4e893-e96d-4482-8af9-503ef1aeacf1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-64e4e893-e96d-4482-8af9-503ef1aeacf1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_2966d7f2-5c85-4cbd-afb9-a0ed440968e3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lin_reg_model2_test_perf_7')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2966d7f2-5c85-4cbd-afb9-a0ed440968e3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lin_reg_model2_test_perf_7');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lin_reg_model2_test_perf_7",
              "summary": "{\n  \"name\": \"lin_reg_model2_test_perf_7\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.29488967280666023,\n        \"max\": 0.29488967280666023,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.29488967280666023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 6.238848981696353,\n        \"max\": 6.238848981696353,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6.238848981696353\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.347604650163048,\n        \"max\": 2.347604650163048,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.347604650163048\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 23.355153360277754,\n        \"max\": 23.355153360277754,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          23.355153360277754\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8896458091455768,\n        \"max\": 0.8896458091455768,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8896458091455768\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8900742502637027,\n        \"max\": 0.8900742502637027,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8900742502637027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 166
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Slight worse Rquared value."
      ],
      "metadata": {
        "id": "mMicNnxHidoZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Running 4 features\n",
        "reg = LinearRegression()\n",
        "sfs = SFS(\n",
        "    reg,\n",
        "    k_features=4,\n",
        "    forward=True,\n",
        "    floating=False,\n",
        "    scoring='r2',\n",
        "    n_jobs=-1,\n",
        "    verbose=2,\n",
        "    cv=5,\n",
        ")\n",
        "sfs = sfs.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LvJcfRreid5B",
        "outputId": "cebf9793-1174-4124-c7fc-be48cd74b7f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:26:25] Features: 1/4 -- score: 0.5780320355358447[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  34 out of  49 | elapsed:    0.1s remaining:    0.1s\n",
            "[Parallel(n_jobs=-1)]: Done  49 out of  49 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:26:25] Features: 2/4 -- score: 0.8155748607068439[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  48 out of  48 | elapsed:    0.1s finished\n",
            "\n",
            "[2024-04-11 15:26:26] Features: 3/4 -- score: 0.8412428347829982[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
            "[Parallel(n_jobs=-1)]: Done  47 out of  47 | elapsed:    0.4s finished\n",
            "\n",
            "[2024-04-11 15:26:26] Features: 4/4 -- score: 0.8582917953265126"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Identifiying important features\n",
        "feat_cols_4 = list(sfs.k_feature_idx_)\n",
        "print(feat_cols_4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DpQ-pc4vipsM",
        "outputId": "15c7c0bb-ce30-42bd-fa49-d41dbb2191f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 3, 16, 17]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the names of the important features\n",
        "X_train.columns[feat_cols_4]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IIpfs0Iaiphg",
        "outputId": "c3420d04-27fe-46db-b20d-10836005b53f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Power', 'Age', 'Fuel_Type_Petrol', 'Transmission_Manual'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying features to train data\n",
        "X_train_final_4 = X_train[X_train.columns[feat_cols_4]]"
      ],
      "metadata": {
        "id": "2_GibCY0ipUb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying features to test data\n",
        "X_test_final_4 = X_test[X_train_final_4.columns]"
      ],
      "metadata": {
        "id": "CcdjGEE9ipJH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Running model with selected features\n",
        "lin_reg_model2 = LinearRegression()\n",
        "lin_reg_model2.fit(X_train_final_4, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "IJHH9aQZio8P",
        "outputId": "8cfd7cf7-01af-480c-896f-0ce0322faac4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-13 {color: black;background-color: white;}#sk-container-id-13 pre{padding: 0;}#sk-container-id-13 div.sk-toggleable {background-color: white;}#sk-container-id-13 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-13 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-13 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-13 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-13 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-13 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-13 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-13 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-13 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-13 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-13 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-13 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-13 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-13 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-13 div.sk-item {position: relative;z-index: 1;}#sk-container-id-13 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-13 div.sk-item::before, #sk-container-id-13 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-13 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-13 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-13 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-13 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-13 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-13 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-13 div.sk-label-container {text-align: center;}#sk-container-id-13 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-13 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-13\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" checked><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 172
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "lin_reg_model2_train_perf_4 = model_evaluation(lin_reg_model2, X_train_final_4, y_train)\n",
        "lin_reg_model2_train_perf_4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "L0ksRhboioug",
        "outputId": "d6a43f6f-89e5-44a0-9049-2c5ab316ad89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.326007             8.435022  2.633454  27.085707   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.858719      0.858853  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d12001cb-293d-4db2-9328-bc6c92f47edd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.326007</td>\n",
              "      <td>8.435022</td>\n",
              "      <td>2.633454</td>\n",
              "      <td>27.085707</td>\n",
              "      <td>0.858719</td>\n",
              "      <td>0.858853</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d12001cb-293d-4db2-9328-bc6c92f47edd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d12001cb-293d-4db2-9328-bc6c92f47edd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d12001cb-293d-4db2-9328-bc6c92f47edd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_d05b4d49-0a63-417f-86a8-e67f4f06cc59\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lin_reg_model2_train_perf_4')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d05b4d49-0a63-417f-86a8-e67f4f06cc59 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lin_reg_model2_train_perf_4');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lin_reg_model2_train_perf_4",
              "summary": "{\n  \"name\": \"lin_reg_model2_train_perf_4\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.3260065323497932,\n        \"max\": 0.3260065323497932,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.3260065323497932\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 8.435021827651488,\n        \"max\": 8.435021827651488,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          8.435021827651488\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.633454282517609,\n        \"max\": 2.633454282517609,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.633454282517609\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 27.085706901016398,\n        \"max\": 27.085706901016398,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          27.085706901016398\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8587189088984313,\n        \"max\": 0.8587189088984313,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8587189088984313\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8588532703735635,\n        \"max\": 0.8588532703735635,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8588532703735635\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 173
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "lin_reg_model2_test_perf_4 = model_evaluation(lin_reg_model2, X_test_final_4, y_test)\n",
        "lin_reg_model2_test_perf_4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "_Z2EPs8BjMJR",
        "outputId": "1c7b9d6a-ce7b-41c7-a8c0-ba1abaf262d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.329779              9.58314  2.736957  26.306621   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.862219      0.862525  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5b0f6a3f-95f8-45cc-bed6-446010056499\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.329779</td>\n",
              "      <td>9.58314</td>\n",
              "      <td>2.736957</td>\n",
              "      <td>26.306621</td>\n",
              "      <td>0.862219</td>\n",
              "      <td>0.862525</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b0f6a3f-95f8-45cc-bed6-446010056499')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5b0f6a3f-95f8-45cc-bed6-446010056499 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5b0f6a3f-95f8-45cc-bed6-446010056499');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_966c6f16-276c-4183-880e-cb52ae496687\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lin_reg_model2_test_perf_4')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_966c6f16-276c-4183-880e-cb52ae496687 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lin_reg_model2_test_perf_4');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lin_reg_model2_test_perf_4",
              "summary": "{\n  \"name\": \"lin_reg_model2_test_perf_4\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.32977858560417606,\n        \"max\": 0.32977858560417606,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.32977858560417606\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9.583140247625149,\n        \"max\": 9.583140247625149,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9.583140247625149\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.7369568178391344,\n        \"max\": 2.7369568178391344,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.7369568178391344\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 26.3066206573629,\n        \"max\": 26.3066206573629,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          26.3066206573629\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.862218859745239,\n        \"max\": 0.862218859745239,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.862218859745239\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8625245306054825,\n        \"max\": 0.8625245306054825,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8625245306054825\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 174
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* While definetely not as strong as the best model with Least Squares, for using 4 features its a fairly strong model, and what it lacks in performance it makes up for in simplicity."
      ],
      "metadata": {
        "id": "hZfrTIKLi8O7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Confirming common features\n",
        "common_features = set(feat_cols_4) & set(feat_cols_7) & set(feat_cols_14)\n",
        "common_features_list = list(common_features)\n",
        "common_features_list"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r9i5Wodsl9Ui",
        "outputId": "c531dfe2-cd3c-40c7-c9a2-882abc5bf087"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[16, 17, 2, 3]"
            ]
          },
          "metadata": {},
          "execution_count": 175
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking the names of the important features\n",
        "X_train.columns[common_features_list]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Em4KC6EnmORr",
        "outputId": "db9d914e-d1fc-44ea-bb21-438d9149e392"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Fuel_Type_Petrol', 'Transmission_Manual', 'Power', 'Age'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 176
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking testing performance across feature selection\n",
        "models_test_comp_df = pd.concat(\n",
        "    [linear_reg.T, lin_reg_model2_test_perf_14.T, lin_reg_model2_test_perf_7.T, lin_reg_model2_test_perf_4.T], axis=1,\n",
        ")\n",
        "models_test_comp_df.columns = [\n",
        "    'Least Squares',\n",
        "    'LS: SFS 14',\n",
        "    'LS: SFS 7',\n",
        "    'LS: SFS 4',\n",
        "]\n",
        "models_test_comp_df.T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        },
        "id": "PbRrzRy9RcJe",
        "outputId": "825d5241-fa89-41c6-e316-ea858a4a1cf1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "Least Squares        0.240070             3.834047  1.714791  18.817033   \n",
              "LS: SFS 14           0.263039             4.236363  1.891311  20.758741   \n",
              "LS: SFS 7            0.294890             6.238849  2.347605  23.355153   \n",
              "LS: SFS 4            0.329779             9.583140  2.736957  26.306621   \n",
              "\n",
              "               Log Scale Adjusted R2  Log Scale R2  \n",
              "Least Squares               0.925068      0.927146  \n",
              "LS: SFS 14                  0.911853      0.912538  \n",
              "LS: SFS 7                   0.889646      0.890074  \n",
              "LS: SFS 4                   0.862219      0.862525  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1d0a3987-3bee-4b78-bb6a-fb36e0a28a99\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Least Squares</th>\n",
              "      <td>0.240070</td>\n",
              "      <td>3.834047</td>\n",
              "      <td>1.714791</td>\n",
              "      <td>18.817033</td>\n",
              "      <td>0.925068</td>\n",
              "      <td>0.927146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LS: SFS 14</th>\n",
              "      <td>0.263039</td>\n",
              "      <td>4.236363</td>\n",
              "      <td>1.891311</td>\n",
              "      <td>20.758741</td>\n",
              "      <td>0.911853</td>\n",
              "      <td>0.912538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LS: SFS 7</th>\n",
              "      <td>0.294890</td>\n",
              "      <td>6.238849</td>\n",
              "      <td>2.347605</td>\n",
              "      <td>23.355153</td>\n",
              "      <td>0.889646</td>\n",
              "      <td>0.890074</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LS: SFS 4</th>\n",
              "      <td>0.329779</td>\n",
              "      <td>9.583140</td>\n",
              "      <td>2.736957</td>\n",
              "      <td>26.306621</td>\n",
              "      <td>0.862219</td>\n",
              "      <td>0.862525</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d0a3987-3bee-4b78-bb6a-fb36e0a28a99')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1d0a3987-3bee-4b78-bb6a-fb36e0a28a99 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1d0a3987-3bee-4b78-bb6a-fb36e0a28a99');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-27c8e823-c49a-422f-8026-154c1357644f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-27c8e823-c49a-422f-8026-154c1357644f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-27c8e823-c49a-422f-8026-154c1357644f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"models_test_comp_df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0390153661212233,\n        \"min\": 0.24006970184441045,\n        \"max\": 0.32977858560417606,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.2630389342620615,\n          0.32977858560417606,\n          0.24006970184441045\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.626456269984389,\n        \"min\": 3.834046670363668,\n        \"max\": 9.583140247625149,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4.236363014545135,\n          9.583140247625149,\n          3.834046670363668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4610994387669165,\n        \"min\": 1.714790592246249,\n        \"max\": 2.7369568178391344,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.8913111886859848,\n          2.7369568178391344,\n          1.714790592246249\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.2492331047929865,\n        \"min\": 18.81703262580988,\n        \"max\": 26.3066206573629,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          20.758740669891196,\n          26.3066206573629,\n          18.81703262580988\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02752016129804509,\n        \"min\": 0.862218859745239,\n        \"max\": 0.9250677409285275,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9118533588912515,\n          0.862218859745239,\n          0.9250677409285275\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.028178761306717023,\n        \"min\": 0.8625245306054825,\n        \"max\": 0.9271457292555234,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9125378031372429,\n          0.8625245306054825,\n          0.9271457292555234\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 177
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The performance values range from 0.927 to 0.862, all acceptable Rsquared values.\n",
        "* We can see that Age, Power, Petrol, and Manual Transmission are the key components in this feature selection.  \n",
        "* The reduction in complexity does come at a cost to performance, but identifying these key components are certainly useful to make quick decisions perhaps for instance at an auction of vehicles."
      ],
      "metadata": {
        "id": "58TMiqyzqYPC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Tree Based Models**"
      ],
      "metadata": {
        "id": "AM25acLIr2FK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Decision Tree Regressor**"
      ],
      "metadata": {
        "id": "SSAWLL2SWptl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initalizing and fitting model\n",
        "dt_regressor = DecisionTreeRegressor(random_state = 1)\n",
        "dt_regressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "osqosy12RcFo",
        "outputId": "07644f7c-81d5-42f7-e3c9-b930a3e206af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(random_state=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-14 {color: black;background-color: white;}#sk-container-id-14 pre{padding: 0;}#sk-container-id-14 div.sk-toggleable {background-color: white;}#sk-container-id-14 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-14 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-14 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-14 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-14 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-14 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-14 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-14 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-14 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-14 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-14 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-14 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-14 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-14 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-14 div.sk-item {position: relative;z-index: 1;}#sk-container-id-14 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-14 div.sk-item::before, #sk-container-id-14 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-14 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-14 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-14 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-14 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-14 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-14 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-14 div.sk-label-container {text-align: center;}#sk-container-id-14 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-14 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-14\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" checked><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(random_state=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 178
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "dt_regressor_perf_train = model_evaluation(dt_regressor, X_train, y_train)\n",
        "dt_regressor_perf_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "VIIOjeOP1MdN",
        "outputId": "862f92be-471f-405b-b178-dcbb3b810970"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE     MAPE  \\\n",
              "0        0.030945             0.299776  0.070113  0.92228   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.998713      0.998728  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8c553f9c-7d26-408c-b270-2adee3e25326\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.030945</td>\n",
              "      <td>0.299776</td>\n",
              "      <td>0.070113</td>\n",
              "      <td>0.92228</td>\n",
              "      <td>0.998713</td>\n",
              "      <td>0.998728</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c553f9c-7d26-408c-b270-2adee3e25326')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8c553f9c-7d26-408c-b270-2adee3e25326 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8c553f9c-7d26-408c-b270-2adee3e25326');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_d138bf81-e8a7-466e-b289-071a959121c4\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dt_regressor_perf_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d138bf81-e8a7-466e-b289-071a959121c4 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dt_regressor_perf_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dt_regressor_perf_train",
              "summary": "{\n  \"name\": \"dt_regressor_perf_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.03094509018306303,\n        \"max\": 0.03094509018306303,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.03094509018306303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.29977639834219566,\n        \"max\": 0.29977639834219566,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.29977639834219566\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.0701126781861498,\n        \"max\": 0.0701126781861498,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0701126781861498\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9222803130195528,\n        \"max\": 0.9222803130195528,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9222803130195528\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9987129499073762,\n        \"max\": 0.9987129499073762,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9987129499073762\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9987282500749063,\n        \"max\": 0.9987282500749063,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9987282500749063\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 179
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "dt_regressor_perf_test = model_evaluation(dt_regressor, X_test, y_test)\n",
        "dt_regressor_perf_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "_9ENHQ-e1MK0",
        "outputId": "e53993b4-7c51-4354-d75f-a553e9c59576"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.311411             5.305807  1.943864  20.213113   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.873915      0.877412  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-742519e4-0e4e-499a-b415-e288458c0067\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.311411</td>\n",
              "      <td>5.305807</td>\n",
              "      <td>1.943864</td>\n",
              "      <td>20.213113</td>\n",
              "      <td>0.873915</td>\n",
              "      <td>0.877412</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-742519e4-0e4e-499a-b415-e288458c0067')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-742519e4-0e4e-499a-b415-e288458c0067 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-742519e4-0e4e-499a-b415-e288458c0067');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_73bb20cf-1c6e-439e-ae3f-71d0137b01d6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dt_regressor_perf_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_73bb20cf-1c6e-439e-ae3f-71d0137b01d6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dt_regressor_perf_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dt_regressor_perf_test",
              "summary": "{\n  \"name\": \"dt_regressor_perf_test\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.31141107705316057,\n        \"max\": 0.31141107705316057,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.31141107705316057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.305807444514288,\n        \"max\": 5.305807444514288,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.305807444514288\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.9438643518296228,\n        \"max\": 1.9438643518296228,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.9438643518296228\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 20.213113485278004,\n        \"max\": 20.213113485278004,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          20.213113485278004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8739153454254165,\n        \"max\": 0.8739153454254165,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8739153454254165\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8774118694014171,\n        \"max\": 0.8774118694014171,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8774118694014171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Overall the metrics are acceptable, there is some overfitting, and while this is common in DT hopefully the tuning or pruning will provide better generalization."
      ],
      "metadata": {
        "id": "1WuQZTik1sDu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Displaying Decision Tree\n",
        "features = list(X_train.columns)\n",
        "dt_regressor_visualize = DecisionTreeRegressor(random_state = 1, max_depth= 2)\n",
        "dt_regressor_visualize.fit(X_train, y_train)\n",
        "\n",
        "plt.figure(figsize = (15, 6))\n",
        "tree.plot_tree(dt_regressor_visualize, feature_names = features, filled = True, fontsize = 8,\n",
        "               node_ids = True, class_names = True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 498
        },
        "id": "p5rbbJMBULOH",
        "outputId": "12de4f30-9268-4e09-e47a-7d4e9ac1c023"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(tree.export_text(dt_regressor_visualize, feature_names=X_train.columns.tolist(), show_weights=True))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TWTFWOYJULK_",
        "outputId": "6925f9de-c661-440f-b7d4-ede76c993892"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|--- Power <= 138.50\n",
            "|   |--- Age <= 8.50\n",
            "|   |   |--- value: [1.69]\n",
            "|   |--- Age >  8.50\n",
            "|   |   |--- value: [0.89]\n",
            "|--- Power >  138.50\n",
            "|   |--- Age <= 7.50\n",
            "|   |   |--- value: [3.16]\n",
            "|   |--- Age >  7.50\n",
            "|   |   |--- value: [2.39]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Isolating leaf node values\n",
        "tree_ = dt_regressor_visualize.tree_\n",
        "leaf_values = [tree_.value[i] for i in range(tree_.node_count) if tree_.children_left[i] == -1 and tree_.children_right[i] == -1]\n",
        "for value in leaf_values:\n",
        "    print(value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ui1c3dbIc2l_",
        "outputId": "7e89106e-0fe1-4306-de30-2d5ff014a56e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1.6890315]]\n",
            "[[0.88527094]]\n",
            "[[3.16240364]]\n",
            "[[2.38535615]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting leaf node values to original Price scale\n",
        "original_scale_values = [np.exp(value) for value in leaf_values]\n",
        "for value in original_scale_values:\n",
        "    print(np.round(value, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UBtJ0IVXdC1s",
        "outputId": "31f9bdac-8e84-49df-b983-4860f2222793"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[5.41]]\n",
            "[[2.42]]\n",
            "[[23.63]]\n",
            "[[10.86]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* A max depth of 2 was choosen, adding an additional depth only created more instances where different levels of power were used for classification. The simplicity of the model is key, which is maximized at 2.\n",
        "* The Power of the vehicle results in the highest information gain.  \n",
        "  * A Power is split at less than or equal to 138.50\n",
        "* The internal node is Age based.\n",
        "  * The intermediate nodes are Age less than or equal to 8.50 and Age less than or equal to 7.5 respectively.\n",
        "\n",
        "**Results:**\n",
        "* If a vehicle has less than or equal to 138.50 Power, and an Age of less than or equal to 8.5 years, the predicted Price value of the vehicle is 5.41 per 100,000 INR.\n",
        "* If a vehicle has less than or equal to 138.50 Power, and an Age of more than 8.5 years, the predicted Price value of the vehicle is 2.42 per 100,000 INR.\n",
        "* If a vehicle has more than 138.55 Power, and an Age of less than or equal to 7.5 years, the predicted Price value of the vehicle is 23.63 per 100,000 INR.\n",
        "* If a vehicle has more than 138.55 Power, and an Age more than 7.5 years, the predicted Price value of the vehicle is 10.86 per 100,000 INR.\n",
        "\n",
        "**Indicaiton:**\n",
        "* High power, low age vehicles have the highest prices."
      ],
      "metadata": {
        "id": "ddW6myttd-Ac"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Hyperparameter Tuning: Decision Tree**"
      ],
      "metadata": {
        "id": "Q67mJf4munpd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying Grid Search CV and determining the hyperparameters\n",
        "dt_regressor = DecisionTreeRegressor(random_state=1)\n",
        "param_grid = {\n",
        "    'max_depth': [None, 5, 10, 15],\n",
        "    'min_samples_split': [2, 5, 10],\n",
        "    'min_samples_leaf': [1, 2, 4],\n",
        "    'max_features': ['auto', 'sqrt', 'log2', None]\n",
        "}\n",
        "grid_search = GridSearchCV(estimator=dt_regressor, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error', verbose=1, n_jobs=-1)\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "print('Best parameters:', grid_search.best_params_)\n",
        "print('Best score:', -grid_search.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3B42cwLFqilR",
        "outputId": "167613f3-7141-4825-d1e8-7beb8392f20c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 144 candidates, totalling 720 fits\n",
            "Best parameters: {'max_depth': 15, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10}\n",
            "Best score: 0.07821572906938816\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initalizing and fitting model with hyperparameters\n",
        "dt_regressor_optimized = DecisionTreeRegressor(**grid_search.best_params_, random_state=42)\n",
        "dt_regressor_optimized.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "7ygnEQ6-toa9",
        "outputId": "195c415b-ce16-483f-ce93-41eb6a53551e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(max_depth=15, max_features='auto', min_samples_leaf=2,\n",
              "                      min_samples_split=10, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-15 {color: black;background-color: white;}#sk-container-id-15 pre{padding: 0;}#sk-container-id-15 div.sk-toggleable {background-color: white;}#sk-container-id-15 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-15 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-15 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-15 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-15 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-15 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-15 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-15 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-15 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-15 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-15 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-15 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-15 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-15 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-15 div.sk-item {position: relative;z-index: 1;}#sk-container-id-15 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-15 div.sk-item::before, #sk-container-id-15 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-15 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-15 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-15 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-15 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-15 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-15 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-15 div.sk-label-container {text-align: center;}#sk-container-id-15 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-15 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-15\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(max_depth=15, max_features=&#x27;auto&#x27;, min_samples_leaf=2,\n",
              "                      min_samples_split=10, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" checked><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(max_depth=15, max_features=&#x27;auto&#x27;, min_samples_leaf=2,\n",
              "                      min_samples_split=10, random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 186
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "dt_tuned_regressor_perf_train = model_evaluation(dt_regressor_optimized, X_train, y_train)\n",
        "dt_tuned_regressor_perf_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "WIuozRrkwIim",
        "outputId": "73fe7927-3a19-4544-bb52-4abd04bd1fb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE      MAE       MAPE  \\\n",
              "0        0.158697             2.832673  1.10491  11.686395   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.966151      0.966553  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-da53b030-b65a-4222-a261-c3c680aaf5d2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.158697</td>\n",
              "      <td>2.832673</td>\n",
              "      <td>1.10491</td>\n",
              "      <td>11.686395</td>\n",
              "      <td>0.966151</td>\n",
              "      <td>0.966553</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-da53b030-b65a-4222-a261-c3c680aaf5d2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-da53b030-b65a-4222-a261-c3c680aaf5d2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-da53b030-b65a-4222-a261-c3c680aaf5d2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_3156eaba-f87d-401a-8da1-153b9b429bfd\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dt_tuned_regressor_perf_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3156eaba-f87d-401a-8da1-153b9b429bfd button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dt_tuned_regressor_perf_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dt_tuned_regressor_perf_train",
              "summary": "{\n  \"name\": \"dt_tuned_regressor_perf_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1586973554002666,\n        \"max\": 0.1586973554002666,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1586973554002666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.8326734467813894,\n        \"max\": 2.8326734467813894,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.8326734467813894\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.1049096319225982,\n        \"max\": 1.1049096319225982,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.1049096319225982\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 11.68639515761901,\n        \"max\": 11.68639515761901,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          11.68639515761901\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9661505728039572,\n        \"max\": 0.9661505728039572,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9661505728039572\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9665529673260215,\n        \"max\": 0.9665529673260215,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9665529673260215\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 187
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "dt_tuned_regressor_perf_test = model_evaluation(dt_regressor_optimized, X_test, y_test)\n",
        "dt_tuned_regressor_perf_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "-4bOGFuowSw1",
        "outputId": "5b3764a2-9993-49f6-d147-860915d8c3fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE      MAPE  \\\n",
              "0        0.276085             5.215787  1.962174  19.42777   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.900899      0.903647  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-db5c6ad0-4224-4f07-9c9d-ceb0751458c3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.276085</td>\n",
              "      <td>5.215787</td>\n",
              "      <td>1.962174</td>\n",
              "      <td>19.42777</td>\n",
              "      <td>0.900899</td>\n",
              "      <td>0.903647</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-db5c6ad0-4224-4f07-9c9d-ceb0751458c3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-db5c6ad0-4224-4f07-9c9d-ceb0751458c3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-db5c6ad0-4224-4f07-9c9d-ceb0751458c3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_8240c2ed-77ac-4a98-850c-3a205d82db6a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dt_tuned_regressor_perf_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_8240c2ed-77ac-4a98-850c-3a205d82db6a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dt_tuned_regressor_perf_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dt_tuned_regressor_perf_test",
              "summary": "{\n  \"name\": \"dt_tuned_regressor_perf_test\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2760847168030931,\n        \"max\": 0.2760847168030931,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2760847168030931\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.215787211339328,\n        \"max\": 5.215787211339328,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.215787211339328\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.9621743470678383,\n        \"max\": 1.9621743470678383,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.9621743470678383\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 19.427770002044674,\n        \"max\": 19.427770002044674,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          19.427770002044674\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9008988139902298,\n        \"max\": 0.9008988139902298,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9008988139902298\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9036470443288257,\n        \"max\": 0.9036470443288257,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9036470443288257\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 188
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Hyperparameter tunning for the DT resulted again in an amount of overfitting.  While 0.903 is an improvement from the basic DT, as well as the RMSE difference has improved some. Model performance is still strong, but not the best so far."
      ],
      "metadata": {
        "id": "a51poy18xlgx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the most important features in the Decision Tree Tuned model\n",
        "features = list(X_train.columns)\n",
        "importances = dt_regressor_optimized.feature_importances_\n",
        "indices = np.argsort(importances)\n",
        "\n",
        "plt.figure(figsize = (6, 10))\n",
        "plt.title('Feature Importance')\n",
        "plt.barh(range(len(indices)), importances[indices], color = 'violet', align = 'center')\n",
        "plt.yticks(range(len(indices)), [features[i] for i in indices])\n",
        "plt.xlabel('Relative Importance')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 871
        },
        "id": "Cky6HP0XAeLU",
        "outputId": "74a392d5-0169-4cd3-e60c-2840c780cb4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x1000 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The most relevant features for the Tuned Decision Tree are Power, Age, Mileage, and log_Kilometers_Driven."
      ],
      "metadata": {
        "id": "T8bDloIqAnPU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Ensemble Methods:**"
      ],
      "metadata": {
        "id": "I8UKKV4yzdRb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Bagging Regressor**"
      ],
      "metadata": {
        "id": "hSnt9jYkW9GU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initalizing and fitting model\n",
        "bagging_estimator = BaggingRegressor(random_state = 1)\n",
        "bagging_estimator.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "tg_Mxo6xULH4",
        "outputId": "d2bf247e-3864-46cd-8fd5-55d4aa1157c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "BaggingRegressor(random_state=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-16 {color: black;background-color: white;}#sk-container-id-16 pre{padding: 0;}#sk-container-id-16 div.sk-toggleable {background-color: white;}#sk-container-id-16 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-16 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-16 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-16 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-16 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-16 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-16 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-16 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-16 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-16 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-16 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-16 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-16 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-16 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-16 div.sk-item {position: relative;z-index: 1;}#sk-container-id-16 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-16 div.sk-item::before, #sk-container-id-16 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-16 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-16 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-16 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-16 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-16 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-16 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-16 div.sk-label-container {text-align: center;}#sk-container-id-16 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-16 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-16\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BaggingRegressor(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" checked><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">BaggingRegressor</label><div class=\"sk-toggleable__content\"><pre>BaggingRegressor(random_state=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 190
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "bagging_estimator_perf_train = model_evaluation(bagging_estimator, X_train, y_train)\n",
        "bagging_estimator_perf_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "SQ9U2Nf92zz3",
        "outputId": "dce2c002-924e-43f6-e6b9-a43846b2cb4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE      MAPE  \\\n",
              "0        0.100369             2.234264  0.695089  6.797821   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0                0.98646      0.986621  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-01d55434-7678-4b8d-a0b8-4e08033b2631\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.100369</td>\n",
              "      <td>2.234264</td>\n",
              "      <td>0.695089</td>\n",
              "      <td>6.797821</td>\n",
              "      <td>0.98646</td>\n",
              "      <td>0.986621</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01d55434-7678-4b8d-a0b8-4e08033b2631')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-01d55434-7678-4b8d-a0b8-4e08033b2631 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-01d55434-7678-4b8d-a0b8-4e08033b2631');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_7f96f941-f5f3-4103-87b3-00c33e0b7c00\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('bagging_estimator_perf_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7f96f941-f5f3-4103-87b3-00c33e0b7c00 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('bagging_estimator_perf_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bagging_estimator_perf_train",
              "summary": "{\n  \"name\": \"bagging_estimator_perf_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.10036886178611884,\n        \"max\": 0.10036886178611884,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.10036886178611884\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.23426400104155,\n        \"max\": 2.23426400104155,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.23426400104155\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6950894309126776,\n        \"max\": 0.6950894309126776,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6950894309126776\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 6.797821017403597,\n        \"max\": 6.797821017403597,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6.797821017403597\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9864602718998978,\n        \"max\": 0.9864602718998978,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9864602718998978\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9866212292001844,\n        \"max\": 0.9866212292001844,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9866212292001844\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "bagging_estimator_perf_test = model_evaluation(bagging_estimator, X_test, y_test)\n",
        "bagging_estimator_perf_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "NuksOkLX2zk_",
        "outputId": "8325a86a-c6de-4dc6-8daf-ce805e47f210"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.234849             4.669265  1.641154  16.382006   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.928292       0.93028  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-22911b9d-2939-4958-8913-95e0686e835b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.234849</td>\n",
              "      <td>4.669265</td>\n",
              "      <td>1.641154</td>\n",
              "      <td>16.382006</td>\n",
              "      <td>0.928292</td>\n",
              "      <td>0.93028</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-22911b9d-2939-4958-8913-95e0686e835b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-22911b9d-2939-4958-8913-95e0686e835b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-22911b9d-2939-4958-8913-95e0686e835b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_40cd0a3d-d0a8-47d8-86c2-b3a5c1f1eccf\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('bagging_estimator_perf_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_40cd0a3d-d0a8-47d8-86c2-b3a5c1f1eccf button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('bagging_estimator_perf_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bagging_estimator_perf_test",
              "summary": "{\n  \"name\": \"bagging_estimator_perf_test\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.23484859108550082,\n        \"max\": 0.23484859108550082,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.23484859108550082\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.669264547499918,\n        \"max\": 4.669264547499918,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.669264547499918\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.6411541723474108,\n        \"max\": 1.6411541723474108,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.6411541723474108\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 16.38200637322488,\n        \"max\": 16.38200637322488,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          16.38200637322488\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9282915990756075,\n        \"max\": 0.9282915990756075,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9282915990756075\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9302801847917582,\n        \"max\": 0.9302801847917582,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9302801847917582\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 192
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Multiple on different trained subsets, to reduce overfitting and variance, with the same bias results in a 0.986 and a 0.930 Rsquared. There is an improvement in overfitting here. Strong model."
      ],
      "metadata": {
        "id": "v8MPwpltk7y0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Random Forest Regressor**"
      ],
      "metadata": {
        "id": "mcwM7cStXJmT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "rf_regressor = RandomForestRegressor(n_estimators = 100, random_state = 1)\n",
        "rf_regressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "jkZfI18tULEr",
        "outputId": "bbf95650-d7bd-4380-9f66-6d1382bc4b99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(random_state=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-17 {color: black;background-color: white;}#sk-container-id-17 pre{padding: 0;}#sk-container-id-17 div.sk-toggleable {background-color: white;}#sk-container-id-17 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-17 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-17 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-17 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-17 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-17 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-17 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-17 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-17 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-17 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-17 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-17 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-17 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-17 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-17 div.sk-item {position: relative;z-index: 1;}#sk-container-id-17 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-17 div.sk-item::before, #sk-container-id-17 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-17 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-17 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-17 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-17 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-17 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-17 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-17 div.sk-label-container {text-align: center;}#sk-container-id-17 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-17 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-17\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" checked><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(random_state=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 193
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "rf_regressor_perf_train = model_evaluation(rf_regressor, X_train, y_train)\n",
        "rf_regressor_perf_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "OADoCUhe3QTN",
        "outputId": "1726e00f-d662-4309-f760-612438d63fde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE      MAPE  \\\n",
              "0        0.086382             1.826087  0.609263  6.008315   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.989971       0.99009  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8ea01fa5-14c2-4821-8491-b3c443f4c181\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.086382</td>\n",
              "      <td>1.826087</td>\n",
              "      <td>0.609263</td>\n",
              "      <td>6.008315</td>\n",
              "      <td>0.989971</td>\n",
              "      <td>0.99009</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ea01fa5-14c2-4821-8491-b3c443f4c181')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8ea01fa5-14c2-4821-8491-b3c443f4c181 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8ea01fa5-14c2-4821-8491-b3c443f4c181');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_a15ead30-1dde-44fb-8f34-ca424c4536d7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rf_regressor_perf_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_a15ead30-1dde-44fb-8f34-ca424c4536d7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('rf_regressor_perf_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "rf_regressor_perf_train",
              "summary": "{\n  \"name\": \"rf_regressor_perf_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.08638200178649195,\n        \"max\": 0.08638200178649195,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.08638200178649195\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.8260871119173105,\n        \"max\": 1.8260871119173105,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.8260871119173105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6092625557047506,\n        \"max\": 0.6092625557047506,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6092625557047506\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 6.008314745627485,\n        \"max\": 6.008314745627485,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6.008314745627485\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.98997098056691,\n        \"max\": 0.98997098056691,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.98997098056691\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.990090203337156,\n        \"max\": 0.990090203337156,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.990090203337156\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 194
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "rf_regressor_perf_test = model_evaluation(rf_regressor, X_test, y_test)\n",
        "rf_regressor_perf_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "1GGpQxQ_3QA5",
        "outputId": "945b4b6d-5b7f-4fd3-8c4e-a1a36984a69c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.224912             4.483183  1.556618  15.658846   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.934231      0.936055  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a87b1630-61a8-48bc-bbae-872058bf1149\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.224912</td>\n",
              "      <td>4.483183</td>\n",
              "      <td>1.556618</td>\n",
              "      <td>15.658846</td>\n",
              "      <td>0.934231</td>\n",
              "      <td>0.936055</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a87b1630-61a8-48bc-bbae-872058bf1149')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a87b1630-61a8-48bc-bbae-872058bf1149 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a87b1630-61a8-48bc-bbae-872058bf1149');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_1f7f66f0-b43e-40b1-9a9d-3116a92cf681\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rf_regressor_perf_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1f7f66f0-b43e-40b1-9a9d-3116a92cf681 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('rf_regressor_perf_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "rf_regressor_perf_test",
              "summary": "{\n  \"name\": \"rf_regressor_perf_test\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.22491230549771327,\n        \"max\": 0.22491230549771327,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.22491230549771327\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.483183161372113,\n        \"max\": 4.483183161372113,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.483183161372113\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.556618399645236,\n        \"max\": 1.556618399645236,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.556618399645236\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 15.658845620550347,\n        \"max\": 15.658845620550347,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          15.658845620550347\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9342311035838576,\n        \"max\": 0.9342311035838576,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9342311035838576\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.936054977583196,\n        \"max\": 0.936054977583196,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.936054977583196\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* By combining the predictions of multiple DT by average, with randomly selected features, results in a 0.990 and a 0.936 Rsquared. We can see the overfitting coming out little more again, but strong R2 here."
      ],
      "metadata": {
        "id": "CldErs_8lVjC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **AdaBoost Regressor**"
      ],
      "metadata": {
        "id": "q0QugH-RXjNs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initalizing and fitting model\n",
        "ada_regressor = AdaBoostRegressor(random_state=1)\n",
        "ada_regressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "mtfth9FBULAr",
        "outputId": "bd67310e-cd65-4cbd-af95-801c5bb0f32d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "AdaBoostRegressor(random_state=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-18 {color: black;background-color: white;}#sk-container-id-18 pre{padding: 0;}#sk-container-id-18 div.sk-toggleable {background-color: white;}#sk-container-id-18 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-18 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-18 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-18 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-18 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-18 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-18 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-18 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-18 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-18 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-18 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-18 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-18 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-18 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-18 div.sk-item {position: relative;z-index: 1;}#sk-container-id-18 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-18 div.sk-item::before, #sk-container-id-18 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-18 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-18 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-18 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-18 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-18 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-18 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-18 div.sk-label-container {text-align: center;}#sk-container-id-18 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-18 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-18\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostRegressor(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" checked><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostRegressor</label><div class=\"sk-toggleable__content\"><pre>AdaBoostRegressor(random_state=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "ada_regressor_perf_train = model_evaluation(ada_regressor, X_train, y_train)\n",
        "ada_regressor_perf_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "E5qMwuN13m1o",
        "outputId": "212484c7-a40f-4181-af8a-4d648a5eda99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.329229              5.46347  2.539358  27.070919   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.854317      0.856049  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cbec4f2f-494e-4f13-a217-6a182f7034af\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.329229</td>\n",
              "      <td>5.46347</td>\n",
              "      <td>2.539358</td>\n",
              "      <td>27.070919</td>\n",
              "      <td>0.854317</td>\n",
              "      <td>0.856049</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbec4f2f-494e-4f13-a217-6a182f7034af')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cbec4f2f-494e-4f13-a217-6a182f7034af button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cbec4f2f-494e-4f13-a217-6a182f7034af');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_181ab111-e6ec-4b6e-9402-3cf926265372\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('ada_regressor_perf_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_181ab111-e6ec-4b6e-9402-3cf926265372 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('ada_regressor_perf_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ada_regressor_perf_train",
              "summary": "{\n  \"name\": \"ada_regressor_perf_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.3292291678879402,\n        \"max\": 0.3292291678879402,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.3292291678879402\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.463469587114614,\n        \"max\": 5.463469587114614,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.463469587114614\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.5393579766648333,\n        \"max\": 2.5393579766648333,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.5393579766648333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 27.07091920408712,\n        \"max\": 27.07091920408712,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          27.07091920408712\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8543171082394978,\n        \"max\": 0.8543171082394978,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8543171082394978\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8560489543136836,\n        \"max\": 0.8560489543136836,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8560489543136836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "ada_regressor_perf_test = model_evaluation(ada_regressor, X_test, y_test)\n",
        "ada_regressor_perf_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "cD60Ni853mjL",
        "outputId": "d965c874-80aa-47f2-ebd7-ea7337b54f9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE      MAE       MAPE  \\\n",
              "0        0.345747             6.252274  2.70951  27.769411   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.844578      0.848888  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0f9349c6-5cea-41a0-807b-93ac156e706f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.345747</td>\n",
              "      <td>6.252274</td>\n",
              "      <td>2.70951</td>\n",
              "      <td>27.769411</td>\n",
              "      <td>0.844578</td>\n",
              "      <td>0.848888</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f9349c6-5cea-41a0-807b-93ac156e706f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0f9349c6-5cea-41a0-807b-93ac156e706f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0f9349c6-5cea-41a0-807b-93ac156e706f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_ee3ff32e-dada-4fe5-a990-0f054c589210\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('ada_regressor_perf_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ee3ff32e-dada-4fe5-a990-0f054c589210 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('ada_regressor_perf_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "ada_regressor_perf_test",
              "summary": "{\n  \"name\": \"ada_regressor_perf_test\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.34574737756208135,\n        \"max\": 0.34574737756208135,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.34574737756208135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 6.252274341879427,\n        \"max\": 6.252274341879427,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          6.252274341879427\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.70950957161003,\n        \"max\": 2.70950957161003,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.70950957161003\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 27.769411102280884,\n        \"max\": 27.769411102280884,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          27.769411102280884\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8445782089845889,\n        \"max\": 0.8445782089845889,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8445782089845889\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.8488882974764195,\n        \"max\": 0.8488882974764195,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.8488882974764195\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 198
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The combination of weak classifers to create stronger classifers leading to improved accuracy in the difficult to classify results in a 0.856 and 0.848 Rsquared. While the overfitting is greatly improved it's at a cost to the performance."
      ],
      "metadata": {
        "id": "zr36740smdDC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Gradient Boost Regressor**"
      ],
      "metadata": {
        "id": "o6cYtn53X77_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initalizing and fitting model\n",
        "grad_regressor = GradientBoostingRegressor(random_state=1)\n",
        "grad_regressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "21J4FzQvUK8o",
        "outputId": "96ac6bc6-e241-4056-c8a4-9467e50751d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GradientBoostingRegressor(random_state=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-19 {color: black;background-color: white;}#sk-container-id-19 pre{padding: 0;}#sk-container-id-19 div.sk-toggleable {background-color: white;}#sk-container-id-19 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-19 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-19 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-19 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-19 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-19 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-19 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-19 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-19 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-19 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-19 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-19 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-19 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-19 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-19 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-19 div.sk-item {position: relative;z-index: 1;}#sk-container-id-19 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-19 div.sk-item::before, #sk-container-id-19 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-19 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-19 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-19 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-19 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-19 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-19 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-19 div.sk-label-container {text-align: center;}#sk-container-id-19 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-19 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-19\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor(random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" checked><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(random_state=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 199
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "grad_regressor_perf_train = model_evaluation(grad_regressor, X_train, y_train)\n",
        "grad_regressor_perf_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "GNTxk1Tv35O1",
        "outputId": "7afdd3de-6495-4432-e637-00d9e7ce87de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.204569             3.297134  1.523943  16.023352   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.943754      0.944423  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3cad4abd-a9e6-430d-874b-fa237d465dca\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.204569</td>\n",
              "      <td>3.297134</td>\n",
              "      <td>1.523943</td>\n",
              "      <td>16.023352</td>\n",
              "      <td>0.943754</td>\n",
              "      <td>0.944423</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3cad4abd-a9e6-430d-874b-fa237d465dca')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3cad4abd-a9e6-430d-874b-fa237d465dca button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3cad4abd-a9e6-430d-874b-fa237d465dca');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_e65dbab4-b59b-403e-83a0-060725738b64\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grad_regressor_perf_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e65dbab4-b59b-403e-83a0-060725738b64 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('grad_regressor_perf_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "grad_regressor_perf_train",
              "summary": "{\n  \"name\": \"grad_regressor_perf_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.2045688073021171,\n        \"max\": 0.2045688073021171,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.2045688073021171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.2971337799720315,\n        \"max\": 3.2971337799720315,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.2971337799720315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.5239428081033215,\n        \"max\": 1.5239428081033215,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.5239428081033215\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 16.02335201703384,\n        \"max\": 16.02335201703384,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          16.02335201703384\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9437541128702196,\n        \"max\": 0.9437541128702196,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9437541128702196\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9444227515664843,\n        \"max\": 0.9444227515664843,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9444227515664843\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 200
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "grad_regressor_perf_test = model_evaluation(grad_regressor, X_test, y_test)\n",
        "grad_regressor_perf_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "qDoS5RmB3478",
        "outputId": "f3a75f48-b293-4025-f727-f8a3c4f1ebc3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.235651              4.23405  1.704391  17.526852   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.927801      0.929803  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ebc6e9f4-296b-4613-ae85-cdec36c1d8a8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.235651</td>\n",
              "      <td>4.23405</td>\n",
              "      <td>1.704391</td>\n",
              "      <td>17.526852</td>\n",
              "      <td>0.927801</td>\n",
              "      <td>0.929803</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ebc6e9f4-296b-4613-ae85-cdec36c1d8a8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ebc6e9f4-296b-4613-ae85-cdec36c1d8a8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ebc6e9f4-296b-4613-ae85-cdec36c1d8a8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_35a04d78-6d75-4041-acf4-cd368e27006b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grad_regressor_perf_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_35a04d78-6d75-4041-acf4-cd368e27006b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('grad_regressor_perf_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "grad_regressor_perf_test",
              "summary": "{\n  \"name\": \"grad_regressor_perf_test\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.23565117113346962,\n        \"max\": 0.23565117113346962,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.23565117113346962\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.234049690539967,\n        \"max\": 4.234049690539967,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.234049690539967\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.7043909174447767,\n        \"max\": 1.7043909174447767,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.7043909174447767\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 17.526851915977012,\n        \"max\": 17.526851915977012,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          17.526851915977012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9278006438497781,\n        \"max\": 0.9278006438497781,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9278006438497781\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9298028445195015,\n        \"max\": 0.9298028445195015,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9298028445195015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 201
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* By combining weak learners and assigning weights to data points to focus on the improvement of previously poorly predicted results yields a 0.944 and a 0.929 Rsquared. This is the best models so far, stong R2, much less overfitting."
      ],
      "metadata": {
        "id": "wLquDWsSnBfD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Hyperparameter Tuning: Gradient Boost**"
      ],
      "metadata": {
        "id": "uk-O_2Btp_YE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying Randomized Search CV and determining the hyperparameters\n",
        "gb_tuned = GradientBoostingRegressor(random_state=1)\n",
        "gb_parameters = {\n",
        "    \"n_estimators\": [50, 90, 120],\n",
        "    \"max_depth\": [3, 5, 7],\n",
        "    \"max_features\": [0.8, 1],\n",
        "    \"learning_rate\": [0.01, 0.1, 0.2],\n",
        "    \"subsample\": [0.8, 0.9, 1.0],\n",
        "    \"min_samples_split\": [2, 4, 6],\n",
        "    \"min_samples_leaf\": [1, 3, 5],\n",
        "   }\n",
        "n_iter_search = 40\n",
        "gb_random_search = RandomizedSearchCV(gb_tuned, param_distributions=gb_parameters,\n",
        "                                      n_iter=n_iter_search, scoring='neg_mean_squared_error',\n",
        "                                      cv=5, verbose=1, random_state=1, n_jobs=-1)\n",
        "gb_random_search.fit(X_train, y_train)\n",
        "gb_tuned_regressor = gb_random_search.best_estimator_\n",
        "gb_tuned_regressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "id": "pChVP2Vnlto6",
        "outputId": "6596f0f1-17b9-4749-e60e-5cc68eb22f83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 40 candidates, totalling 200 fits\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GradientBoostingRegressor(learning_rate=0.2, max_depth=5, max_features=0.8,\n",
              "                          min_samples_leaf=5, min_samples_split=4,\n",
              "                          n_estimators=120, random_state=1, subsample=0.8)"
            ],
            "text/html": [
              "<style>#sk-container-id-20 {color: black;background-color: white;}#sk-container-id-20 pre{padding: 0;}#sk-container-id-20 div.sk-toggleable {background-color: white;}#sk-container-id-20 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-20 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-20 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-20 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-20 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-20 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-20 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-20 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-20 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-20 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-20 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-20 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-20 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-20 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-20 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-20 div.sk-item {position: relative;z-index: 1;}#sk-container-id-20 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-20 div.sk-item::before, #sk-container-id-20 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-20 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-20 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-20 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-20 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-20 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-20 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-20 div.sk-label-container {text-align: center;}#sk-container-id-20 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-20 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-20\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor(learning_rate=0.2, max_depth=5, max_features=0.8,\n",
              "                          min_samples_leaf=5, min_samples_split=4,\n",
              "                          n_estimators=120, random_state=1, subsample=0.8)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-26\" type=\"checkbox\" checked><label for=\"sk-estimator-id-26\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor(learning_rate=0.2, max_depth=5, max_features=0.8,\n",
              "                          min_samples_leaf=5, min_samples_split=4,\n",
              "                          n_estimators=120, random_state=1, subsample=0.8)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 202
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "gb_tuned_random_perf_train = model_evaluation(gb_tuned_regressor, X_train, y_train)\n",
        "gb_tuned_random_perf_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "QKRG7crYg5t3",
        "outputId": "7ffd0aa8-fc21-4de1-8ae1-28a9b3851d18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.138137             2.010196  1.000885  10.670478   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.974353      0.974658  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b02ea48e-6711-47a2-8afb-eb676d7fb871\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.138137</td>\n",
              "      <td>2.010196</td>\n",
              "      <td>1.000885</td>\n",
              "      <td>10.670478</td>\n",
              "      <td>0.974353</td>\n",
              "      <td>0.974658</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b02ea48e-6711-47a2-8afb-eb676d7fb871')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b02ea48e-6711-47a2-8afb-eb676d7fb871 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b02ea48e-6711-47a2-8afb-eb676d7fb871');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_ee5be042-9d72-4746-b5e5-9bd41cd05fab\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('gb_tuned_random_perf_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ee5be042-9d72-4746-b5e5-9bd41cd05fab button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('gb_tuned_random_perf_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "gb_tuned_random_perf_train",
              "summary": "{\n  \"name\": \"gb_tuned_random_perf_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1381370354076264,\n        \"max\": 0.1381370354076264,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1381370354076264\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2.0101961166682187,\n        \"max\": 2.0101961166682187,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2.0101961166682187\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.0008851505363412,\n        \"max\": 1.0008851505363412,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0008851505363412\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 10.67047810641307,\n        \"max\": 10.67047810641307,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10.67047810641307\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9743532577389399,\n        \"max\": 0.9743532577389399,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9743532577389399\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9746581405523144,\n        \"max\": 0.9746581405523144,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9746581405523144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 203
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "gb_tuned_random_perf_test = model_evaluation(gb_tuned_regressor, X_test, y_test)\n",
        "gb_tuned_random_perf_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "Y6ubxB4Ag7-Q",
        "outputId": "0664a94b-1ac9-4de3-9fc5-a696b5072f5c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.199425             3.599069  1.392508  14.455777   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.948292      0.949726  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-977365a1-01cc-4b91-8c9c-1aac3db50a09\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.199425</td>\n",
              "      <td>3.599069</td>\n",
              "      <td>1.392508</td>\n",
              "      <td>14.455777</td>\n",
              "      <td>0.948292</td>\n",
              "      <td>0.949726</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-977365a1-01cc-4b91-8c9c-1aac3db50a09')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-977365a1-01cc-4b91-8c9c-1aac3db50a09 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-977365a1-01cc-4b91-8c9c-1aac3db50a09');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_40e032a1-25e6-446b-8408-57bb60984e83\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('gb_tuned_random_perf_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_40e032a1-25e6-446b-8408-57bb60984e83 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('gb_tuned_random_perf_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "gb_tuned_random_perf_test",
              "summary": "{\n  \"name\": \"gb_tuned_random_perf_test\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.1994251690231401,\n        \"max\": 0.1994251690231401,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.1994251690231401\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 3.599068537975837,\n        \"max\": 3.599068537975837,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          3.599068537975837\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.3925080162109358,\n        \"max\": 1.3925080162109358,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.3925080162109358\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 14.455777319689684,\n        \"max\": 14.455777319689684,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          14.455777319689684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.948292438469921,\n        \"max\": 0.948292438469921,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.948292438469921\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9497263697380873,\n        \"max\": 0.9497263697380873,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9497263697380873\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 204
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* This does show improvement with tuned hyperparamters, but the overfitting has increased and even with reducing the complexity of the model further it doesn't reduce the overfitting."
      ],
      "metadata": {
        "id": "YnRbuQiPsDy0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **XGBoost Regressor**"
      ],
      "metadata": {
        "id": "3Gr0dMs5YQP-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initalizing and fitting model\n",
        "xgb = XGBRegressor(random_state = 1)\n",
        "xgb.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "Xm-EMbbhUK1N",
        "outputId": "fcc2f622-9d33-4d1a-aa39-eee05e74c67e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=1, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-21 {color: black;background-color: white;}#sk-container-id-21 pre{padding: 0;}#sk-container-id-21 div.sk-toggleable {background-color: white;}#sk-container-id-21 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-21 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-21 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-21 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-21 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-21 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-21 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-21 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-21 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-21 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-21 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-21 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-21 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-21 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-21 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-21 div.sk-item {position: relative;z-index: 1;}#sk-container-id-21 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-21 div.sk-item::before, #sk-container-id-21 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-21 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-21 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-21 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-21 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-21 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-21 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-21 div.sk-label-container {text-align: center;}#sk-container-id-21 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-21 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-21\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=1, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-27\" type=\"checkbox\" checked><label for=\"sk-estimator-id-27\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
              "             colsample_bylevel=None, colsample_bynode=None,\n",
              "             colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "             enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "             gamma=None, grow_policy=None, importance_type=None,\n",
              "             interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "             max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "             max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "             min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "             multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "             num_parallel_tree=None, random_state=1, ...)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 205
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "xgb_perf_train = model_evaluation(xgb, X_train, y_train)\n",
        "xgb_perf_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "lXblkgmE4M4A",
        "outputId": "af958678-d22a-4f3f-8c20-1dda3271e076"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE      MAPE  \\\n",
              "0        0.100544             1.226402  0.665679  7.588602   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.986413      0.986574  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dc917cdb-8064-4b4c-90c2-f7087c69733a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.100544</td>\n",
              "      <td>1.226402</td>\n",
              "      <td>0.665679</td>\n",
              "      <td>7.588602</td>\n",
              "      <td>0.986413</td>\n",
              "      <td>0.986574</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dc917cdb-8064-4b4c-90c2-f7087c69733a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dc917cdb-8064-4b4c-90c2-f7087c69733a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dc917cdb-8064-4b4c-90c2-f7087c69733a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_46fee687-bb41-4526-be31-7052c4d0774e\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('xgb_perf_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_46fee687-bb41-4526-be31-7052c4d0774e button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('xgb_perf_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "xgb_perf_train",
              "summary": "{\n  \"name\": \"xgb_perf_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.10054434695050524,\n        \"max\": 0.10054434695050524,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.10054434695050524\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.226401947665255,\n        \"max\": 1.226401947665255,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.226401947665255\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6656791219298732,\n        \"max\": 0.6656791219298732,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6656791219298732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 7.588601713337235,\n        \"max\": 7.588601713337235,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          7.588601713337235\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9864128847224424,\n        \"max\": 0.9864128847224424,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9864128847224424\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9865744053510391,\n        \"max\": 0.9865744053510391,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9865744053510391\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 206
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "xgb_perf_test = model_evaluation(xgb, X_test, y_test)\n",
        "xgb_perf_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "cvryxEHr4MpU",
        "outputId": "2f4c826a-79a3-479e-ceb5-f5381c8f8e63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.218345             4.380812  1.414341  14.343826   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.938016      0.939735  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ccbde14-405c-430d-ae67-a1c5254378f9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.218345</td>\n",
              "      <td>4.380812</td>\n",
              "      <td>1.414341</td>\n",
              "      <td>14.343826</td>\n",
              "      <td>0.938016</td>\n",
              "      <td>0.939735</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ccbde14-405c-430d-ae67-a1c5254378f9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7ccbde14-405c-430d-ae67-a1c5254378f9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7ccbde14-405c-430d-ae67-a1c5254378f9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_5369b05e-590a-45fd-b8d6-0379e1c81537\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('xgb_perf_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_5369b05e-590a-45fd-b8d6-0379e1c81537 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('xgb_perf_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "xgb_perf_test",
              "summary": "{\n  \"name\": \"xgb_perf_test\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.21834499813884434,\n        \"max\": 0.21834499813884434,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.21834499813884434\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.380812169040278,\n        \"max\": 4.380812169040278,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.380812169040278\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.414341004936235,\n        \"max\": 1.414341004936235,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.414341004936235\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 14.343826158182798,\n        \"max\": 14.343826158182798,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          14.343826158182798\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9380158550197447,\n        \"max\": 0.9380158550197447,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9380158550197447\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9397347719631794,\n        \"max\": 0.9397347719631794,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9397347719631794\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Based on the residual of errors of the previous model, sequentially adding and updating weights, along with regularization, pruning, and weighted quantile sketch results in a 0.986 and a 0.939 Rsquared values.  Higher R2 but overfitting has increased again."
      ],
      "metadata": {
        "id": "egFmuSDYoGGS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Hyperparameter Tuning: Random Forest**"
      ],
      "metadata": {
        "id": "BgVSEbJQzttg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying Grid Search CV and determining the hyperparameters\n",
        "rf_tuned = RandomForestRegressor(random_state = 1)\n",
        "rf_parameters = {\"n_estimators\": [100, 110, 120],\n",
        "    \"max_depth\": [5, 7, None],\n",
        "    \"max_features\": [0.8, 1]\n",
        "             }\n",
        "rf_grid_obj = GridSearchCV(rf_tuned, rf_parameters, scoring = 'neg_mean_squared_error', cv = 5)\n",
        "rf_grid_obj = rf_grid_obj.fit(X_train, y_train)\n",
        "rf_tuned_regressor = rf_grid_obj.best_estimator_\n",
        "rf_tuned_regressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "99svOjh7UnmE",
        "outputId": "1a422f31-0cc5-47bc-fa61-3472b3d0521c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(max_features=0.8, n_estimators=120, random_state=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-22 {color: black;background-color: white;}#sk-container-id-22 pre{padding: 0;}#sk-container-id-22 div.sk-toggleable {background-color: white;}#sk-container-id-22 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-22 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-22 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-22 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-22 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-22 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-22 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-22 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-22 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-22 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-22 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-22 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-22 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-22 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-22 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-22 div.sk-item {position: relative;z-index: 1;}#sk-container-id-22 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-22 div.sk-item::before, #sk-container-id-22 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-22 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-22 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-22 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-22 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-22 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-22 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-22 div.sk-label-container {text-align: center;}#sk-container-id-22 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-22 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-22\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_features=0.8, n_estimators=120, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-28\" type=\"checkbox\" checked><label for=\"sk-estimator-id-28\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_features=0.8, n_estimators=120, random_state=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 208
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the training data\n",
        "rf_tuned_regressor_perf_train = model_evaluation(rf_tuned_regressor, X_train, y_train)\n",
        "rf_tuned_regressor_perf_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "Z9ApIB1v4nvW",
        "outputId": "df9d41da-f230-414f-daac-f87bb63042d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE     MAPE  \\\n",
              "0        0.085064             1.802465  0.608257  5.95292   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.990275       0.99039  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c7239aea-7a2d-4c89-b726-37e58870a4b0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.085064</td>\n",
              "      <td>1.802465</td>\n",
              "      <td>0.608257</td>\n",
              "      <td>5.95292</td>\n",
              "      <td>0.990275</td>\n",
              "      <td>0.99039</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7239aea-7a2d-4c89-b726-37e58870a4b0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c7239aea-7a2d-4c89-b726-37e58870a4b0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c7239aea-7a2d-4c89-b726-37e58870a4b0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_c82387a2-56e9-4a56-be5a-d85ebbf0d277\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rf_tuned_regressor_perf_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c82387a2-56e9-4a56-be5a-d85ebbf0d277 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('rf_tuned_regressor_perf_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "rf_tuned_regressor_perf_train",
              "summary": "{\n  \"name\": \"rf_tuned_regressor_perf_train\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.08506427377922916,\n        \"max\": 0.08506427377922916,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.08506427377922916\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.802465114801922,\n        \"max\": 1.802465114801922,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.802465114801922\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.6082566531956526,\n        \"max\": 0.6082566531956526,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.6082566531956526\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 5.952920238127867,\n        \"max\": 5.952920238127867,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5.952920238127867\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9902746253168615,\n        \"max\": 0.9902746253168615,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9902746253168615\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9903902384253154,\n        \"max\": 0.9903902384253154,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9903902384253154\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 209
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Checking performance on the testing data\n",
        "rf_tuned_regressor_perf_test = model_evaluation(rf_tuned_regressor, X_test, y_test)\n",
        "rf_tuned_regressor_perf_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "q4Ze6jjB4nhY",
        "outputId": "fcf26b67-6d92-49b5-c463-6dfba52044ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Log Scale RMSE  Bias Corrected RMSE       MAE       MAPE  \\\n",
              "0        0.221256             4.469968  1.545847  15.492961   \n",
              "\n",
              "   Log Scale Adjusted R2  Log Scale R2  \n",
              "0               0.936352      0.938117  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e14fdec9-8244-40c4-82e6-00a48ad32bb9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.221256</td>\n",
              "      <td>4.469968</td>\n",
              "      <td>1.545847</td>\n",
              "      <td>15.492961</td>\n",
              "      <td>0.936352</td>\n",
              "      <td>0.938117</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e14fdec9-8244-40c4-82e6-00a48ad32bb9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e14fdec9-8244-40c4-82e6-00a48ad32bb9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e14fdec9-8244-40c4-82e6-00a48ad32bb9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_ca6d73bb-4508-4411-9145-390146544551\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rf_tuned_regressor_perf_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ca6d73bb-4508-4411-9145-390146544551 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('rf_tuned_regressor_perf_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "rf_tuned_regressor_perf_test",
              "summary": "{\n  \"name\": \"rf_tuned_regressor_perf_test\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.22125583817612288,\n        \"max\": 0.22125583817612288,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.22125583817612288\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 4.469968008868341,\n        \"max\": 4.469968008868341,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          4.469968008868341\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 1.5458473264195953,\n        \"max\": 1.5458473264195953,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.5458473264195953\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 15.492961194671961,\n        \"max\": 15.492961194671961,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          15.492961194671961\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9363521705230679,\n        \"max\": 0.9363521705230679,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9363521705230679\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.9381172240304703,\n        \"max\": 0.9381172240304703,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.9381172240304703\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 210
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Even with optimized hyperparameters RF results in a 0.990 and a 0.938 Rsquared with like the other models slighly higher levels overfitting."
      ],
      "metadata": {
        "id": "JF7w7FTp6TdT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the most important features in the Random Forest Tuned model\n",
        "features = list(X_train.columns)\n",
        "importances = rf_tuned_regressor.feature_importances_\n",
        "indices = np.argsort(importances)\n",
        "\n",
        "plt.figure(figsize = (6, 10))\n",
        "plt.title('Feature Importance')\n",
        "plt.barh(range(len(indices)), importances[indices], color = 'violet', align = 'center')\n",
        "plt.yticks(range(len(indices)), [features[i] for i in indices])\n",
        "plt.xlabel('Relative Importance')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 871
        },
        "id": "DuiygTE0AKEm",
        "outputId": "32cb21be-d189-4eb9-bf1a-daff19bbb8c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The most important features in the tuned Random Forest are; Power, Age, Manual Transmission, Mileage, and log_Kilometers_Driven."
      ],
      "metadata": {
        "id": "PGNrmwJVBB2y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Combining the test model performance\n",
        "models_test_comp_df = pd.concat(\n",
        "    [ dt_regressor_perf_test.T,\n",
        "        dt_tuned_regressor_perf_test.T,\n",
        "        bagging_estimator_perf_test.T,\n",
        "        rf_regressor_perf_test.T,\n",
        "        ada_regressor_perf_test.T,\n",
        "        grad_regressor_perf_test.T,\n",
        "        gb_tuned_random_perf_test.T,\n",
        "        xgb_perf_test.T,\n",
        "        rf_tuned_regressor_perf_test.T,\n",
        "    ],\n",
        "    axis = 1,\n",
        ")\n",
        "models_test_comp_df.columns = [\n",
        "    'Decision Tree Regressor',\n",
        "    'Decision Tree Tuned Regressor',\n",
        "    'Bagging Regressor',\n",
        "    'Random Forest regressor',\n",
        "    'Ada Boost Regressor',\n",
        "    'Gradient Boost Regressor',\n",
        "    'Gradient Boost Tuned Regressor',\n",
        "    'XG Boost Regressor',\n",
        "    'Random Forest Tuned Regressor ']\n",
        "models_test_comp_df.T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 322
        },
        "id": "Zy8totwYUnZc",
        "outputId": "fb2e3845-edde-4ec0-ab58-10664eab0c1b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                Log Scale RMSE  Bias Corrected RMSE       MAE  \\\n",
              "Decision Tree Regressor               0.311411             5.305807  1.943864   \n",
              "Decision Tree Tuned Regressor         0.276085             5.215787  1.962174   \n",
              "Bagging Regressor                     0.234849             4.669265  1.641154   \n",
              "Random Forest regressor               0.224912             4.483183  1.556618   \n",
              "Ada Boost Regressor                   0.345747             6.252274  2.709510   \n",
              "Gradient Boost Regressor              0.235651             4.234050  1.704391   \n",
              "Gradient Boost Tuned Regressor        0.199425             3.599069  1.392508   \n",
              "XG Boost Regressor                    0.218345             4.380812  1.414341   \n",
              "Random Forest Tuned Regressor         0.221256             4.469968  1.545847   \n",
              "\n",
              "                                     MAPE  Log Scale Adjusted R2  Log Scale R2  \n",
              "Decision Tree Regressor         20.213113               0.873915      0.877412  \n",
              "Decision Tree Tuned Regressor   19.427770               0.900899      0.903647  \n",
              "Bagging Regressor               16.382006               0.928292      0.930280  \n",
              "Random Forest regressor         15.658846               0.934231      0.936055  \n",
              "Ada Boost Regressor             27.769411               0.844578      0.848888  \n",
              "Gradient Boost Regressor        17.526852               0.927801      0.929803  \n",
              "Gradient Boost Tuned Regressor  14.455777               0.948292      0.949726  \n",
              "XG Boost Regressor              14.343826               0.938016      0.939735  \n",
              "Random Forest Tuned Regressor   15.492961               0.936352      0.938117  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1081b535-01b0-4e4b-82a7-e3fc838ce7b9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Decision Tree Regressor</th>\n",
              "      <td>0.311411</td>\n",
              "      <td>5.305807</td>\n",
              "      <td>1.943864</td>\n",
              "      <td>20.213113</td>\n",
              "      <td>0.873915</td>\n",
              "      <td>0.877412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Decision Tree Tuned Regressor</th>\n",
              "      <td>0.276085</td>\n",
              "      <td>5.215787</td>\n",
              "      <td>1.962174</td>\n",
              "      <td>19.427770</td>\n",
              "      <td>0.900899</td>\n",
              "      <td>0.903647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bagging Regressor</th>\n",
              "      <td>0.234849</td>\n",
              "      <td>4.669265</td>\n",
              "      <td>1.641154</td>\n",
              "      <td>16.382006</td>\n",
              "      <td>0.928292</td>\n",
              "      <td>0.930280</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Random Forest regressor</th>\n",
              "      <td>0.224912</td>\n",
              "      <td>4.483183</td>\n",
              "      <td>1.556618</td>\n",
              "      <td>15.658846</td>\n",
              "      <td>0.934231</td>\n",
              "      <td>0.936055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Ada Boost Regressor</th>\n",
              "      <td>0.345747</td>\n",
              "      <td>6.252274</td>\n",
              "      <td>2.709510</td>\n",
              "      <td>27.769411</td>\n",
              "      <td>0.844578</td>\n",
              "      <td>0.848888</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gradient Boost Regressor</th>\n",
              "      <td>0.235651</td>\n",
              "      <td>4.234050</td>\n",
              "      <td>1.704391</td>\n",
              "      <td>17.526852</td>\n",
              "      <td>0.927801</td>\n",
              "      <td>0.929803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gradient Boost Tuned Regressor</th>\n",
              "      <td>0.199425</td>\n",
              "      <td>3.599069</td>\n",
              "      <td>1.392508</td>\n",
              "      <td>14.455777</td>\n",
              "      <td>0.948292</td>\n",
              "      <td>0.949726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>XG Boost Regressor</th>\n",
              "      <td>0.218345</td>\n",
              "      <td>4.380812</td>\n",
              "      <td>1.414341</td>\n",
              "      <td>14.343826</td>\n",
              "      <td>0.938016</td>\n",
              "      <td>0.939735</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Random Forest Tuned Regressor</th>\n",
              "      <td>0.221256</td>\n",
              "      <td>4.469968</td>\n",
              "      <td>1.545847</td>\n",
              "      <td>15.492961</td>\n",
              "      <td>0.936352</td>\n",
              "      <td>0.938117</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1081b535-01b0-4e4b-82a7-e3fc838ce7b9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1081b535-01b0-4e4b-82a7-e3fc838ce7b9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1081b535-01b0-4e4b-82a7-e3fc838ce7b9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b89e0323-23d6-4b23-bd4b-6edb0eff8597\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b89e0323-23d6-4b23-bd4b-6edb0eff8597')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b89e0323-23d6-4b23-bd4b-6edb0eff8597 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"models_test_comp_df\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04877945633883236,\n        \"min\": 0.1994251690231401,\n        \"max\": 0.34574737756208135,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.21834499813884434,\n          0.2760847168030931,\n          0.23565117113346962\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7635289541612654,\n        \"min\": 3.599068537975837,\n        \"max\": 6.252274341879427,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          4.380812169040278,\n          5.215787211339328,\n          4.234049690539967\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.40852155644437543,\n        \"min\": 1.3925080162109358,\n        \"max\": 2.70950957161003,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1.414341004936235,\n          1.9621743470678383,\n          1.7043909174447767\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.225751611107538,\n        \"min\": 14.343826158182798,\n        \"max\": 27.769411102280884,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          14.343826158182798,\n          19.427770002044674,\n          17.526851915977012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03473047232327394,\n        \"min\": 0.8445782089845889,\n        \"max\": 0.948292438469921,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.9380158550197447,\n          0.9008988139902298,\n          0.9278006438497781\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.033767342197836524,\n        \"min\": 0.8488882974764195,\n        \"max\": 0.9497263697380873,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.9397347719631794,\n          0.9036470443288257,\n          0.9298028445195015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 212
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Gradient Boost is the best model of the Tree Based models and with hyperparameter tuning, it's performance increased above all models.  \n",
        "  * Gradient Boost alone, while not the highest of the Rsquared values or the lowest MAE or MAPE, but the overfitting on the other models is higher.  Gaining 1% on the Rsquared better on GB compared to the other model comes at a cost of increased overfitting.\n",
        "* Gradient Boost Tuned improves all of the performance metrics and puts the Rsquared at the highest on the test data without increasing the overfitting. The tuning also even brings down the RMSE, MAE, MAPE values.  Therefore this model has the best performance of all models."
      ],
      "metadata": {
        "id": "hhJKBE_43xaM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Comparing the highest performing Regression model and the highest performing Regressor Models\n",
        "models_test_comp_df = pd.concat([linear_reg_train.T, linear_reg.T, grad_regressor_perf_train.T, grad_regressor_perf_test.T, gb_tuned_random_perf_train.T, gb_tuned_random_perf_test.T], axis = 1)\n",
        "models_test_comp_df.columns = ['Least Squares Training Data Performance', 'Least Regression Testing Data Performance',\n",
        "                               'Gradient Boosting Training Data Performance', 'Gradient Boosting Testing Data Performance',\n",
        "                               'Gradient Boosting Tuned Training Data Performance', 'Gradient Boosting Tuned Testing Data Performance']\n",
        "models_test_comp_df.T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 231
        },
        "id": "nVMJWFaz8cYy",
        "outputId": "8dc05893-fa5f-4854-b181-f0d2094b3458"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                   Log Scale RMSE  \\\n",
              "Least Squares Training Data Performance                  0.237590   \n",
              "Least Regression Testing Data Performance                0.240070   \n",
              "Gradient Boosting Training Data Performance              0.204569   \n",
              "Gradient Boosting Testing Data Performance               0.235651   \n",
              "Gradient Boosting Tuned Training Data Performance        0.138137   \n",
              "Gradient Boosting Tuned Testing Data Performance         0.199425   \n",
              "\n",
              "                                                   Bias Corrected RMSE  \\\n",
              "Least Squares Training Data Performance                       4.296434   \n",
              "Least Regression Testing Data Performance                     3.834047   \n",
              "Gradient Boosting Training Data Performance                   3.297134   \n",
              "Gradient Boosting Testing Data Performance                    4.234050   \n",
              "Gradient Boosting Tuned Training Data Performance             2.010196   \n",
              "Gradient Boosting Tuned Testing Data Performance              3.599069   \n",
              "\n",
              "                                                        MAE       MAPE  \\\n",
              "Least Squares Training Data Performance            1.797923  18.949202   \n",
              "Least Regression Testing Data Performance          1.714791  18.817033   \n",
              "Gradient Boosting Training Data Performance        1.523943  16.023352   \n",
              "Gradient Boosting Testing Data Performance         1.704391  17.526852   \n",
              "Gradient Boosting Tuned Training Data Performance  1.000885  10.670478   \n",
              "Gradient Boosting Tuned Testing Data Performance   1.392508  14.455777   \n",
              "\n",
              "                                                   Log Scale Adjusted R2  \\\n",
              "Least Squares Training Data Performance                         0.924130   \n",
              "Least Regression Testing Data Performance                       0.925068   \n",
              "Gradient Boosting Training Data Performance                     0.943754   \n",
              "Gradient Boosting Testing Data Performance                      0.927801   \n",
              "Gradient Boosting Tuned Training Data Performance               0.974353   \n",
              "Gradient Boosting Tuned Testing Data Performance                0.948292   \n",
              "\n",
              "                                                   Log Scale R2  \n",
              "Least Squares Training Data Performance                0.925032  \n",
              "Least Regression Testing Data Performance              0.927146  \n",
              "Gradient Boosting Training Data Performance            0.944423  \n",
              "Gradient Boosting Testing Data Performance             0.929803  \n",
              "Gradient Boosting Tuned Training Data Performance      0.974658  \n",
              "Gradient Boosting Tuned Testing Data Performance       0.949726  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f601050a-b38d-4f6c-9a53-af30fd89f015\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Log Scale RMSE</th>\n",
              "      <th>Bias Corrected RMSE</th>\n",
              "      <th>MAE</th>\n",
              "      <th>MAPE</th>\n",
              "      <th>Log Scale Adjusted R2</th>\n",
              "      <th>Log Scale R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Least Squares Training Data Performance</th>\n",
              "      <td>0.237590</td>\n",
              "      <td>4.296434</td>\n",
              "      <td>1.797923</td>\n",
              "      <td>18.949202</td>\n",
              "      <td>0.924130</td>\n",
              "      <td>0.925032</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Least Regression Testing Data Performance</th>\n",
              "      <td>0.240070</td>\n",
              "      <td>3.834047</td>\n",
              "      <td>1.714791</td>\n",
              "      <td>18.817033</td>\n",
              "      <td>0.925068</td>\n",
              "      <td>0.927146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gradient Boosting Training Data Performance</th>\n",
              "      <td>0.204569</td>\n",
              "      <td>3.297134</td>\n",
              "      <td>1.523943</td>\n",
              "      <td>16.023352</td>\n",
              "      <td>0.943754</td>\n",
              "      <td>0.944423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gradient Boosting Testing Data Performance</th>\n",
              "      <td>0.235651</td>\n",
              "      <td>4.234050</td>\n",
              "      <td>1.704391</td>\n",
              "      <td>17.526852</td>\n",
              "      <td>0.927801</td>\n",
              "      <td>0.929803</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gradient Boosting Tuned Training Data Performance</th>\n",
              "      <td>0.138137</td>\n",
              "      <td>2.010196</td>\n",
              "      <td>1.000885</td>\n",
              "      <td>10.670478</td>\n",
              "      <td>0.974353</td>\n",
              "      <td>0.974658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Gradient Boosting Tuned Testing Data Performance</th>\n",
              "      <td>0.199425</td>\n",
              "      <td>3.599069</td>\n",
              "      <td>1.392508</td>\n",
              "      <td>14.455777</td>\n",
              "      <td>0.948292</td>\n",
              "      <td>0.949726</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f601050a-b38d-4f6c-9a53-af30fd89f015')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f601050a-b38d-4f6c-9a53-af30fd89f015 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f601050a-b38d-4f6c-9a53-af30fd89f015');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9e78b6ed-5d28-4e5c-9867-88b839041fe5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e78b6ed-5d28-4e5c-9867-88b839041fe5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9e78b6ed-5d28-4e5c-9867-88b839041fe5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"models_test_comp_df\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Log Scale RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.03905260279139014,\n        \"min\": 0.1381370354076264,\n        \"max\": 0.24006970184441045,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.23759006042206918,\n          0.24006970184441045,\n          0.1994251690231401\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bias Corrected RMSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8417808398711923,\n        \"min\": 2.0101961166682187,\n        \"max\": 4.296434343075079,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          4.296434343075079,\n          3.834046670363668,\n          3.599068537975837\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2949236177531889,\n        \"min\": 1.0008851505363412,\n        \"max\": 1.7979228155270797,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.7979228155270797,\n          1.714790592246249,\n          1.3925080162109358\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MAPE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.1534441228846894,\n        \"min\": 10.67047810641307,\n        \"max\": 18.94920157093515,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          18.94920157093515,\n          18.81703262580988,\n          14.455777319689684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale Adjusted R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.019415066007852855,\n        \"min\": 0.9241302800900687,\n        \"max\": 0.9743532577389399,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9241302800900687,\n          0.9250677409285275,\n          0.948292438469921\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log Scale R2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.018916669689370613,\n        \"min\": 0.9250322025806765,\n        \"max\": 0.9746581405523144,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.9250322025806765,\n          0.9271457292555234,\n          0.9497263697380873\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 213
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* Gradient Boosting Tunned exceeded all other models on performance, with the highest Rsquared and better MAPE values on this dataset, and the second best is the basic Gradient Boosting, at a slightly lower performance, very slightly closer RMSE, but with the increased MAPE, and so on with the Least Squares performance. I believe Gradient Boosting is easily the overall best choice.  "
      ],
      "metadata": {
        "id": "RLjZgVbD7RcE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the most important features in the Gradient Boost Tuned model\n",
        "features = list(X_train.columns)\n",
        "importances = gb_tuned_regressor.feature_importances_\n",
        "indices = np.argsort(importances)\n",
        "\n",
        "plt.figure(figsize = (6, 10))\n",
        "plt.title('Feature Importance')\n",
        "plt.barh(range(len(indices)), importances[indices], color = 'violet', align = 'center')\n",
        "plt.yticks(range(len(indices)), [features[i] for i in indices])\n",
        "plt.xlabel('Relative Importance')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 871
        },
        "id": "JvXAb7mxUnVY",
        "outputId": "6fff3004-7138-432a-dca4-6ebbee9d602c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Observation:**\n",
        "\n",
        "* The most important features in the Gradient Boosting Tuned model are Power, Age, Manual Transmisson, Mileage, and Petrol.\n",
        "  * The Sequential Feature Selector had the same 4 excluding Mileage."
      ],
      "metadata": {
        "id": "gcxY_gQXBlqB"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PVzow_ehj6w6"
      },
      "source": [
        "## **Conclusions and Recommendations**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kPywjJo6uS-9"
      },
      "source": [
        "**1. Comparison of various techniques and their relative performance based on chosen Metric (Measure of success):**\n",
        "- How do different techniques perform? Which one is performing relatively better? Is there scope to improve the performance further?\n",
        "  * Answer: Overall model performance across the board is realtively strong, minimal models yielded results that were below acceptable standards. While there was a consistenct lack of large scale improvement beyond the Least Squares model among the other Regularized Regression methods, the Tree Based models did show a higher performance and therefore produced the best model, Gradient Boosting Tuned.\n",
        "  * While the performance is high, the best reccomendation to increase model performance is, as always, if possible increase dataset size. There were low respresenation in more niche Brands and Fuel_Types which were hard to generalize.  \n",
        "  * Reducing the model complexity could be a direction to consider to address the overfitting, perhaps pooling vehicle Brands into more generalized groups.\n",
        "  * And of course being more agressive with removing outliers would have assisted performance, especially the MAPE scores. With increased dataset size, removing these extreme values could be warrented."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5mtOvTtEY7sM"
      },
      "source": [
        "**2. Refined insights:**\n",
        "- What are the most meaningful insights relevant to the problem?\n",
        "  * Answer:  The most meaningful insights were the relationships the data has within variables, and the value of the features determined by the models. Overwhelmingly the key component for pricing is the Power of the vehicle, the age of the vehicle, and the transmission type will increase the ability to predict the price of the vehicle.\n",
        "  * The determination of which Locations are the highest and lowest of specific variables leads to actionable insights for the buying and selling of used cars for profit. Of the locations the Kolkata location would be the most ideal for purchasing vehicles at a lower price and Coimbatore for selling the vehicles.\n",
        "  * The generalized statments that can be made about vehicle attributes and their relevance.\n",
        "      * Higher power vehicles with lower age yield the highest price.\n",
        "      * Diesel powered vehicles, which are more prevelant, have a higher power and are more expensive.\n",
        "      * Manual transmissions lowers the price of the vehicle.\n",
        "      * Lower mileage reported does not contribute to higher prices.\n",
        "      * Increased Kilometers_Driven reduces the price.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HNJHd0R7Y7sM"
      },
      "source": [
        "**3. Proposal for the final solution design:**\n",
        "- What model do you propose to be adopted? Why is this the best solution to adopt?\n",
        "  * Answer: The model with the best overall performance across the metrics was the Tree Based, specifically the Gradient Boosting Tuned Regressor. The sequential addition of weak learners to the model while updating the weights from the residual errors of the Adaboost significantly increased the Rsquare value and removed a substantial amount of overfitting. And while MAPE values would have been more ideal lower, Gradient Boosting did not compromise MAPE while increasing the performance in other areas. XGBoost Regressor and Random Forest Tuned also had promising performance, and while the MAPE values were lower than others, the overfitting increased.  Therefore the Gradient Boosting had a solid performance across the metrics without compromising other areas and then after hyperparameter tuning the model performance exceeded all other tree based, making it the best model across the board.\n",
        "  * I believe the use of this model would be useful to the Cars4U agency.  And the implementation of it's use can be benefical on two sides.  Determining if a vehicle is priced appropriately to buy and the price at which to sell. For maximum profit, this model could be used to determine which vehicles are priced below assumed value, and then with the employment of differential pricing a percentage higher at the resale.  "
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Recommendations**\n",
        "\n",
        "The buying and selling of used cars is complicated market that is highly affected by inventory and locality.  Dynamic and differential pricing is required to create profit stability.  There are a wide array of factors that are incorporated in creating a used car price, a crucial aspect for a profitable resale.  Creating a model to predict sales price is highly useful for both ends.  Determining if a vehicle is priced low enough to purchase for resale, and priced high enough for market trends that will result in a profit is the entire buisness model for success.  \n",
        "\n",
        "The ability to buy low and sell high is not soley based on price, but it's also based on demand.  The bulk of inventory should be marketable cars for consistent proftits that allows for further investments made in either higher risk reward inventroy or simply increased variety of inventory.\n",
        "\n",
        "While market trends evolve quickly, the continued collection of data such as this is absolutely cruicial in the used car industry.  While attending an auction, quick decison are required for the greatest gain.  Having extensive knowledge of the key features that dictate pricing is paramount to making concise decisions about buying used vehicles.  \n",
        "\n",
        "Locality plays are large role in the inventory available.  Affluent and low income areas have different trends as do cities versus rural areas.  Tracking geographical location nuiances allows a company to tap into inventory that other areas value higher increasing profits.  Buying low and selling high does not have to indicate overpricing, it's the knowledge of local market trends that creates differential pricing systems for maximum profitability.\n",
        "\n",
        "Simple exploratory data analysis shows that Kolkata has the lowest average priced vehicles with the lowest age and kilometers driven.  This is confirmed by the above average vehicle counts and the low sum of total price.  Vehicles in this location appear to be newer with lower mileage (kilometers driven) and priced lower than other areas like Coimbatore, where the average price for their newer, low mileage (kilometers driven) vehicles is 2.5 times that of Kolkata.\n",
        "\n",
        "All models also indicated the importance of a vehicles engine power.  Higher power yields higher prices.  And this plays a role in other attributes of the vehicles, diesel vehicles are higher power, and it even shows in that vehicles with lower mileage (mileage reported) yield a higher price.  The cascading effect of understanding the feature relevance is the domain knowledge that is required for effecitive decision making.\n",
        "\n",
        "Creating a system where pricing reflects the value of the vehicle based on the standards of used vehicle sales has the potential to increase profit stability in a fluctuating industry.  This benfits the buyer, the seller, and the overall used vehicle market.  With ever increasing amounts of sales records and a solid model like the one created from this dataset the prediciton of used vehicle prices can feel less unpredictable and create the foundation of a successful used vehicle company."
      ],
      "metadata": {
        "id": "76VSIM4BdeDh"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}